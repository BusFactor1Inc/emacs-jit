# 1 "bytecode.c"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "bytecode.c"
# 35 "bytecode.c"
# 1 "./config.h" 1
# 1667 "./config.h"
# 1 "./conf_post.h" 1
# 37 "./conf_post.h"
# 1 "../lib/alloca.h" 1
# 38 "./conf_post.h" 2
# 185 "./conf_post.h"
# 1 "/usr/include/string.h" 1 3 4
# 27 "/usr/include/string.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 324 "/usr/include/features.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/predefs.h" 1 3 4
# 325 "/usr/include/features.h" 2 3 4
# 357 "/usr/include/features.h" 3 4
# 1 "/usr/include/i386-linux-gnu/sys/cdefs.h" 1 3 4
# 378 "/usr/include/i386-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 379 "/usr/include/i386-linux-gnu/sys/cdefs.h" 2 3 4
# 358 "/usr/include/features.h" 2 3 4
# 389 "/usr/include/features.h" 3 4
# 1 "/usr/include/i386-linux-gnu/gnu/stubs.h" 1 3 4



# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 5 "/usr/include/i386-linux-gnu/gnu/stubs.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/gnu/stubs-32.h" 1 3 4
# 8 "/usr/include/i386-linux-gnu/gnu/stubs.h" 2 3 4
# 390 "/usr/include/features.h" 2 3 4
# 28 "/usr/include/string.h" 2 3 4






# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 212 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 3 4
typedef unsigned int size_t;
# 35 "/usr/include/string.h" 2 3 4









extern void *memcpy (void *__restrict __dest,
       __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, __const void *__src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern void *memccpy (void *__restrict __dest, __const void *__restrict __src,
        int __c, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern void *memset (void *__s, int __c, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int memcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 95 "/usr/include/string.h" 3 4
extern void *memchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 109 "/usr/include/string.h" 3 4
extern void *rawmemchr (__const void *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 120 "/usr/include/string.h" 3 4
extern void *memrchr (__const void *__s, int __c, size_t __n)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern char *strcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, __const char *__restrict __src,
        size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));






# 1 "/usr/include/xlocale.h" 1 3 4
# 28 "/usr/include/xlocale.h" 3 4
typedef struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
} *__locale_t;


typedef __locale_t locale_t;
# 163 "/usr/include/string.h" 2 3 4


extern int strcoll_l (__const char *__s1, __const char *__s2, __locale_t __l)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern size_t strxfrm_l (char *__dest, __const char *__src, size_t __n,
    __locale_t __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (__const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (__const char *__string, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 210 "/usr/include/string.h" 3 4

# 235 "/usr/include/string.h" 3 4
extern char *strchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 262 "/usr/include/string.h" 3 4
extern char *strrchr (__const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));


# 276 "/usr/include/string.h" 3 4
extern char *strchrnul (__const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));






extern size_t strcspn (__const char *__s, __const char *__reject)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 314 "/usr/include/string.h" 3 4
extern char *strpbrk (__const char *__s, __const char *__accept)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 342 "/usr/include/string.h" 3 4
extern char *strstr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strtok (char *__restrict __s, __const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));




extern char *__strtok_r (char *__restrict __s,
    __const char *__restrict __delim,
    char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, __const char *__restrict __delim,
         char **__restrict __save_ptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 3)));
# 373 "/usr/include/string.h" 3 4
extern char *strcasestr (__const char *__haystack, __const char *__needle)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));







extern void *memmem (__const void *__haystack, size_t __haystacklen,
       __const void *__needle, size_t __needlelen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        __const void *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));





extern size_t strlen (__const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern size_t strnlen (__const char *__string, size_t __maxlen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));





extern char *strerror (int __errnum) __attribute__ ((__nothrow__ , __leaf__));

# 438 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));





extern char *strerror_l (int __errnum, __locale_t __l) __attribute__ ((__nothrow__ , __leaf__));





extern void __bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern void bcopy (__const void *__src, void *__dest, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int bcmp (__const void *__s1, __const void *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 489 "/usr/include/string.h" 3 4
extern char *index (__const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 517 "/usr/include/string.h" 3 4
extern char *rindex (__const char *__s, int __c)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern int ffs (int __i) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int ffsl (long int __l) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));

__extension__ extern int ffsll (long long int __ll)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));




extern int strcasecmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (__const char *__s1, __const char *__s2, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));





extern int strcasecmp_l (__const char *__s1, __const char *__s2,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));

extern int strncasecmp_l (__const char *__s1, __const char *__s2,
     size_t __n, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));





extern char *strsep (char **__restrict __stringp,
       __const char *__restrict __delim)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) __attribute__ ((__nothrow__ , __leaf__));


extern char *__stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, __const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        __const char *__restrict __src, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (__const char *__s1, __const char *__s2)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 606 "/usr/include/string.h" 3 4
extern char *basename (__const char *__filename) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 646 "/usr/include/string.h" 3 4

# 186 "./conf_post.h" 2
# 1 "../lib/stdlib.h" 1
# 20 "../lib/stdlib.h"
       
# 21 "../lib/stdlib.h" 3
# 35 "../lib/stdlib.h" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 33 "/usr/include/stdlib.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 324 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 3 4
typedef int wchar_t;
# 34 "/usr/include/stdlib.h" 2 3 4








# 1 "/usr/include/i386-linux-gnu/bits/waitflags.h" 1 3 4
# 43 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/waitstatus.h" 1 3 4
# 65 "/usr/include/i386-linux-gnu/bits/waitstatus.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 37 "/usr/include/endian.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/endian.h" 1 3 4
# 38 "/usr/include/endian.h" 2 3 4
# 61 "/usr/include/endian.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/byteswap.h" 1 3 4
# 62 "/usr/include/endian.h" 2 3 4
# 66 "/usr/include/i386-linux-gnu/bits/waitstatus.h" 2 3 4

union wait
  {
    int w_status;
    struct
      {

 unsigned int __w_termsig:7;
 unsigned int __w_coredump:1;
 unsigned int __w_retcode:8;
 unsigned int:16;







      } __wait_terminated;
    struct
      {

 unsigned int __w_stopval:8;
 unsigned int __w_stopsig:8;
 unsigned int:16;






      } __wait_stopped;
  };
# 44 "/usr/include/stdlib.h" 2 3 4
# 68 "/usr/include/stdlib.h" 3 4
typedef union
  {
    union wait *__uptr;
    int *__iptr;
  } __WAIT_STATUS __attribute__ ((__transparent_union__));
# 96 "/usr/include/stdlib.h" 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;







__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;


# 140 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) __attribute__ ((__nothrow__ , __leaf__)) ;




extern double atof (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





__extension__ extern long long int atoll (__const char *__nptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;





extern double strtod (__const char *__restrict __nptr,
        char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern float strtof (__const char *__restrict __nptr,
       char **__restrict __endptr) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

extern long double strtold (__const char *__restrict __nptr,
       char **__restrict __endptr)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern long int strtol (__const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

extern unsigned long int strtoul (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




__extension__
extern long long int strtoq (__const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtouq (__const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





__extension__
extern long long int strtoll (__const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

__extension__
extern unsigned long long int strtoull (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;

# 240 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (__const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4))) ;

extern unsigned long int strtoul_l (__const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern long long int strtoll_l (__const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4))) ;

__extension__
extern unsigned long long int strtoull_l (__const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 4))) ;

extern double strtod_l (__const char *__restrict __nptr,
   char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;

extern float strtof_l (__const char *__restrict __nptr,
         char **__restrict __endptr, __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;

extern long double strtold_l (__const char *__restrict __nptr,
         char **__restrict __endptr,
         __locale_t __loc)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 3))) ;
# 311 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern long int a64l (__const char *__s)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/i386-linux-gnu/sys/types.h" 1 3 4
# 28 "/usr/include/i386-linux-gnu/sys/types.h" 3 4


# 1 "/usr/include/i386-linux-gnu/bits/types.h" 1 3 4
# 28 "/usr/include/i386-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/bits/types.h" 2 3 4


typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;




__extension__ typedef signed long long int __int64_t;
__extension__ typedef unsigned long long int __uint64_t;







__extension__ typedef long long int __quad_t;
__extension__ typedef unsigned long long int __u_quad_t;
# 131 "/usr/include/i386-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/typesizes.h" 1 3 4
# 132 "/usr/include/i386-linux-gnu/bits/types.h" 2 3 4


__extension__ typedef __u_quad_t __dev_t;
__extension__ typedef unsigned int __uid_t;
__extension__ typedef unsigned int __gid_t;
__extension__ typedef unsigned long int __ino_t;
__extension__ typedef __u_quad_t __ino64_t;
__extension__ typedef unsigned int __mode_t;
__extension__ typedef unsigned int __nlink_t;
__extension__ typedef long int __off_t;
__extension__ typedef __quad_t __off64_t;
__extension__ typedef int __pid_t;
__extension__ typedef struct { int __val[2]; } __fsid_t;
__extension__ typedef long int __clock_t;
__extension__ typedef unsigned long int __rlim_t;
__extension__ typedef __u_quad_t __rlim64_t;
__extension__ typedef unsigned int __id_t;
__extension__ typedef long int __time_t;
__extension__ typedef unsigned int __useconds_t;
__extension__ typedef long int __suseconds_t;

__extension__ typedef int __daddr_t;
__extension__ typedef long int __swblk_t;
__extension__ typedef int __key_t;


__extension__ typedef int __clockid_t;


__extension__ typedef void * __timer_t;


__extension__ typedef long int __blksize_t;




__extension__ typedef long int __blkcnt_t;
__extension__ typedef __quad_t __blkcnt64_t;


__extension__ typedef unsigned long int __fsblkcnt_t;
__extension__ typedef __u_quad_t __fsblkcnt64_t;


__extension__ typedef unsigned long int __fsfilcnt_t;
__extension__ typedef __u_quad_t __fsfilcnt64_t;

__extension__ typedef int __ssize_t;



typedef __off64_t __loff_t;
typedef __quad_t *__qaddr_t;
typedef char *__caddr_t;


__extension__ typedef int __intptr_t;


__extension__ typedef unsigned int __socklen_t;
# 31 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4



typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;




typedef __loff_t loff_t;





typedef __ino64_t ino_t;




typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;







typedef __off64_t off_t;




typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;
# 133 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
# 1 "../lib/time.h" 1 3 4
# 20 "../lib/time.h" 3 4
       
# 21 "../lib/time.h" 3
# 33 "../lib/time.h" 3
# 1 "/usr/include/time.h" 1 3 4
# 58 "/usr/include/time.h" 3 4


typedef __clock_t clock_t;



# 74 "/usr/include/time.h" 3 4


typedef __time_t time_t;



# 92 "/usr/include/time.h" 3 4
typedef __clockid_t clockid_t;
# 104 "/usr/include/time.h" 3 4
typedef __timer_t timer_t;
# 34 "../lib/time.h" 2 3
# 134 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 148 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;
# 195 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
typedef int int8_t __attribute__ ((__mode__ (__QI__)));
typedef int int16_t __attribute__ ((__mode__ (__HI__)));
typedef int int32_t __attribute__ ((__mode__ (__SI__)));
typedef int int64_t __attribute__ ((__mode__ (__DI__)));


typedef unsigned int u_int8_t __attribute__ ((__mode__ (__QI__)));
typedef unsigned int u_int16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int u_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int u_int64_t __attribute__ ((__mode__ (__DI__)));

typedef int register_t __attribute__ ((__mode__ (__word__)));
# 220 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
# 1 "../lib/sys/select.h" 1 3 4
# 19 "../lib/sys/select.h" 3 4
       
# 20 "../lib/sys/select.h" 3
# 61 "../lib/sys/select.h" 3
# 1 "/usr/include/i386-linux-gnu/sys/types.h" 1 3 4
# 62 "../lib/sys/select.h" 2 3
# 83 "../lib/sys/select.h" 3
# 1 "/usr/include/i386-linux-gnu/sys/select.h" 1 3 4
# 31 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/select.h" 1 3 4
# 32 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/bits/sigset.h" 1 3 4
# 24 "/usr/include/i386-linux-gnu/bits/sigset.h" 3 4
typedef int __sig_atomic_t;




typedef struct
  {
    unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
  } __sigset_t;
# 35 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4



typedef __sigset_t sigset_t;





# 1 "../lib/time.h" 1 3 4
# 20 "../lib/time.h" 3 4
       
# 21 "../lib/time.h" 3
# 33 "../lib/time.h" 3
# 1 "/usr/include/time.h" 1 3 4
# 120 "/usr/include/time.h" 3 4
struct timespec
  {
    __time_t tv_sec;
    long int tv_nsec;
  };
# 34 "../lib/time.h" 2 3
# 45 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/i386-linux-gnu/bits/time.h" 1 3 4
# 31 "/usr/include/i386-linux-gnu/bits/time.h" 3 4
struct timeval
  {
    __time_t tv_sec;
    __suseconds_t tv_usec;
  };
# 47 "/usr/include/i386-linux-gnu/sys/select.h" 2 3 4
# 55 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 65 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 97 "/usr/include/i386-linux-gnu/sys/select.h" 3 4

# 107 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 119 "/usr/include/i386-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 132 "/usr/include/i386-linux-gnu/sys/select.h" 3 4

# 84 "../lib/sys/select.h" 2 3
# 558 "../lib/sys/select.h" 3
extern int _gl_cxxalias_dummy

                                                                              ;

extern int _gl_cxxalias_dummy;
# 221 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/i386-linux-gnu/sys/sysmacros.h" 1 3 4
# 30 "/usr/include/i386-linux-gnu/sys/sysmacros.h" 3 4


__extension__
extern unsigned int gnu_dev_major (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned int gnu_dev_minor (unsigned long long int __dev)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
__extension__
extern unsigned long long int gnu_dev_makedev (unsigned int __major,
            unsigned int __minor)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 64 "/usr/include/i386-linux-gnu/sys/sysmacros.h" 3 4

# 224 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;
# 249 "/usr/include/i386-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt_t;



typedef __fsblkcnt64_t fsblkcnt_t;



typedef __fsfilcnt64_t fsfilcnt_t;





typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/i386-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 36 "/usr/include/i386-linux-gnu/bits/pthreadtypes.h" 3 4
typedef unsigned long int pthread_t;


typedef union
{
  char __size[36];
  long int __align;
} pthread_attr_t;


typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;




typedef union
{
  struct __pthread_mutex_s
  {
    int __lock;
    unsigned int __count;
    int __owner;


    int __kind;
    unsigned int __nusers;
    __extension__ union
    {
      int __spins;
      __pthread_slist_t __list;
    };
  } __data;
  char __size[24];
  long int __align;
} pthread_mutex_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_mutexattr_t;




typedef union
{
  struct
  {
    int __lock;
    unsigned int __futex;
    __extension__ unsigned long long int __total_seq;
    __extension__ unsigned long long int __wakeup_seq;
    __extension__ unsigned long long int __woken_seq;
    void *__mutex;
    unsigned int __nwaiters;
    unsigned int __broadcast_seq;
  } __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;

typedef union
{
  char __size[4];
  long int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;





typedef union
{
  struct
  {
    int __lock;
    unsigned int __nr_readers;
    unsigned int __readers_wakeup;
    unsigned int __writer_wakeup;
    unsigned int __nr_readers_queued;
    unsigned int __nr_writers_queued;


    unsigned char __flags;
    unsigned char __shared;
    unsigned char __pad1;
    unsigned char __pad2;
    int __writer;
  } __data;
  char __size[32];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[20];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 272 "/usr/include/i386-linux-gnu/sys/types.h" 2 3 4



# 321 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) __attribute__ ((__nothrow__ , __leaf__));


extern void srandom (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));






extern int rand (void) __attribute__ ((__nothrow__ , __leaf__));

extern void srand (unsigned int __seed) __attribute__ ((__nothrow__ , __leaf__));




extern int rand_r (unsigned int *__seed) __attribute__ ((__nothrow__ , __leaf__));







extern double drand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern double erand48 (unsigned short int __xsubi[3]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int nrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) __attribute__ ((__nothrow__ , __leaf__));
extern long int jrand48 (unsigned short int __xsubi[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) __attribute__ ((__nothrow__ , __leaf__));
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    unsigned long long int __a;
  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));









extern void *malloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;

extern void *calloc (size_t __nmemb, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;










extern void *realloc (void *__ptr, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__warn_unused_result__));

extern void free (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));




extern void cfree (void *__ptr) __attribute__ ((__nothrow__ , __leaf__));
# 503 "/usr/include/stdlib.h" 3 4
extern void *valloc (size_t __size) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern void abort (void) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 528 "/usr/include/stdlib.h" 3 4
extern int at_quick_exit (void (*__func) (void)) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern void exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void quick_exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));







extern void _Exit (int __status) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__noreturn__));






extern char *getenv (__const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;




extern char *__secure_getenv (__const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;





extern int putenv (char *__string) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int setenv (__const char *__name, __const char *__value, int __replace)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int unsetenv (__const char *__name) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) __attribute__ ((__nothrow__ , __leaf__));
# 606 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 623 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __asm__ ("" "mkstemp64")
     __attribute__ ((__nonnull__ (1))) ;





extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 645 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __asm__ ("" "mkstemps64")
                     __attribute__ ((__nonnull__ (1))) ;





extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 663 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 677 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __asm__ ("" "mkostemp64")
     __attribute__ ((__nonnull__ (1))) ;





extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags) __asm__ ("" "mkostemps64")

     __attribute__ ((__nonnull__ (1))) ;





extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;









extern int system (__const char *__command) ;






extern char *canonicalize_file_name (__const char *__name)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 734 "/usr/include/stdlib.h" 3 4
extern char *realpath (__const char *__restrict __name,
         char *__restrict __resolved) __attribute__ ((__nothrow__ , __leaf__)) ;






typedef int (*__compar_fn_t) (__const void *, __const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (__const void *, __const void *, void *);





extern void *bsearch (__const void *__key, __const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;



extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern long int labs (long int __x) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;



__extension__ extern long long int llabs (long long int __x)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;







extern div_t div (int __numer, int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;




__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__)) ;

# 808 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (3, 4, 5)));







extern int mblen (__const char *__s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int mbtowc (wchar_t *__restrict __pwc,
     __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__)) ;


extern int wctomb (char *__s, wchar_t __wchar) __attribute__ ((__nothrow__ , __leaf__)) ;



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   __const char *__restrict __s, size_t __n) __attribute__ ((__nothrow__ , __leaf__));

extern size_t wcstombs (char *__restrict __s,
   __const wchar_t *__restrict __pwcs, size_t __n)
     __attribute__ ((__nothrow__ , __leaf__));








extern int rpmatch (__const char *__response) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1))) ;
# 896 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *__const *__restrict __tokens,
        char **__restrict __valuep)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2, 3))) ;





extern void setkey (__const char *__key) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));



extern int unlockpt (int __fd) __attribute__ ((__nothrow__ , __leaf__));




extern char *ptsname (int __fd) __attribute__ ((__nothrow__ , __leaf__)) ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));
# 964 "/usr/include/stdlib.h" 3 4

# 36 "../lib/stdlib.h" 2 3





# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 150 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 3 4
typedef int ptrdiff_t;
# 42 "../lib/stdlib.h" 2 3
# 538 "../lib/stdlib.h" 3
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
# 187 "./conf_post.h" 2
# 1668 "./config.h" 2
# 36 "bytecode.c" 2

# 1 "lisp.h" 1
# 23 "lisp.h"
# 1 "/usr/include/setjmp.h" 1 3 4
# 28 "/usr/include/setjmp.h" 3 4


# 1 "/usr/include/i386-linux-gnu/bits/setjmp.h" 1 3 4
# 29 "/usr/include/i386-linux-gnu/bits/setjmp.h" 3 4
typedef int __jmp_buf[6];
# 31 "/usr/include/setjmp.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/sigset.h" 1 3 4
# 32 "/usr/include/setjmp.h" 2 3 4



struct __jmp_buf_tag
  {




    __jmp_buf __jmpbuf;
    int __mask_was_saved;
    __sigset_t __saved_mask;
  };




typedef struct __jmp_buf_tag jmp_buf[1];



extern int setjmp (jmp_buf __env) __attribute__ ((__nothrow__));






extern int __sigsetjmp (struct __jmp_buf_tag __env[1], int __savemask) __attribute__ ((__nothrow__));




extern int _setjmp (struct __jmp_buf_tag __env[1]) __attribute__ ((__nothrow__));
# 78 "/usr/include/setjmp.h" 3 4




extern void longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));







extern void _longjmp (struct __jmp_buf_tag __env[1], int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));







typedef struct __jmp_buf_tag sigjmp_buf[1];
# 110 "/usr/include/setjmp.h" 3 4
extern void siglongjmp (sigjmp_buf __env, int __val)
     __attribute__ ((__nothrow__)) __attribute__ ((__noreturn__));
# 120 "/usr/include/setjmp.h" 3 4

# 24 "lisp.h" 2
# 1 "../lib/stdalign.h" 1
# 46 "../lib/stdalign.h"
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 47 "../lib/stdalign.h" 2
# 25 "lisp.h" 2
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 102 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdarg.h" 3 4
typedef __gnuc_va_list va_list;
# 26 "lisp.h" 2
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdbool.h" 1 3 4
# 27 "lisp.h" 2
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 28 "lisp.h" 2
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/float.h" 1 3 4
# 29 "lisp.h" 2
# 1 "../lib/inttypes.h" 1
# 25 "../lib/inttypes.h"
       
# 26 "../lib/inttypes.h" 3
# 41 "../lib/inttypes.h" 3
# 1 "/usr/include/inttypes.h" 1 3 4
# 28 "/usr/include/inttypes.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdint.h" 1 3 4


# 1 "/usr/include/stdint.h" 1 3 4
# 27 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wchar.h" 1 3 4
# 28 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/i386-linux-gnu/bits/wordsize.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 49 "/usr/include/stdint.h" 3 4
typedef unsigned char uint8_t;
typedef unsigned short int uint16_t;

typedef unsigned int uint32_t;





__extension__
typedef unsigned long long int uint64_t;






typedef signed char int_least8_t;
typedef short int int_least16_t;
typedef int int_least32_t;



__extension__
typedef long long int int_least64_t;



typedef unsigned char uint_least8_t;
typedef unsigned short int uint_least16_t;
typedef unsigned int uint_least32_t;



__extension__
typedef unsigned long long int uint_least64_t;






typedef signed char int_fast8_t;





typedef int int_fast16_t;
typedef int int_fast32_t;
__extension__
typedef long long int int_fast64_t;



typedef unsigned char uint_fast8_t;





typedef unsigned int uint_fast16_t;
typedef unsigned int uint_fast32_t;
__extension__
typedef unsigned long long int uint_fast64_t;
# 126 "/usr/include/stdint.h" 3 4
typedef int intptr_t;


typedef unsigned int uintptr_t;
# 138 "/usr/include/stdint.h" 3 4
__extension__
typedef long long int intmax_t;
__extension__
typedef unsigned long long int uintmax_t;
# 4 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stdint.h" 2 3 4
# 29 "/usr/include/inttypes.h" 2 3 4






typedef int __gwchar_t;
# 274 "/usr/include/inttypes.h" 3 4

# 288 "/usr/include/inttypes.h" 3 4
typedef struct
  {
    long long int quot;
    long long int rem;
  } imaxdiv_t;





extern intmax_t imaxabs (intmax_t __n) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern imaxdiv_t imaxdiv (intmax_t __numer, intmax_t __denom)
      __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern intmax_t strtoimax (__const char *__restrict __nptr,
      char **__restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t strtoumax (__const char *__restrict __nptr,
       char ** __restrict __endptr, int __base) __attribute__ ((__nothrow__ , __leaf__));


extern intmax_t wcstoimax (__const __gwchar_t *__restrict __nptr,
      __gwchar_t **__restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));


extern uintmax_t wcstoumax (__const __gwchar_t *__restrict __nptr,
       __gwchar_t ** __restrict __endptr, int __base)
     __attribute__ ((__nothrow__ , __leaf__));
# 442 "/usr/include/inttypes.h" 3 4

# 42 "../lib/inttypes.h" 2 3
# 54 "../lib/inttypes.h" 3
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 34 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/syslimits.h" 1 3 4






# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 169 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 3 4
# 1 "/usr/include/limits.h" 1 3 4
# 145 "/usr/include/limits.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/posix1_lim.h" 1 3 4
# 157 "/usr/include/i386-linux-gnu/bits/posix1_lim.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/local_lim.h" 1 3 4
# 39 "/usr/include/i386-linux-gnu/bits/local_lim.h" 3 4
# 1 "/usr/include/linux/limits.h" 1 3 4
# 40 "/usr/include/i386-linux-gnu/bits/local_lim.h" 2 3 4
# 158 "/usr/include/i386-linux-gnu/bits/posix1_lim.h" 2 3 4
# 146 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/posix2_lim.h" 1 3 4
# 150 "/usr/include/limits.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/xopen_lim.h" 1 3 4
# 34 "/usr/include/i386-linux-gnu/bits/xopen_lim.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/stdio_lim.h" 1 3 4
# 35 "/usr/include/i386-linux-gnu/bits/xopen_lim.h" 2 3 4
# 154 "/usr/include/limits.h" 2 3 4
# 170 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 8 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/syslimits.h" 2 3 4
# 35 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 2 3 4
# 55 "../lib/inttypes.h" 2 3
# 1408 "../lib/inttypes.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1425 "../lib/inttypes.h" 3
extern int _gl_cxxalias_dummy;
extern int _gl_cxxalias_dummy;
# 30 "lisp.h" 2
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 31 "lisp.h" 2

# 1 "../lib/intprops.h" 1
# 23 "../lib/intprops.h"
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include-fixed/limits.h" 1 3 4
# 24 "../lib/intprops.h" 2
# 33 "lisp.h" 2


# 34 "lisp.h"
#pragma GCC diagnostic push
# 34 "lisp.h"

# 34 "lisp.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 34 "lisp.h"

# 34 "lisp.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 34 "lisp.h"

# 34 "lisp.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 34 "lisp.h"

# 61 "lisp.h"
typedef int EMACS_INT;
typedef unsigned int EMACS_UINT;






enum
  {
    BITS_PER_CHAR = 8,
    BITS_PER_SHORT = 8 * sizeof (short),
    BITS_PER_INT = 8 * sizeof (int),
    BITS_PER_LONG = 8 * sizeof (long int),
    BITS_PER_EMACS_INT = 8 * sizeof (EMACS_INT)
  };







typedef intmax_t printmax_t;
typedef uintmax_t uprintmax_t;
# 155 "lisp.h"
enum Lisp_Bits
  {


    GCTYPEBITS =

 3,






    VALBITS = BITS_PER_EMACS_INT - 3,


    INTTYPEBITS = 3 - 1,


    FIXNUM_BITS = VALBITS + 1
  };
# 206 "lisp.h"
enum enum_USE_LSB_TAG { USE_LSB_TAG = 1 };
# 229 "lisp.h"
static EMACS_INT const INTMASK = 2147483647 >> (INTTYPEBITS - 1);
# 242 "lisp.h"
enum Lisp_Type
  {

    Lisp_Int0 = 0,
    Lisp_Int1 = 1 ? 1 << INTTYPEBITS : 1,


    Lisp_Symbol = 2,



    Lisp_Misc = 3,



    Lisp_String = 1 ? 1 : 1 << INTTYPEBITS,





    Lisp_Vectorlike = 5,


    Lisp_Cons = 6,

    Lisp_Float = 7,
  };






enum Lisp_Misc_Type
  {
    Lisp_Misc_Free = 0x5eab,
    Lisp_Misc_Marker,
    Lisp_Misc_Overlay,
    Lisp_Misc_Save_Value,


    Lisp_Misc_Float,

    Lisp_Misc_Limit
  };




enum Lisp_Fwd_Type
  {
    Lisp_Fwd_Int,
    Lisp_Fwd_Bool,
    Lisp_Fwd_Obj,
    Lisp_Fwd_Buffer_Obj,
    Lisp_Fwd_Kboard_Obj,
  };
# 374 "lisp.h"
typedef EMACS_INT Lisp_Object;




enum CHECK_LISP_OBJECT_TYPE { CHECK_LISP_OBJECT_TYPE = 0 };




static ptrdiff_t const ARRAY_MARK_FLAG

      = (-2147483647-1);



static ptrdiff_t const PSEUDOVECTOR_FLAG

      = ((2147483647) - (2147483647) / 2);




enum pvec_type
{
  PVEC_NORMAL_VECTOR,
  PVEC_FREE,
  PVEC_PROCESS,
  PVEC_FRAME,
  PVEC_WINDOW,
  PVEC_BOOL_VECTOR,
  PVEC_BUFFER,
  PVEC_HASH_TABLE,
  PVEC_TERMINAL,
  PVEC_WINDOW_CONFIGURATION,
  PVEC_SUBR,
  PVEC_OTHER,

  PVEC_COMPILED,
  PVEC_CHAR_TABLE,
  PVEC_SUB_CHAR_TABLE,
  PVEC_FONT
};






enum { gdb_DATA_SEG_BITS = 0 };


enum More_Lisp_Bits
  {
    DATA_SEG_BITS = gdb_DATA_SEG_BITS,






    PSEUDOVECTOR_SIZE_BITS = 12,
    PSEUDOVECTOR_SIZE_MASK = (1 << PSEUDOVECTOR_SIZE_BITS) - 1,



    PSEUDOVECTOR_REST_BITS = 12,
    PSEUDOVECTOR_REST_MASK = (((1 << PSEUDOVECTOR_REST_BITS) - 1)
         << PSEUDOVECTOR_SIZE_BITS),


    PSEUDOVECTOR_AREA_BITS = PSEUDOVECTOR_SIZE_BITS + PSEUDOVECTOR_REST_BITS,
    PVEC_TYPE_MASK = 0x3f << PSEUDOVECTOR_AREA_BITS,



    BOOL_VECTOR_BITS_PER_CHAR = 8
  };







enum lsb_bits
  {
    TYPEMASK = (1 << 3) - 1,
    VALMASK = ~ TYPEMASK
  };
# 543 "lisp.h"
extern inline __attribute__ ((__gnu_inline__)) ptrdiff_t
clip_to_bounds (ptrdiff_t lower, EMACS_INT num, ptrdiff_t upper)
{
  return num < lower ? lower : num <= upper ? num : upper;
}
# 687 "lisp.h"
typedef struct interval *INTERVAL;





struct Lisp_Cons
  {

    Lisp_Object car;

    union
    {

      Lisp_Object cdr;


      struct Lisp_Cons *chain;
    } u;
  };
# 782 "lisp.h"
static ptrdiff_t const STRING_BYTES_BOUND =


 ((ptrdiff_t) (((2147483647 >> INTTYPEBITS)) < ((((4294967295U)) < ((2147483647)) ? ((4294967295U)) : ((2147483647))) - 1) ? ((2147483647 >> INTTYPEBITS)) : ((((4294967295U)) < ((2147483647)) ? ((4294967295U)) : ((2147483647))) - 1)));
# 802 "lisp.h"
struct Lisp_String
  {
    ptrdiff_t size;
    ptrdiff_t size_byte;
    INTERVAL intervals;
    unsigned char *data;
  };
# 817 "lisp.h"
struct vectorlike_header
  {
# 838 "lisp.h"
    ptrdiff_t size;
  };



struct Lisp_Vector
  {
    struct vectorlike_header header;
    Lisp_Object contents[1];
  };



struct Lisp_Bool_Vector
  {


    struct vectorlike_header header;

    EMACS_INT size;

    unsigned char data[1];
  };




enum
  {
    header_size = __builtin_offsetof (struct Lisp_Vector, contents),
    bool_header_size = __builtin_offsetof (struct Lisp_Bool_Vector, data),
    word_size = sizeof (Lisp_Object)
  };
# 948 "lisp.h"
enum CHARTAB_SIZE_BITS
  {
    CHARTAB_SIZE_BITS_0 = 6,
    CHARTAB_SIZE_BITS_1 = 4,
    CHARTAB_SIZE_BITS_2 = 5,
    CHARTAB_SIZE_BITS_3 = 7
  };

extern const int chartab_size[4];

struct Lisp_Char_Table
  {




    struct vectorlike_header header;



    Lisp_Object defalt;




    Lisp_Object parent;



    Lisp_Object purpose;



    Lisp_Object ascii;

    Lisp_Object contents[(1 << CHARTAB_SIZE_BITS_0)];


    Lisp_Object extras[1];
  };

struct Lisp_Sub_Char_Table
  {


    struct vectorlike_header header;







    Lisp_Object depth;


    Lisp_Object min_char;


    Lisp_Object contents[1];
  };





struct Lisp_Subr
  {
    struct vectorlike_header header;
    union {
      Lisp_Object (*a0) (void);
      Lisp_Object (*a1) (Lisp_Object);
      Lisp_Object (*a2) (Lisp_Object, Lisp_Object);
      Lisp_Object (*a3) (Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a4) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a5) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a6) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a7) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*a8) (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
      Lisp_Object (*aUNEVALLED) (Lisp_Object args);
      Lisp_Object (*aMANY) (ptrdiff_t, Lisp_Object *);
    } function;
    short min_args, max_args;
    const char *symbol_name;
    const char *intspec;
    const char *doc;
  };




enum CHAR_TABLE_STANDARD_SLOTS
  {
    CHAR_TABLE_STANDARD_SLOTS = ((sizeof (struct Lisp_Char_Table) - header_size + word_size - 1) / word_size) - 1
  };
# 1056 "lisp.h"
enum symbol_interned
{
  SYMBOL_UNINTERNED = 0,
  SYMBOL_INTERNED = 1,
  SYMBOL_INTERNED_IN_INITIAL_OBARRAY = 2
};

enum symbol_redirect
{
  SYMBOL_PLAINVAL = 4,
  SYMBOL_VARALIAS = 1,
  SYMBOL_LOCALIZED = 2,
  SYMBOL_FORWARDED = 3
};

struct Lisp_Symbol
{
  unsigned gcmarkbit : 1;






  enum symbol_redirect redirect : 3;




  unsigned constant : 2;



  unsigned interned : 2;



  unsigned declared_special : 1;


  Lisp_Object name;



  union {
    Lisp_Object value;
    struct Lisp_Symbol *alias;
    struct Lisp_Buffer_Local_Value *blv;
    union Lisp_Fwd *fwd;
  } val;


  Lisp_Object function;


  Lisp_Object plist;


  struct Lisp_Symbol *next;
};
# 1164 "lisp.h"
struct hash_table_test
{

  Lisp_Object name;


  Lisp_Object user_hash_function;


  Lisp_Object user_cmp_function;


  _Bool (*cmpfn) (struct hash_table_test *t, Lisp_Object, Lisp_Object);


  EMACS_UINT (*hashfn) (struct hash_table_test *t, Lisp_Object);
};

struct Lisp_Hash_Table
{

  struct vectorlike_header header;



  Lisp_Object weak;




  Lisp_Object rehash_size;



  Lisp_Object rehash_threshold;



  Lisp_Object hash;




  Lisp_Object next;


  Lisp_Object next_free;




  Lisp_Object index;






  ptrdiff_t count;




  Lisp_Object key_and_value;


  struct hash_table_test test;



  struct Lisp_Hash_Table *next_weak;
};
# 1277 "lisp.h"
enum DEFAULT_HASH_SIZE { DEFAULT_HASH_SIZE = 65 };





static double const DEFAULT_REHASH_THRESHOLD = 0.8;



static double const DEFAULT_REHASH_SIZE = 1.5;




extern inline __attribute__ ((__gnu_inline__)) EMACS_UINT
sxhash_combine (EMACS_UINT x, EMACS_UINT y)
{
  return (x << 4) + (x >> (BITS_PER_EMACS_INT - 4)) + y;
}



struct Lisp_Misc_Any
{
  enum Lisp_Misc_Type type : 16;
  unsigned gcmarkbit : 1;
  int spacer : 15;
};

struct Lisp_Marker
{
  enum Lisp_Misc_Type type : 16;
  unsigned gcmarkbit : 1;
  int spacer : 13;



  unsigned int need_adjustment : 1;


  unsigned int insertion_type : 1;
# 1329 "lisp.h"
  struct buffer *buffer;
# 1338 "lisp.h"
  struct Lisp_Marker *next;

  ptrdiff_t charpos;




  ptrdiff_t bytepos;
};



struct Lisp_Overlay
# 1362 "lisp.h"
  {
    enum Lisp_Misc_Type type : 16;
    unsigned gcmarkbit : 1;
    int spacer : 15;
    struct Lisp_Overlay *next;
    Lisp_Object start;
    Lisp_Object end;
    Lisp_Object plist;
  };



struct Lisp_Save_Value
  {
    enum Lisp_Misc_Type type : 16;
    unsigned gcmarkbit : 1;
    int spacer : 14;


    unsigned int dogc : 1;
    void *pointer;
    ptrdiff_t integer;
  };



struct Lisp_Free
  {
    enum Lisp_Misc_Type type : 16;
    unsigned gcmarkbit : 1;
    int spacer : 15;
    union Lisp_Misc *chain;
  };




union Lisp_Misc
  {
    struct Lisp_Misc_Any u_any;
    struct Lisp_Free u_free;
    struct Lisp_Marker u_marker;
    struct Lisp_Overlay u_overlay;
    struct Lisp_Save_Value u_save_value;
  };





struct Lisp_Intfwd
  {
    enum Lisp_Fwd_Type type;
    EMACS_INT *intvar;
  };





struct Lisp_Boolfwd
  {
    enum Lisp_Fwd_Type type;
    _Bool *boolvar;
  };





struct Lisp_Objfwd
  {
    enum Lisp_Fwd_Type type;
    Lisp_Object *objvar;
  };



struct Lisp_Buffer_Objfwd
  {
    enum Lisp_Fwd_Type type;
    int offset;
    Lisp_Object slottype;
  };
# 1471 "lisp.h"
struct Lisp_Buffer_Local_Value
  {


    unsigned int local_if_set : 1;


    unsigned int frame_local : 1;


    unsigned int found : 1;

    union Lisp_Fwd *fwd;

    Lisp_Object where;


    Lisp_Object defcell;





    Lisp_Object valcell;
  };



struct Lisp_Kboard_Objfwd
  {
    enum Lisp_Fwd_Type type;
    int offset;
  };

union Lisp_Fwd
  {
    struct Lisp_Intfwd u_intfwd;
    struct Lisp_Boolfwd u_boolfwd;
    struct Lisp_Objfwd u_objfwd;
    struct Lisp_Buffer_Objfwd u_buffer_objfwd;
    struct Lisp_Kboard_Objfwd u_kboard_objfwd;
  };


struct Lisp_Float
  {
    union
    {
      double data;
      struct Lisp_Float *chain;
    } u;
  };
# 1541 "lisp.h"
typedef unsigned char UCHAR;




enum Lisp_Compiled
  {
    COMPILED_ARGLIST = 0,
    COMPILED_BYTECODE = 1,
    COMPILED_CONSTANTS = 2,
    COMPILED_STACK_DEPTH = 3,
    COMPILED_DOC_STRING = 4,
    COMPILED_INTERACTIVE = 5
  };





enum char_bits
  {
    CHAR_ALT = 0x0400000,
    CHAR_SUPER = 0x0800000,
    CHAR_HYPER = 0x1000000,
    CHAR_SHIFT = 0x2000000,
    CHAR_CTL = 0x4000000,
    CHAR_META = 0x8000000,

    CHAR_MODIFIER_MASK =
      CHAR_ALT | CHAR_SUPER | CHAR_HYPER | CHAR_SHIFT | CHAR_CTL | CHAR_META,



    CHARACTERBITS = 22
  };







typedef struct {
  int ch;
  int face_id;
} GLYPH;
# 1637 "lisp.h"
typedef struct {





  int mouse_face_beg_row, mouse_face_beg_col;
  int mouse_face_beg_x, mouse_face_beg_y;
  int mouse_face_end_row, mouse_face_end_col;
  int mouse_face_end_x, mouse_face_end_y;
  int mouse_face_past_end;
  Lisp_Object mouse_face_window;
  int mouse_face_face_id;
  Lisp_Object mouse_face_overlay;



  struct frame *mouse_face_mouse_frame;
  int mouse_face_mouse_x, mouse_face_mouse_y;


  int mouse_face_defer;


  int mouse_face_hidden;

  int mouse_face_image_state;
} Mouse_HLInfo;
# 1934 "lisp.h"
extern void defsubr (struct Lisp_Subr *);

enum maxargs
  {
    MANY = -2,
    UNEVALLED = -1
  };

extern void defvar_lisp (struct Lisp_Objfwd *, const char *, Lisp_Object *);
extern void defvar_lisp_nopro (struct Lisp_Objfwd *, const char *, Lisp_Object *);
extern void defvar_bool (struct Lisp_Boolfwd *, const char *, _Bool *);
extern void defvar_int (struct Lisp_Intfwd *, const char *, EMACS_INT *);
extern void defvar_kboard (struct Lisp_Kboard_Objfwd *, const char *, int);
# 2002 "lisp.h"
typedef jmp_buf sys_jmp_buf;
# 2038 "lisp.h"
typedef Lisp_Object (*specbinding_func) (Lisp_Object);

struct specbinding
  {
    Lisp_Object symbol, old_value;
    specbinding_func func;
    Lisp_Object unused;
  };

extern struct specbinding *specpdl;
extern struct specbinding *specpdl_ptr;
extern ptrdiff_t specpdl_size;



struct backtrace
{
  struct backtrace *next;
  Lisp_Object function;
  Lisp_Object *args;
  ptrdiff_t nargs;

  unsigned int debug_on_exit : 1;
};

extern struct backtrace *backtrace_list;





struct handler
  {







    Lisp_Object handler;

    Lisp_Object volatile var;



    Lisp_Object volatile chosen_clause;


    struct catchtag *tag;


    struct handler *next;
  };
# 2114 "lisp.h"
struct catchtag
{
  Lisp_Object tag;
  Lisp_Object volatile val;
  struct catchtag *volatile next;
  struct gcpro *gcpro;
  sys_jmp_buf jmp;
  struct backtrace *backlist;
  struct handler *handlerlist;
  EMACS_INT lisp_eval_depth;
  ptrdiff_t volatile pdlcount;
  int poll_suppress_count;
  int interrupt_input_blocked;
  struct byte_stack *byte_stack;
};

extern Lisp_Object memory_signal_data;



extern char *stack_bottom;
# 2152 "lisp.h"
extern void process_pending_signals (void);
extern _Bool volatile pending_signals;

extern void process_quit_flag (void);
# 2169 "lisp.h"
extern Lisp_Object Vascii_downcase_table;
extern Lisp_Object Vascii_canon_table;
# 2185 "lisp.h"
extern struct gcpro *gcprolist;

struct gcpro
{
  struct gcpro *next;


  volatile Lisp_Object *var;


  ptrdiff_t nvars;




};
# 2365 "lisp.h"
void staticpro (Lisp_Object *);
# 2375 "lisp.h"
struct window;
struct frame;



extern inline __attribute__ ((__gnu_inline__)) Lisp_Object *
aref_addr (Lisp_Object array, ptrdiff_t idx)
{
  return & (((void) (0 && ((((enum Lisp_Type) (((array)) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) ((array) - (Lisp_Vectorlike))))->contents[idx];
}

extern inline __attribute__ ((__gnu_inline__)) void
gc_aset (Lisp_Object array, ptrdiff_t idx, Lisp_Object val)
{


  ((void) (0 && (0 <= idx && idx < ((((void) (0 && ((((enum Lisp_Type) ((((array))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((array)) - (Lisp_Vectorlike))))->header.size & ~(-2147483647-1)))));
  (((void) (0 && ((((enum Lisp_Type) (((array)) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) ((array) - (Lisp_Vectorlike))))->contents[idx] = val;
}



extern inline __attribute__ ((__gnu_inline__)) void
vcopy (Lisp_Object v, ptrdiff_t offset, Lisp_Object *args, ptrdiff_t count)
{
  ((void) (0 && (0 <= offset && 0 <= count && offset + count <= (((void) (0 && ((((enum Lisp_Type) ((((v))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((v)) - (Lisp_Vectorlike))))->header.size)));
  memcpy ((((void) (0 && ((((enum Lisp_Type) (((v)) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) ((v) - (Lisp_Vectorlike))))->contents + offset, args, count * sizeof *args);
}



extern inline __attribute__ ((__gnu_inline__)) void
set_hash_key_and_value (struct Lisp_Hash_Table *h, Lisp_Object key_and_value)
{
  h->key_and_value = key_and_value;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_key_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->key_and_value, 2 * idx, val);
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_value_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->key_and_value, 2 * idx + 1, val);
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_next (struct Lisp_Hash_Table *h, Lisp_Object next)
{
  h->next = next;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_next_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->next, idx, val);
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_hash (struct Lisp_Hash_Table *h, Lisp_Object hash)
{
  h->hash = hash;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_hash_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->hash, idx, val);
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_index (struct Lisp_Hash_Table *h, Lisp_Object index)
{
  h->index = index;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_hash_index_slot (struct Lisp_Hash_Table *h, ptrdiff_t idx, Lisp_Object val)
{
  gc_aset (h->index, idx, val);
}




extern inline __attribute__ ((__gnu_inline__)) void
set_symbol_name (Lisp_Object sym, Lisp_Object name)
{
  (((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->name = name;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_symbol_function (Lisp_Object sym, Lisp_Object function)
{
  (((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->function = function;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_symbol_plist (Lisp_Object sym, Lisp_Object plist)
{
  (((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->plist = plist;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_symbol_next (Lisp_Object sym, struct Lisp_Symbol *next)
{
  (((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->next = next;
}



extern inline __attribute__ ((__gnu_inline__)) int
blv_found (struct Lisp_Buffer_Local_Value *blv)
{
  ((void) (0 && (blv->found == !((blv->defcell) == (blv->valcell)))));
  return blv->found;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_blv_found (struct Lisp_Buffer_Local_Value *blv, int found)
{
  ((void) (0 && (found == !((blv->defcell) == (blv->valcell)))));
  blv->found = found;
}

extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
blv_value (struct Lisp_Buffer_Local_Value *blv)
{
  return (0 + (((((void) (0 && ((((enum Lisp_Type) (((blv->valcell)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((blv->valcell) - (Lisp_Cons))))->u.cdr)));
}

extern inline __attribute__ ((__gnu_inline__)) void
set_blv_value (struct Lisp_Buffer_Local_Value *blv, Lisp_Object val)
{
  (((((void) (0 && ((((enum Lisp_Type) (((blv->valcell)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((blv->valcell) - (Lisp_Cons))))->u.cdr) = (val));
}

extern inline __attribute__ ((__gnu_inline__)) void
set_blv_where (struct Lisp_Buffer_Local_Value *blv, Lisp_Object val)
{
  blv->where = val;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_blv_defcell (struct Lisp_Buffer_Local_Value *blv, Lisp_Object val)
{
  blv->defcell = val;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_blv_valcell (struct Lisp_Buffer_Local_Value *blv, Lisp_Object val)
{
  blv->valcell = val;
}



extern inline __attribute__ ((__gnu_inline__)) void
set_overlay_plist (Lisp_Object overlay, Lisp_Object plist)
{
  (((void) (0 && (((((enum Lisp_Type) (((overlay)) & TYPEMASK)) == Lisp_Misc) && ((((void) (0 && ((((enum Lisp_Type) (((overlay)) & TYPEMASK)) == Lisp_Misc)))), &(((union Lisp_Misc *) ((intptr_t) ((overlay) - (Lisp_Misc))))->u_any))->type) == Lisp_Misc_Overlay)))), &(((union Lisp_Misc *) ((intptr_t) ((overlay) - (Lisp_Misc))))->u_overlay))->plist = plist;
}



extern inline __attribute__ ((__gnu_inline__)) INTERVAL
string_intervals (Lisp_Object s)
{
  return (((void) (0 && ((((enum Lisp_Type) (((s)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((s) - (Lisp_String))))->intervals;
}



extern inline __attribute__ ((__gnu_inline__)) void
set_string_intervals (Lisp_Object s, INTERVAL i)
{
  (((void) (0 && ((((enum Lisp_Type) (((s)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((s) - (Lisp_String))))->intervals = i;
}




extern inline __attribute__ ((__gnu_inline__)) void
set_char_table_ascii (Lisp_Object table, Lisp_Object val)
{
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->ascii = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
set_char_table_defalt (Lisp_Object table, Lisp_Object val)
{
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->defalt = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
set_char_table_parent (Lisp_Object table, Lisp_Object val)
{
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->parent = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
set_char_table_purpose (Lisp_Object table, Lisp_Object val)
{
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->purpose = val;
}



extern inline __attribute__ ((__gnu_inline__)) void
set_char_table_extras (Lisp_Object table, ptrdiff_t idx, Lisp_Object val)
{
  ((void) (0 && (0 <= idx && idx < ((((((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike)))))->header.size & PSEUDOVECTOR_SIZE_MASK) - CHAR_TABLE_STANDARD_SLOTS))));
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->extras[idx] = val;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_char_table_contents (Lisp_Object table, ptrdiff_t idx, Lisp_Object val)
{
  ((void) (0 && (0 <= idx && idx < (1 << CHARTAB_SIZE_BITS_0))));
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->contents[idx] = val;
}

extern inline __attribute__ ((__gnu_inline__)) void
set_sub_char_table_contents (Lisp_Object table, ptrdiff_t idx, Lisp_Object val)
{
  (((void) (0 && (((((enum Lisp_Type) (((table)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((table) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), ((struct Lisp_Sub_Char_Table *) ((intptr_t) ((table) - (Lisp_Vectorlike)))))->contents[idx] = val;
}


extern Lisp_Object Qnil, Qt, Qquote, Qlambda, Qunbound;
extern Lisp_Object Qerror_conditions, Qerror_message, Qtop_level;
extern Lisp_Object Qerror, Qquit, Qargs_out_of_range;
extern Lisp_Object Qvoid_variable, Qvoid_function;
extern Lisp_Object Qinvalid_read_syntax;
extern Lisp_Object Qinvalid_function, Qwrong_number_of_arguments, Qno_catch;
extern Lisp_Object Quser_error, Qend_of_file, Qarith_error, Qmark_inactive;
extern Lisp_Object Qbeginning_of_buffer, Qend_of_buffer, Qbuffer_read_only;
extern Lisp_Object Qtext_read_only;
extern Lisp_Object Qinteractive_form;
extern Lisp_Object Qcircular_list;
extern Lisp_Object Qintegerp, Qwholenump, Qsymbolp, Qlistp, Qconsp;
extern Lisp_Object Qstringp, Qarrayp, Qsequencep, Qbufferp;
extern Lisp_Object Qchar_or_string_p, Qmarkerp, Qinteger_or_marker_p, Qvectorp;
extern Lisp_Object Qbuffer_or_string_p;
extern Lisp_Object Qfboundp;
extern Lisp_Object Qchar_table_p, Qvector_or_char_table_p;

extern Lisp_Object Qcdr;

extern Lisp_Object Qrange_error, Qoverflow_error;

extern Lisp_Object Qfloatp;
extern Lisp_Object Qnumberp, Qnumber_or_marker_p;

extern Lisp_Object Qbuffer, Qinteger, Qsymbol;

extern Lisp_Object Qfont_spec, Qfont_entity, Qfont_object;

extern Lisp_Object Fbyteorder (void) __attribute__ ((__const__));


extern Lisp_Object indirect_function (Lisp_Object);
extern Lisp_Object find_symbol_value (Lisp_Object);
# 2664 "lisp.h"
extern intmax_t cons_to_signed (Lisp_Object, intmax_t, intmax_t);
extern uintmax_t cons_to_unsigned (Lisp_Object, uintmax_t);

extern struct Lisp_Symbol *indirect_variable (struct Lisp_Symbol *);
extern __attribute__ ((__noreturn__)) void args_out_of_range (Lisp_Object, Lisp_Object);
extern __attribute__ ((__noreturn__)) void args_out_of_range_3 (Lisp_Object, Lisp_Object,
        Lisp_Object);
extern __attribute__ ((__noreturn__)) Lisp_Object wrong_type_argument (Lisp_Object, Lisp_Object);
extern Lisp_Object do_symval_forwarding (union Lisp_Fwd *);
extern void set_internal (Lisp_Object, Lisp_Object, Lisp_Object, _Bool);
extern void syms_of_data (void);
extern void swap_in_global_binding (struct Lisp_Symbol *);


extern void syms_of_cmds (void);
extern void keys_of_cmds (void);


extern Lisp_Object Qcharset;
extern Lisp_Object detect_coding_system (const unsigned char *, ptrdiff_t,
                                         ptrdiff_t, _Bool, _Bool, Lisp_Object);
extern void init_coding (void);
extern void init_coding_once (void);
extern void syms_of_coding (void);


extern Lisp_Object Fmax_char (void) __attribute__ ((__const__));
extern ptrdiff_t chars_in_text (const unsigned char *, ptrdiff_t);
extern ptrdiff_t multibyte_chars_in_text (const unsigned char *, ptrdiff_t);
extern int multibyte_char_to_unibyte (int) __attribute__ ((__const__));
extern int multibyte_char_to_unibyte_safe (int) __attribute__ ((__const__));
extern void syms_of_character (void);


extern void init_charset (void);
extern void init_charset_once (void);
extern void syms_of_charset (void);

struct charset;


extern void syms_of_composite (void);


extern void init_syntax_once (void);
extern void syms_of_syntax (void);


extern Lisp_Object QCrehash_size, QCrehash_threshold;
enum { NEXT_ALMOST_PRIME_LIMIT = 11 };
extern Lisp_Object Fidentity (Lisp_Object) __attribute__ ((__const__));
extern EMACS_INT next_almost_prime (EMACS_INT) __attribute__ ((__const__));
extern Lisp_Object larger_vector (Lisp_Object, ptrdiff_t, ptrdiff_t);
extern void sweep_weak_hash_tables (void);
extern Lisp_Object Qcursor_in_echo_area;
extern Lisp_Object Qstring_lessp;
extern Lisp_Object QCsize, QCtest, QCweakness, Qequal, Qeq;
EMACS_UINT hash_string (char const *, ptrdiff_t);
EMACS_UINT sxhash (Lisp_Object, int);
Lisp_Object make_hash_table (struct hash_table_test, Lisp_Object, Lisp_Object,
                             Lisp_Object, Lisp_Object);
ptrdiff_t hash_lookup (struct Lisp_Hash_Table *, Lisp_Object, EMACS_UINT *);
ptrdiff_t hash_put (struct Lisp_Hash_Table *, Lisp_Object, Lisp_Object,
      EMACS_UINT);
extern struct hash_table_test hashtest_eql, hashtest_equal;

extern Lisp_Object substring_both (Lisp_Object, ptrdiff_t, ptrdiff_t,
       ptrdiff_t, ptrdiff_t);
extern Lisp_Object do_yes_or_no_p (Lisp_Object);
extern Lisp_Object concat2 (Lisp_Object, Lisp_Object);
extern Lisp_Object concat3 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object nconc2 (Lisp_Object, Lisp_Object);
extern Lisp_Object assq_no_quit (Lisp_Object, Lisp_Object);
extern Lisp_Object assoc_no_quit (Lisp_Object, Lisp_Object);
extern void clear_string_char_byte_cache (void);
extern ptrdiff_t string_char_to_byte (Lisp_Object, ptrdiff_t);
extern ptrdiff_t string_byte_to_char (Lisp_Object, ptrdiff_t);
extern Lisp_Object string_to_multibyte (Lisp_Object);
extern Lisp_Object string_make_unibyte (Lisp_Object);
extern void syms_of_fns (void);


extern double extract_float (Lisp_Object);
extern void syms_of_floatfns (void);
extern Lisp_Object fmod_float (Lisp_Object x, Lisp_Object y);


extern void syms_of_fringe (void);
extern void init_fringe (void);

extern void mark_fringe_data (void);
extern void init_fringe_once (void);



extern Lisp_Object QCascent, QCmargin, QCrelief;
extern Lisp_Object QCconversion;
extern int x_bitmap_mask (struct frame *, ptrdiff_t);
extern void reset_image_types (void);
extern void syms_of_image (void);


extern Lisp_Object Qinhibit_modification_hooks;
extern void move_gap (ptrdiff_t);
extern void move_gap_both (ptrdiff_t, ptrdiff_t);
extern __attribute__ ((__noreturn__)) void buffer_overflow (void);
extern void make_gap (ptrdiff_t);
extern ptrdiff_t copy_text (const unsigned char *, unsigned char *,
       ptrdiff_t, _Bool, _Bool);
extern int count_combining_before (const unsigned char *,
       ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern int count_combining_after (const unsigned char *,
      ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern void insert (const char *, ptrdiff_t);
extern void insert_and_inherit (const char *, ptrdiff_t);
extern void insert_1 (const char *, ptrdiff_t, _Bool, _Bool, _Bool);
extern void insert_1_both (const char *, ptrdiff_t, ptrdiff_t,
      _Bool, _Bool, _Bool);
extern void insert_from_gap (ptrdiff_t, ptrdiff_t);
extern void insert_from_string (Lisp_Object, ptrdiff_t, ptrdiff_t,
    ptrdiff_t, ptrdiff_t, _Bool);
extern void insert_from_buffer (struct buffer *, ptrdiff_t, ptrdiff_t, _Bool);
extern void insert_char (int);
extern void insert_string (const char *);
extern void insert_before_markers (const char *, ptrdiff_t);
extern void insert_before_markers_and_inherit (const char *, ptrdiff_t);
extern void insert_from_string_before_markers (Lisp_Object, ptrdiff_t,
            ptrdiff_t, ptrdiff_t,
            ptrdiff_t, _Bool);
extern void del_range (ptrdiff_t, ptrdiff_t);
extern Lisp_Object del_range_1 (ptrdiff_t, ptrdiff_t, _Bool, _Bool);
extern void del_range_byte (ptrdiff_t, ptrdiff_t, _Bool);
extern void del_range_both (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t, _Bool);
extern Lisp_Object del_range_2 (ptrdiff_t, ptrdiff_t,
    ptrdiff_t, ptrdiff_t, _Bool);
extern void modify_region (struct buffer *, ptrdiff_t, ptrdiff_t, _Bool);
extern void prepare_to_modify_buffer (ptrdiff_t, ptrdiff_t, ptrdiff_t *);
extern void signal_after_change (ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern void adjust_after_insert (ptrdiff_t, ptrdiff_t, ptrdiff_t,
     ptrdiff_t, ptrdiff_t);
extern void adjust_markers_for_delete (ptrdiff_t, ptrdiff_t,
           ptrdiff_t, ptrdiff_t);
extern void replace_range (ptrdiff_t, ptrdiff_t, Lisp_Object, _Bool, _Bool, _Bool);
extern void replace_range_2 (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t,
        const char *, ptrdiff_t, ptrdiff_t, _Bool);
extern void syms_of_insdel (void);






extern Lisp_Object selected_frame;
extern Lisp_Object Vwindow_system;
extern Lisp_Object sit_for (Lisp_Object, _Bool, int);
extern void init_display (void);
extern void syms_of_display (void);


extern Lisp_Object Qinhibit_point_motion_hooks;
extern Lisp_Object Qinhibit_redisplay, Qdisplay;
extern Lisp_Object Qmenu_bar_update_hook;
extern Lisp_Object Qwindow_scroll_functions;
extern Lisp_Object Qoverriding_local_map, Qoverriding_terminal_local_map;
extern Lisp_Object Qimage, Qtext, Qboth, Qboth_horiz, Qtext_image_horiz;
extern Lisp_Object Qspace, Qcenter, QCalign_to;
extern Lisp_Object Qbar, Qhbar, Qbox, Qhollow;
extern Lisp_Object Qleft_margin, Qright_margin;
extern Lisp_Object Qglyphless_char;
extern Lisp_Object QCdata, QCfile;
extern Lisp_Object QCmap;
extern Lisp_Object Qrisky_local_variable;
extern struct frame *last_glyphless_glyph_frame;
extern int last_glyphless_glyph_face_id;
extern int last_glyphless_glyph_merged_face_id;
extern int noninteractive_need_newline;
extern Lisp_Object echo_area_buffer[2];
extern void add_to_log (const char *, Lisp_Object, Lisp_Object);
extern void check_message_stack (void);
extern void setup_echo_area_for_printing (int);
extern _Bool push_message (void);
extern Lisp_Object pop_message_unwind (Lisp_Object);
extern Lisp_Object restore_message_unwind (Lisp_Object);
extern void restore_message (void);
extern Lisp_Object current_message (void);
extern void clear_message (int, int);
extern void message (const char *, ...) __attribute__ ((__format__ (__gnu_printf__, 1, 2)));
extern void message1 (const char *);
extern void message1_nolog (const char *);
extern void message2 (const char *, ptrdiff_t, int);
extern void message2_nolog (const char *, ptrdiff_t, int);
extern void message3 (Lisp_Object, ptrdiff_t, int);
extern void message3_nolog (Lisp_Object, ptrdiff_t, int);
extern void message_dolog (const char *, ptrdiff_t, int, int);
extern void message_with_string (const char *, Lisp_Object, int);
extern void message_log_maybe_newline (void);
extern void update_echo_area (void);
extern void truncate_echo_area (ptrdiff_t);
extern void redisplay (void);
extern void redisplay_preserve_echo_area (int);
extern void prepare_menu_bars (void);

void set_frame_cursor_types (struct frame *, Lisp_Object);
extern void syms_of_xdisp (void);
extern void init_xdisp (void);
extern Lisp_Object safe_eval (Lisp_Object);
extern int pos_visible_p (struct window *, ptrdiff_t, int *,
                          int *, int *, int *, int *, int *);


extern void syms_of_xsettings (void);


extern void memory_warnings (void *, void (*warnfun) (const char *));


extern void check_pure_size (void);
extern void allocate_string_data (struct Lisp_String *, EMACS_INT, EMACS_INT);
extern void malloc_warning (const char *);
extern __attribute__ ((__noreturn__)) void memory_full (size_t);
extern __attribute__ ((__noreturn__)) void buffer_memory_full (ptrdiff_t);
extern _Bool survives_gc_p (Lisp_Object);
extern void mark_object (Lisp_Object);



extern const char *pending_malloc_warning;
extern Lisp_Object zero_vector;
extern Lisp_Object *stack_base;
extern EMACS_INT consing_since_gc;
extern EMACS_INT gc_relative_threshold;
extern EMACS_INT memory_full_cons_threshold;
extern Lisp_Object list1 (Lisp_Object);
extern Lisp_Object list2 (Lisp_Object, Lisp_Object);
extern Lisp_Object list3 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object list4 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object list5 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object,
     Lisp_Object);
enum constype {CONSTYPE_HEAP, CONSTYPE_PURE};
extern Lisp_Object listn (enum constype, ptrdiff_t, Lisp_Object, ...);
extern __attribute__ ((__noreturn__)) void string_overflow (void);
extern Lisp_Object make_string (const char *, ptrdiff_t);
extern Lisp_Object make_formatted_string (char *, const char *, ...)
  __attribute__ ((__format__ (__gnu_printf__, 2, 3)));
extern Lisp_Object make_unibyte_string (const char *, ptrdiff_t);



extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
build_unibyte_string (const char *str)
{
  return make_unibyte_string (str, strlen (str));
}

extern Lisp_Object make_multibyte_string (const char *, ptrdiff_t, ptrdiff_t);
extern Lisp_Object make_event_array (int, Lisp_Object *);
extern Lisp_Object make_uninit_string (EMACS_INT);
extern Lisp_Object make_uninit_multibyte_string (EMACS_INT, EMACS_INT);
extern Lisp_Object make_string_from_bytes (const char *, ptrdiff_t, ptrdiff_t);
extern Lisp_Object make_specified_string (const char *,
       ptrdiff_t, ptrdiff_t, _Bool);
extern Lisp_Object make_pure_string (const char *, ptrdiff_t, ptrdiff_t, _Bool);
extern Lisp_Object make_pure_c_string (const char *, ptrdiff_t);



extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
build_pure_c_string (const char *str)
{
  return make_pure_c_string (str, strlen (str));
}




extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
build_string (const char *str)
{
  return make_string (str, strlen (str));
}

extern Lisp_Object pure_cons (Lisp_Object, Lisp_Object);
extern void make_byte_code (struct Lisp_Vector *);
extern Lisp_Object Qautomatic_gc;
extern Lisp_Object Qchar_table_extra_slots;
extern struct Lisp_Vector *allocate_vector (EMACS_INT);
extern struct Lisp_Vector *allocate_pseudovector (int, int, enum pvec_type);




extern struct Lisp_Hash_Table *allocate_hash_table (void);
extern struct window *allocate_window (void);
extern struct frame *allocate_frame (void);
extern struct Lisp_Process *allocate_process (void);
extern struct terminal *allocate_terminal (void);
extern _Bool gc_in_progress;
extern _Bool abort_on_gc;
extern Lisp_Object make_float (double);
extern void display_malloc_warning (void);
extern ptrdiff_t inhibit_garbage_collection (void);
extern Lisp_Object make_save_value (void *, ptrdiff_t);
extern Lisp_Object build_overlay (Lisp_Object, Lisp_Object, Lisp_Object);
extern void free_marker (Lisp_Object);
extern void free_cons (struct Lisp_Cons *);
extern void init_alloc_once (void);
extern void init_alloc (void);
extern void syms_of_alloc (void);
extern struct buffer * allocate_buffer (void);
extern int valid_lisp_object_p (Lisp_Object);
# 2990 "lisp.h"
extern Lisp_Object copy_char_table (Lisp_Object);
extern Lisp_Object char_table_ref (Lisp_Object, int);
extern Lisp_Object char_table_ref_and_range (Lisp_Object, int,
                                             int *, int *);
extern void char_table_set (Lisp_Object, int, Lisp_Object);
extern void char_table_set_range (Lisp_Object, int, int, Lisp_Object);
extern int char_table_translate (Lisp_Object, int);
extern void map_char_table (void (*) (Lisp_Object, Lisp_Object,
                            Lisp_Object),
                            Lisp_Object, Lisp_Object, Lisp_Object);
extern void map_char_table_for_charset (void (*c_function) (Lisp_Object, Lisp_Object),
     Lisp_Object, Lisp_Object,
     Lisp_Object, struct charset *,
     unsigned, unsigned);
extern Lisp_Object uniprop_table (Lisp_Object);
extern void syms_of_chartab (void);


extern Lisp_Object Vprin1_to_string_buffer;
extern void debug_print (Lisp_Object) __attribute__((externally_visible));
extern Lisp_Object Qstandard_output;
extern Lisp_Object Qexternal_debugging_output;
extern void temp_output_buffer_setup (const char *);
extern int print_level;
extern Lisp_Object Qprint_escape_newlines;
extern void write_string (const char *, int);
extern void print_error_message (Lisp_Object, Lisp_Object, const char *,
     Lisp_Object);
extern Lisp_Object internal_with_output_to_temp_buffer
        (const char *, Lisp_Object (*) (Lisp_Object), Lisp_Object);
enum FLOAT_TO_STRING_BUFSIZE { FLOAT_TO_STRING_BUFSIZE = 350 };
extern int float_to_string (char *, double);
extern void syms_of_print (void);


extern ptrdiff_t doprnt (char *, ptrdiff_t, const char *, const char *,
    va_list);
extern ptrdiff_t esprintf (char *, char const *, ...)
  __attribute__ ((__format__ (__gnu_printf__, 2, 3)));
extern ptrdiff_t exprintf (char **, ptrdiff_t *, char const *, ptrdiff_t,
      char const *, ...)
  __attribute__ ((__format__ (__gnu_printf__, 5, 6)));
extern ptrdiff_t evxprintf (char **, ptrdiff_t *, char const *, ptrdiff_t,
       char const *, va_list)
  __attribute__ ((__format__ (__gnu_printf__, 5, 0)));


extern Lisp_Object Qvariable_documentation, Qstandard_input;
extern Lisp_Object Qbackquote, Qcomma, Qcomma_at, Qcomma_dot, Qfunction;
extern Lisp_Object Qlexical_binding;
extern Lisp_Object check_obarray (Lisp_Object);
extern Lisp_Object intern_1 (const char *, ptrdiff_t);
extern Lisp_Object intern_c_string_1 (const char *, ptrdiff_t);
extern Lisp_Object oblookup (Lisp_Object, const char *, ptrdiff_t, ptrdiff_t);




extern int openp (Lisp_Object, Lisp_Object, Lisp_Object,
                  Lisp_Object *, Lisp_Object);
extern Lisp_Object string_to_number (char const *, int, _Bool);
extern void map_obarray (Lisp_Object, void (*) (Lisp_Object, Lisp_Object),
                         Lisp_Object);
extern void dir_warning (const char *, Lisp_Object);
extern void close_load_descs (void);
extern void init_obarray (void);
extern void init_lread (void);
extern void syms_of_lread (void);

extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
intern (const char *str)
{
  return intern_1 (str, strlen (str));
}

extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
intern_c_string (const char *str)
{
  return intern_c_string_1 (str, strlen (str));
}


extern Lisp_Object Qautoload, Qexit, Qinteractive, Qcommandp, Qmacro;
extern Lisp_Object Qinhibit_quit, Qinternal_interpreter_environment, Qclosure;
extern Lisp_Object Qand_rest;
extern Lisp_Object Vautoload_queue;
extern Lisp_Object Vsignaling_function;
extern Lisp_Object inhibit_lisp_code;
# 3089 "lisp.h"
extern Lisp_Object Vrun_hooks;
extern void run_hook_with_args_2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object run_hook_with_args (ptrdiff_t nargs, Lisp_Object *args,
           Lisp_Object (*funcall)
           (ptrdiff_t nargs, Lisp_Object *args));
extern __attribute__ ((__noreturn__)) void xsignal (Lisp_Object, Lisp_Object);
extern __attribute__ ((__noreturn__)) void xsignal0 (Lisp_Object);
extern __attribute__ ((__noreturn__)) void xsignal1 (Lisp_Object, Lisp_Object);
extern __attribute__ ((__noreturn__)) void xsignal2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern __attribute__ ((__noreturn__)) void xsignal3 (Lisp_Object, Lisp_Object, Lisp_Object,
    Lisp_Object);
extern __attribute__ ((__noreturn__)) void signal_error (const char *, Lisp_Object);
extern Lisp_Object eval_sub (Lisp_Object form);
extern Lisp_Object apply1 (Lisp_Object, Lisp_Object);
extern Lisp_Object call0 (Lisp_Object);
extern Lisp_Object call1 (Lisp_Object, Lisp_Object);
extern Lisp_Object call2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call3 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call4 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call5 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call6 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object call7 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object internal_catch (Lisp_Object, Lisp_Object (*) (Lisp_Object), Lisp_Object);
extern Lisp_Object internal_lisp_condition_case (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object internal_condition_case (Lisp_Object (*) (void), Lisp_Object, Lisp_Object (*) (Lisp_Object));
extern Lisp_Object internal_condition_case_1 (Lisp_Object (*) (Lisp_Object), Lisp_Object, Lisp_Object, Lisp_Object (*) (Lisp_Object));
extern Lisp_Object internal_condition_case_2 (Lisp_Object (*) (Lisp_Object, Lisp_Object), Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object (*) (Lisp_Object));
extern Lisp_Object internal_condition_case_n
    (Lisp_Object (*) (ptrdiff_t, Lisp_Object *), ptrdiff_t, Lisp_Object *,
     Lisp_Object, Lisp_Object (*) (Lisp_Object, ptrdiff_t, Lisp_Object *));
extern void specbind (Lisp_Object, Lisp_Object);
extern void record_unwind_protect (Lisp_Object (*) (Lisp_Object), Lisp_Object);
extern Lisp_Object unbind_to (ptrdiff_t, Lisp_Object);
extern __attribute__ ((__noreturn__)) void error (const char *, ...) __attribute__ ((__format__ (__gnu_printf__, 1, 2)));
extern __attribute__ ((__noreturn__)) void verror (const char *, va_list)
  __attribute__ ((__format__ (__gnu_printf__, 1, 0)));
extern Lisp_Object un_autoload (Lisp_Object);
extern Lisp_Object call_debugger (Lisp_Object arg);
extern void init_eval_once (void);
extern Lisp_Object safe_call (ptrdiff_t, Lisp_Object, ...);
extern Lisp_Object safe_call1 (Lisp_Object, Lisp_Object);
extern Lisp_Object safe_call2 (Lisp_Object, Lisp_Object, Lisp_Object);
extern void init_eval (void);



extern void syms_of_eval (void);


extern Lisp_Object Qfield;
extern void insert1 (Lisp_Object);
extern Lisp_Object format2 (const char *, Lisp_Object, Lisp_Object);
extern Lisp_Object save_excursion_save (void);
extern Lisp_Object save_restriction_save (void);
extern Lisp_Object save_excursion_restore (Lisp_Object);
extern Lisp_Object save_restriction_restore (Lisp_Object);
extern __attribute__ ((__noreturn__)) void time_overflow (void);
extern Lisp_Object make_buffer_string (ptrdiff_t, ptrdiff_t, _Bool);
extern Lisp_Object make_buffer_string_both (ptrdiff_t, ptrdiff_t, ptrdiff_t,
         ptrdiff_t, _Bool);
extern void init_editfns (void);
extern void syms_of_editfns (void);
extern void set_time_zone_rule (const char *);


extern _Bool mouse_face_overlay_overlaps (Lisp_Object);
extern __attribute__ ((__noreturn__)) void nsberror (Lisp_Object);
extern void adjust_overlays_for_insert (ptrdiff_t, ptrdiff_t);
extern void adjust_overlays_for_delete (ptrdiff_t, ptrdiff_t);
extern void fix_start_end_in_overlays (ptrdiff_t, ptrdiff_t);
extern void report_overlay_modification (Lisp_Object, Lisp_Object, _Bool,
                                         Lisp_Object, Lisp_Object, Lisp_Object);
extern _Bool overlay_touches_p (ptrdiff_t);
extern Lisp_Object Vbuffer_alist;
extern Lisp_Object set_buffer_if_live (Lisp_Object);
extern Lisp_Object other_buffer_safely (Lisp_Object);
extern Lisp_Object Qpriority, Qwindow, Qbefore_string, Qafter_string;
extern Lisp_Object get_truename_buffer (Lisp_Object);
extern void init_buffer_once (void);
extern void init_buffer (void);
extern void syms_of_buffer (void);
extern void keys_of_buffer (void);



extern ptrdiff_t marker_position (Lisp_Object);
extern ptrdiff_t marker_byte_position (Lisp_Object);
extern void clear_charpos_cache (struct buffer *);
extern ptrdiff_t charpos_to_bytepos (ptrdiff_t);
extern ptrdiff_t buf_charpos_to_bytepos (struct buffer *, ptrdiff_t);
extern ptrdiff_t buf_bytepos_to_charpos (struct buffer *, ptrdiff_t);
extern void unchain_marker (struct Lisp_Marker *marker);
extern Lisp_Object set_marker_restricted (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object set_marker_both (Lisp_Object, Lisp_Object, ptrdiff_t, ptrdiff_t);
extern Lisp_Object set_marker_restricted_both (Lisp_Object, Lisp_Object,
                                               ptrdiff_t, ptrdiff_t);
extern Lisp_Object build_marker (struct buffer *, ptrdiff_t, ptrdiff_t);
extern void syms_of_marker (void);



extern Lisp_Object Qfile_error;
extern Lisp_Object Qfile_exists_p;
extern Lisp_Object Qfile_directory_p;
extern Lisp_Object Qinsert_file_contents;
extern Lisp_Object Qfile_name_history;
extern Lisp_Object expand_and_dir_to_file (Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_file_name (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object close_file_unwind (Lisp_Object);
extern Lisp_Object restore_point_unwind (Lisp_Object);
extern __attribute__ ((__noreturn__)) void report_file_error (const char *, Lisp_Object);
extern void internal_delete_file (Lisp_Object);
extern _Bool file_directory_p (const char *);
extern _Bool file_accessible_directory_p (const char *);
extern void syms_of_fileio (void);
extern Lisp_Object make_temp_name (Lisp_Object, _Bool);
extern Lisp_Object Qdelete_file;
extern _Bool check_existing (const char *);


extern void shrink_regexp_cache (void);
extern void restore_search_regs (void);
extern void record_unwind_save_match_data (void);
struct re_registers;
extern struct re_pattern_buffer *compile_pattern (Lisp_Object,
        struct re_registers *,
        Lisp_Object, int, int);
extern ptrdiff_t fast_string_match (Lisp_Object, Lisp_Object);
extern ptrdiff_t fast_c_string_match_ignore_case (Lisp_Object, const char *,
        ptrdiff_t);
extern ptrdiff_t fast_string_match_ignore_case (Lisp_Object, Lisp_Object);
extern ptrdiff_t fast_looking_at (Lisp_Object, ptrdiff_t, ptrdiff_t,
                                  ptrdiff_t, ptrdiff_t, Lisp_Object);
extern ptrdiff_t scan_buffer (int, ptrdiff_t, ptrdiff_t, ptrdiff_t,
         ptrdiff_t *, _Bool);
extern EMACS_INT scan_newline (ptrdiff_t, ptrdiff_t, ptrdiff_t, ptrdiff_t,
          EMACS_INT, _Bool);
extern ptrdiff_t find_next_newline (ptrdiff_t, int);
extern ptrdiff_t find_next_newline_no_quit (ptrdiff_t, ptrdiff_t);
extern ptrdiff_t find_before_next_newline (ptrdiff_t, ptrdiff_t, ptrdiff_t);
extern void syms_of_search (void);
extern void clear_regexp_cache (void);



extern Lisp_Object Qcompletion_ignore_case;
extern Lisp_Object Vminibuffer_list;
extern Lisp_Object last_minibuf_string;
extern Lisp_Object get_minibuffer (EMACS_INT);
extern void init_minibuf_once (void);
extern void syms_of_minibuf (void);



extern Lisp_Object Qminus, Qplus;
extern Lisp_Object Qwhen;
extern Lisp_Object Qcall_interactively, Qmouse_leave_buffer_hook;
extern void syms_of_callint (void);



extern Lisp_Object Qidentity;
extern void syms_of_casefiddle (void);
extern void keys_of_casefiddle (void);



extern void init_casetab_once (void);
extern void syms_of_casetab (void);



extern Lisp_Object echo_message_buffer;
extern struct kboard *echo_kboard;
extern void cancel_echoing (void);
extern Lisp_Object Qdisabled, QCfilter;
extern Lisp_Object Qup, Qdown, Qbottom;
extern Lisp_Object Qtop;
extern Lisp_Object last_undo_boundary;
extern _Bool input_pending;
extern Lisp_Object menu_bar_items (Lisp_Object);
extern Lisp_Object tool_bar_items (Lisp_Object, int *);
extern void discard_mouse_events (void);

void handle_input_available_signal (int);

extern Lisp_Object pending_funcalls;
extern _Bool detect_input_pending (void);
extern _Bool detect_input_pending_ignore_squeezables (void);
extern _Bool detect_input_pending_run_timers (_Bool);
extern void safe_run_hooks (Lisp_Object);
extern void cmd_error_internal (Lisp_Object, const char *);
extern Lisp_Object command_loop_1 (void);
extern Lisp_Object recursive_edit_1 (void);
extern void record_auto_save (void);
extern void force_auto_save_soon (void);
extern void init_keyboard (void);
extern void syms_of_keyboard (void);
extern void keys_of_keyboard (void);


extern ptrdiff_t current_column (void);
extern void invalidate_current_column (void);
extern _Bool indented_beyond_p (ptrdiff_t, ptrdiff_t, EMACS_INT);
extern void syms_of_indent (void);


extern Lisp_Object Qonly, Qnone;
extern Lisp_Object Qvisible;
extern void store_frame_param (struct frame *, Lisp_Object, Lisp_Object);
extern void store_in_alist (Lisp_Object *, Lisp_Object, Lisp_Object);
extern Lisp_Object do_switch_frame (Lisp_Object, int, int, Lisp_Object);



extern void frames_discard_buffer (Lisp_Object);
extern void syms_of_frame (void);


extern char **initial_argv;
extern int initial_argc;

extern _Bool display_arg;

extern Lisp_Object decode_env_path (const char *, const char *);
extern Lisp_Object empty_unibyte_string, empty_multibyte_string;
extern Lisp_Object Qfile_name_handler_alist;
extern __attribute__ ((__noreturn__)) void terminate_due_to_signal (int, int);
extern Lisp_Object Qkill_emacs;




void fixup_locale (void);
void synchronize_system_messages_locale (void);
void synchronize_system_time_locale (void);






extern void shut_down_emacs (int, Lisp_Object);


extern _Bool noninteractive;


extern _Bool no_site_lisp;



extern int daemon_pipe[2];



extern _Bool fatal_error_in_progress;


extern _Bool inhibit_window_system;

extern _Bool running_asynch_code;


extern Lisp_Object QCtype, Qlocal;
extern Lisp_Object Qprocessp;
extern void kill_buffer_processes (Lisp_Object);
extern int wait_reading_process_output (intmax_t, int, int, _Bool,
                                        Lisp_Object,
                                        struct Lisp_Process *,
                                        int);
# 3368 "lisp.h"
extern void add_keyboard_wait_descriptor (int);
extern void delete_keyboard_wait_descriptor (int);

extern void add_gpm_wait_descriptor (int);
extern void delete_gpm_wait_descriptor (int);

extern void close_process_descs (void);
extern void init_process_emacs (void);
extern void syms_of_process (void);
extern void setup_process_coding_systems (Lisp_Object);


 __attribute__ ((__noreturn__))

extern int child_setup (int, int, int, char **, _Bool, Lisp_Object);
extern void init_callproc_1 (void);
extern void init_callproc (void);
extern void set_initial_environment (void);
extern void syms_of_callproc (void);


extern Lisp_Object Qfunction_documentation;
extern Lisp_Object read_doc_string (Lisp_Object);
extern Lisp_Object get_doc_string (Lisp_Object, _Bool, _Bool);
extern void syms_of_doc (void);
extern int read_bytecode_char (_Bool);


extern Lisp_Object Qbytecode;
extern void syms_of_bytecode (void);
extern struct byte_stack *byte_stack_list;



extern void unmark_byte_stack (void);
extern Lisp_Object jit_compile(Lisp_Object);
extern void jit_hotspot_bytecode(Lisp_Object);
extern Lisp_Object exec_byte_code (Lisp_Object, Lisp_Object, Lisp_Object,
       Lisp_Object, ptrdiff_t, Lisp_Object *);


extern Lisp_Object Qexecute_kbd_macro;
extern void init_macros (void);
extern void syms_of_macros (void);


extern Lisp_Object Qapply;
extern Lisp_Object Qinhibit_read_only;
extern void truncate_undo_list (struct buffer *);
extern void record_marker_adjustment (Lisp_Object, ptrdiff_t);
extern void record_insert (ptrdiff_t, ptrdiff_t);
extern void record_delete (ptrdiff_t, Lisp_Object);
extern void record_first_change (void);
extern void record_change (ptrdiff_t, ptrdiff_t);
extern void record_property_change (ptrdiff_t, ptrdiff_t,
        Lisp_Object, Lisp_Object,
                                    Lisp_Object);
extern void syms_of_undo (void);

extern Lisp_Object Qfont, Qmouse_face;
extern Lisp_Object Qinsert_in_front_hooks, Qinsert_behind_hooks;
extern Lisp_Object Qfront_sticky, Qrear_nonsticky;
extern Lisp_Object Qminibuffer_prompt;

extern void report_interval_modification (Lisp_Object, Lisp_Object);


extern void syms_of_menu (void);


extern void syms_of_xmenu (void);


struct tty_display_info;


struct terminal;





extern void stuff_char (char c);
extern void init_foreground_group (void);
extern void init_sigio (int);
extern void sys_subshell (void);
extern void sys_suspend (void);
extern void discard_tty_input (void);
extern void init_sys_modes (struct tty_display_info *);
extern void reset_sys_modes (struct tty_display_info *);
extern void init_all_sys_modes (void);
extern void reset_all_sys_modes (void);
extern void flush_pending_output (int) __attribute__ ((__const__));
extern void child_setup_tty (int);
extern void setup_pty (int);
extern int set_window_size (int, int, int);
extern EMACS_INT get_random (void);
extern void seed_random (void *, ptrdiff_t);
extern void init_random (void);
extern void emacs_backtrace (int);
extern __attribute__ ((__noreturn__)) void emacs_abort (void) __attribute__((noinline));
extern int emacs_open (const char *, int, int);
extern int emacs_close (int);
extern ptrdiff_t emacs_read (int, char *, ptrdiff_t);
extern ptrdiff_t emacs_write (int, const char *, ptrdiff_t);
enum { READLINK_BUFSIZE = 1024 };
extern char *emacs_readlink (const char *, char [READLINK_BUFSIZE]);

extern void unlock_all_files (void);
extern void lock_file (Lisp_Object);
extern void unlock_file (Lisp_Object);
extern void unlock_buffer (struct buffer *);
extern void syms_of_filelock (void);


extern void syms_of_sound (void);


extern void init_category_once (void);
extern Lisp_Object char_category_set (int);
extern void syms_of_category (void);


extern void syms_of_ccl (void);


extern void syms_of_dired (void);
extern Lisp_Object directory_files_internal (Lisp_Object, Lisp_Object,
                                             Lisp_Object, Lisp_Object,
                                             _Bool, Lisp_Object);


extern int *char_ins_del_vector;
extern void syms_of_term (void);
extern __attribute__ ((__noreturn__)) void fatal (const char *msgid, ...)
  __attribute__ ((__format__ (__gnu_printf__, 1, 2)));


extern void syms_of_terminal (void);


extern void syms_of_font (void);
extern void init_font (void);



extern void syms_of_fontset (void);


extern Lisp_Object Qfont_param;



extern Lisp_Object Qdefault, Qtool_bar, Qfringe;
extern Lisp_Object Qheader_line, Qscroll_bar, Qcursor;
extern Lisp_Object Qmode_line_inactive;
extern Lisp_Object Qface;
extern Lisp_Object Qnormal;
extern Lisp_Object QCfamily, QCweight, QCslant;
extern Lisp_Object QCheight, QCname, QCwidth, QCforeground, QCbackground;
extern Lisp_Object Qextra_light, Qlight, Qsemi_light, Qsemi_bold;
extern Lisp_Object Qbold, Qextra_bold, Qultra_bold;
extern Lisp_Object Qoblique, Qitalic;
extern Lisp_Object Vface_alternative_font_family_alist;
extern Lisp_Object Vface_alternative_font_registry_alist;
extern void syms_of_xfaces (void);



extern void syms_of_xfns (void);


extern void syms_of_xsmfns (void);


extern void syms_of_xselect (void);


extern void syms_of_xterm (void);




extern char *x_get_keysym_name (int);




extern void syms_of_xml (void);
extern void xml_cleanup_parser (void);




extern int have_menus_p (void);




void syms_of_dbusbind (void);




extern _Bool profiler_memory_running;
extern void malloc_probe (size_t);
extern void syms_of_profiler (void);
# 3584 "lisp.h"
extern _Bool initialized;


extern _Bool immediate_quit;

extern void *xmalloc (size_t);
extern void *xzalloc (size_t);
extern void *xrealloc (void *, size_t);
extern void xfree (void *);
extern void *xnmalloc (ptrdiff_t, ptrdiff_t);
extern void *xnrealloc (void *, ptrdiff_t, ptrdiff_t);
extern void *xpalloc (void *, ptrdiff_t *, ptrdiff_t, ptrdiff_t, ptrdiff_t);

extern char *xstrdup (const char *);

extern char *egetenv (const char *);


extern void init_system_name (void);
# 3620 "lisp.h"
enum MAX_ALLOCA { MAX_ALLOCA = 16 * 1024 };

extern Lisp_Object safe_alloca_unwind (Lisp_Object);
extern void *record_xmalloc (size_t);
# 3682 "lisp.h"
# 1 "globals.h" 1


struct emacs_globals {
  Lisp_Object f_Vafter_change_functions;

  Lisp_Object f_Vafter_init_time;

  Lisp_Object f_Vafter_insert_file_functions;

  Lisp_Object f_Vafter_load_alist;

  Lisp_Object f_Valternate_fontname_alist;

  Lisp_Object f_Vauto_composition_function;

  Lisp_Object f_Vauto_composition_mode;

  Lisp_Object f_Vauto_fill_chars;

  Lisp_Object f_Vauto_resize_tool_bars;

  Lisp_Object f_Vauto_save_include_big_deletions;

  Lisp_Object f_Vauto_save_list_file_name;

  Lisp_Object f_Vauto_save_timeout;

  Lisp_Object f_Vauto_save_visited_file_name;

  Lisp_Object f_Vbefore_change_functions;

  Lisp_Object f_Vbefore_init_time;

  Lisp_Object f_Vblink_cursor_alist;

  Lisp_Object f_Vbuffer_access_fontified_property;

  Lisp_Object f_Vbuffer_access_fontify_functions;

  Lisp_Object f_Vbuffer_list_update_hook;

  Lisp_Object f_Vbuild_files;

  Lisp_Object f_Vbyte_boolean_vars;

  Lisp_Object f_Vbyte_code_meter;

  Lisp_Object f_Vbytecomp_version_regexp;

  Lisp_Object f_Vchange_major_mode_hook;

  Lisp_Object f_Vchar_code_property_alist;

  Lisp_Object f_Vchar_property_alias_alist;

  Lisp_Object f_Vchar_script_table;

  Lisp_Object f_Vchar_width_table;

  Lisp_Object f_Vcharset_list;

  Lisp_Object f_Vcharset_map_path;

  Lisp_Object f_Vcharset_revision_table;

  Lisp_Object f_Vcode_conversion_map_vector;

  Lisp_Object f_Vcoding_category_list;

  Lisp_Object f_Vcoding_system_alist;

  Lisp_Object f_Vcoding_system_for_read;

  Lisp_Object f_Vcoding_system_for_write;

  Lisp_Object f_Vcoding_system_list;

  Lisp_Object f_Vcombine_after_change_calls;

  Lisp_Object f_Vcommand_debug_status;

  Lisp_Object f_Vcommand_error_function;

  Lisp_Object f_Vcommand_history;

  Lisp_Object f_Vcommand_line_args;

  Lisp_Object f_Vcompletion_ignored_extensions;

  Lisp_Object f_Vcompletion_regexp_list;

  Lisp_Object f_Vcompose_chars_after_function;

  Lisp_Object f_Vcomposition_function_table;

  Lisp_Object f_Vconfigure_info_directory;

  Lisp_Object f_Vcurrent_iso639_language;

  Lisp_Object f_Vcurrent_load_list;

  Lisp_Object f_Vcurrent_prefix_arg;

  Lisp_Object f_Vdata_directory;

  Lisp_Object f_Vdbus_compiled_version;

  Lisp_Object f_Vdbus_debug;

  Lisp_Object f_Vdbus_message_type_error;

  Lisp_Object f_Vdbus_message_type_invalid;

  Lisp_Object f_Vdbus_message_type_method_call;

  Lisp_Object f_Vdbus_message_type_method_return;

  Lisp_Object f_Vdbus_message_type_signal;

  Lisp_Object f_Vdbus_registered_objects_table;

  Lisp_Object f_Vdbus_runtime_version;

  Lisp_Object f_Vdeactivate_mark;

  Lisp_Object f_Vdebug_ignored_errors;

  Lisp_Object f_Vdebug_on_error;

  Lisp_Object f_Vdebug_on_event;

  Lisp_Object f_Vdebug_on_message;

  Lisp_Object f_Vdebug_on_signal;

  Lisp_Object f_Vdebugger;

  Lisp_Object f_Vdefault_file_name_coding_system;

  Lisp_Object f_Vdefault_frame_alist;

  Lisp_Object f_Vdefault_frame_scroll_bars;

  Lisp_Object f_Vdefault_process_coding_system;

  Lisp_Object f_Vdefault_text_properties;

  Lisp_Object f_Vdeferred_action_function;

  Lisp_Object f_Vdeferred_action_list;

  Lisp_Object f_Vdefine_key_rebound_commands;

  Lisp_Object f_Vdelayed_warnings_list;

  Lisp_Object f_Vdelete_frame_functions;

  Lisp_Object f_Vdelete_terminal_functions;

  Lisp_Object f_Vdisable_point_adjustment;

  Lisp_Object f_Vdisplay_pixels_per_inch;

  Lisp_Object f_Vdoc_directory;

  Lisp_Object f_Vdoc_file_name;

  Lisp_Object f_Vdouble_click_time;

  Lisp_Object f_Vdynamic_library_alist;

  Lisp_Object f_Vecho_keystrokes;

  Lisp_Object f_Vemacs_copyright;

  Lisp_Object f_Vemacs_version;

  Lisp_Object f_Vemulation_mode_map_alists;

  Lisp_Object f_Venable_character_translation;

  Lisp_Object f_Venable_disabled_menus_and_buttons;

  Lisp_Object f_Veval_buffer_list;

  Lisp_Object f_Vexec_directory;

  Lisp_Object f_Vexec_path;

  Lisp_Object f_Vexec_suffixes;

  Lisp_Object f_Vexecuting_kbd_macro;

  Lisp_Object f_Vface_default_stipple;

  Lisp_Object f_Vface_font_rescale_alist;

  Lisp_Object f_Vface_ignored_fonts;

  Lisp_Object f_Vface_new_frame_defaults;

  Lisp_Object f_Vface_remapping_alist;

  Lisp_Object f_Vfeatures;

  Lisp_Object f_Vfile_coding_system_alist;

  Lisp_Object f_Vfile_name_coding_system;

  Lisp_Object f_Vfile_name_handler_alist;

  Lisp_Object f_Vfind_word_boundary_function_table;

  Lisp_Object f_Vfirst_change_hook;

  Lisp_Object f_Vfloat_output_format;

  Lisp_Object f_Vfont_ccl_encoder_alist;

  Lisp_Object f_Vfont_encoding_alist;

  Lisp_Object f_Vfont_encoding_charset_alist;

  Lisp_Object f_Vfont_log;

  Lisp_Object f_Vfont_slant_table;

  Lisp_Object f_Vfont_weight_table;

  Lisp_Object f_Vfont_width_table;

  Lisp_Object f_Vfontification_functions;

  Lisp_Object f_Vfontset_alias_alist;

  Lisp_Object f_Vframe_alpha_lower_limit;

  Lisp_Object f_Vframe_title_format;

  Lisp_Object f_Vfringe_bitmaps;

  Lisp_Object f_Vfunction_key_map;

  Lisp_Object f_Vgc_cons_percentage;

  Lisp_Object f_Vgc_elapsed;

  Lisp_Object f_Vglobal_disable_point_adjustment;

  Lisp_Object f_Vglobal_mode_string;

  Lisp_Object f_Vglyph_table;

  Lisp_Object f_Vglyphless_char_display;

  Lisp_Object f_Vgtk_version_string;

  Lisp_Object f_Vhelp_char;

  Lisp_Object f_Vhelp_event_list;

  Lisp_Object f_Vhelp_form;

  Lisp_Object f_Vhistory_add_new_input;

  Lisp_Object f_Vhistory_length;

  Lisp_Object f_Vhourglass_delay;

  Lisp_Object f_Vhscroll_step;

  Lisp_Object f_Vicon_title_format;

  Lisp_Object f_Vignore_relative_composition;

  Lisp_Object f_Vimage_cache_eviction_delay;

  Lisp_Object f_Vimage_types;

  Lisp_Object f_Vinhibit_changing_match_data;

  Lisp_Object f_Vinhibit_debugger;

  Lisp_Object f_Vinhibit_field_text_motion;

  Lisp_Object f_Vinhibit_file_name_handlers;

  Lisp_Object f_Vinhibit_file_name_operation;

  Lisp_Object f_Vinhibit_point_motion_hooks;

  Lisp_Object f_Vinhibit_quit;

  Lisp_Object f_Vinhibit_read_only;

  Lisp_Object f_Vinhibit_redisplay;

  Lisp_Object f_Vinitial_environment;

  Lisp_Object f_Vinitial_window_system;

  Lisp_Object f_Vinput_method_function;

  Lisp_Object f_Vinput_method_previous_message;

  Lisp_Object f_Vinstallation_directory;

  Lisp_Object f_Vinternal_interpreter_environment;

  Lisp_Object f_Vinvocation_directory;

  Lisp_Object f_Vinvocation_name;

  Lisp_Object f_Vkbd_macro_termination_hook;

  Lisp_Object f_Vkey_translation_map;

  Lisp_Object f_Vkill_buffer_query_functions;

  Lisp_Object f_Vkill_emacs_hook;

  Lisp_Object f_Vlast_code_conversion_error;

  Lisp_Object f_Vlast_coding_system_used;

  Lisp_Object f_Vlast_event_frame;

  Lisp_Object f_Vlatin_extra_code_table;

  Lisp_Object f_Vlexical_binding;

  Lisp_Object f_Vline_number_display_limit;

  Lisp_Object f_Vline_prefix;

  Lisp_Object f_Vload_file_name;

  Lisp_Object f_Vload_file_rep_suffixes;

  Lisp_Object f_Vload_history;

  Lisp_Object f_Vload_path;

  Lisp_Object f_Vload_read_function;

  Lisp_Object f_Vload_source_file_function;

  Lisp_Object f_Vload_suffixes;

  Lisp_Object f_Vlocale_coding_system;

  Lisp_Object f_Vlucid_menu_bar_dirty_flag;

  Lisp_Object f_Vmake_pointer_invisible;

  Lisp_Object f_Vmark_even_if_inactive;

  Lisp_Object f_Vmax_image_size;

  Lisp_Object f_Vmax_mini_window_height;

  Lisp_Object f_Vmemory_full;

  Lisp_Object f_Vmemory_signal_data;

  Lisp_Object f_Vmenu_bar_final_items;

  Lisp_Object f_Vmenu_bar_mode;

  Lisp_Object f_Vmenu_bar_update_hook;

  Lisp_Object f_Vmenu_updating_frame;

  Lisp_Object f_Vmessage_log_max;

  Lisp_Object f_Vminibuf_scroll_window;

  Lisp_Object f_Vminibuffer_completing_file_name;

  Lisp_Object f_Vminibuffer_completion_confirm;

  Lisp_Object f_Vminibuffer_completion_predicate;

  Lisp_Object f_Vminibuffer_completion_table;

  Lisp_Object f_Vminibuffer_exit_hook;

  Lisp_Object f_Vminibuffer_help_form;

  Lisp_Object f_Vminibuffer_history_position;

  Lisp_Object f_Vminibuffer_history_variable;

  Lisp_Object f_Vminibuffer_local_map;

  Lisp_Object f_Vminibuffer_local_ns_map;

  Lisp_Object f_Vminibuffer_message_timeout;

  Lisp_Object f_Vminibuffer_prompt_properties;

  Lisp_Object f_Vminibuffer_setup_hook;

  Lisp_Object f_Vminor_mode_map_alist;

  Lisp_Object f_Vminor_mode_overriding_map_alist;

  Lisp_Object f_Vmost_negative_fixnum;

  Lisp_Object f_Vmost_positive_fixnum;

  Lisp_Object f_Vmotif_version_string;

  Lisp_Object f_Vmouse_autoselect_window;

  Lisp_Object f_Vmouse_highlight;

  Lisp_Object f_Vmouse_leave_buffer_hook;

  Lisp_Object f_Vmouse_position_function;

  Lisp_Object f_Vnetwork_coding_system_alist;

  Lisp_Object f_Vnobreak_char_display;

  Lisp_Object f_Vobarray;

  Lisp_Object f_Vold_style_backquotes;

  Lisp_Object f_Voperating_system_release;

  Lisp_Object f_Votf_script_alist;

  Lisp_Object f_Vother_window_scroll_buffer;

  Lisp_Object f_Voverflow_newline_into_fringe;

  Lisp_Object f_Voverlay_arrow_position;

  Lisp_Object f_Voverlay_arrow_string;

  Lisp_Object f_Voverlay_arrow_variable_list;

  Lisp_Object f_Voverriding_local_map;

  Lisp_Object f_Voverriding_local_map_menu_flag;

  Lisp_Object f_Vpath_separator;

  Lisp_Object f_Vpost_command_hook;

  Lisp_Object f_Vpost_gc_hook;

  Lisp_Object f_Vpost_self_insert_hook;

  Lisp_Object f_Vpre_command_hook;

  Lisp_Object f_Vprefix_help_command;

  Lisp_Object f_Vpreloaded_file_list;

  Lisp_Object f_Vprevious_system_messages_locale;

  Lisp_Object f_Vprevious_system_time_locale;

  Lisp_Object f_Vprint_charset_text_property;

  Lisp_Object f_Vprint_circle;

  Lisp_Object f_Vprint_continuous_numbering;

  Lisp_Object f_Vprint_gensym;

  Lisp_Object f_Vprint_length;

  Lisp_Object f_Vprint_level;

  Lisp_Object f_Vprint_number_table;

  Lisp_Object f_Vprintable_chars;

  Lisp_Object f_Vprocess_adaptive_read_buffering;

  Lisp_Object f_Vprocess_coding_system_alist;

  Lisp_Object f_Vprocess_connection_type;

  Lisp_Object f_Vprocess_environment;

  Lisp_Object f_Vpurify_flag;

  Lisp_Object f_Vquit_flag;

  Lisp_Object f_Vread_buffer_function;

  Lisp_Object f_Vread_circle;

  Lisp_Object f_Vread_expression_history;

  Lisp_Object f_Vread_expression_map;

  Lisp_Object f_Vread_symbol_positions_list;

  Lisp_Object f_Vread_with_symbol_positions;

  Lisp_Object f_Vreal_this_command;

  Lisp_Object f_Vrecenter_redisplay;

  Lisp_Object f_Vredisplay_end_trigger_functions;

  Lisp_Object f_Vredisplay_preemption_period;

  Lisp_Object f_Vresize_mini_windows;

  Lisp_Object f_Vresume_tty_functions;

  Lisp_Object f_Vring_bell_function;

  Lisp_Object f_Vsaved_region_selection;

  Lisp_Object f_Vscalable_fonts_allowed;

  Lisp_Object f_Vscript_representative_chars;

  Lisp_Object f_Vscroll_preserve_screen_position;

  Lisp_Object f_Vsearch_spaces_regexp;

  Lisp_Object f_Vselect_active_regions;

  Lisp_Object f_Vselect_safe_coding_system_function;

  Lisp_Object f_Vselection_converter_alist;

  Lisp_Object f_Vselection_inhibit_update_commands;

  Lisp_Object f_Vset_auto_coding_function;

  Lisp_Object f_Vshared_game_score_directory;

  Lisp_Object f_Vshell_file_name;

  Lisp_Object f_Vshow_help_function;

  Lisp_Object f_Vshow_trailing_whitespace;

  Lisp_Object f_Vsignal_hook_function;

  Lisp_Object f_Vsource_directory;

  Lisp_Object f_Vspecial_event_map;

  Lisp_Object f_Vstandard_display_table;

  Lisp_Object f_Vstandard_input;

  Lisp_Object f_Vstandard_output;

  Lisp_Object f_Vstandard_translation_table_for_decode;

  Lisp_Object f_Vstandard_translation_table_for_encode;

  Lisp_Object f_Vsuspend_tty_functions;

  Lisp_Object f_Vsystem_configuration;

  Lisp_Object f_Vsystem_configuration_options;

  Lisp_Object f_Vsystem_messages_locale;

  Lisp_Object f_Vsystem_name;

  Lisp_Object f_Vsystem_time_locale;

  Lisp_Object f_Vsystem_type;

  Lisp_Object f_Vtemp_buffer_show_function;

  Lisp_Object f_Vtemporary_file_directory;

  Lisp_Object f_Vterminal_frame;

  Lisp_Object f_Vtext_property_default_nonsticky;

  Lisp_Object f_Vthis_command;

  Lisp_Object f_Vthis_command_keys_shift_translated;

  Lisp_Object f_Vthis_original_command;

  Lisp_Object f_Vthrow_on_input;

  Lisp_Object f_Vtimer_idle_list;

  Lisp_Object f_Vtimer_list;

  Lisp_Object f_Vtool_bar_border;

  Lisp_Object f_Vtool_bar_button_margin;

  Lisp_Object f_Vtool_bar_mode;

  Lisp_Object f_Vtool_bar_separator_image_expression;

  Lisp_Object f_Vtool_bar_style;

  Lisp_Object f_Vtop_level;

  Lisp_Object f_Vtransient_mark_mode;

  Lisp_Object f_Vtranslation_hash_table_vector;

  Lisp_Object f_Vtranslation_table_for_input;

  Lisp_Object f_Vtranslation_table_vector;

  Lisp_Object f_Vtruncate_partial_width_windows;

  Lisp_Object f_Vtty_defined_color_alist;

  Lisp_Object f_Vtty_erase_char;

  Lisp_Object f_Vundo_outer_limit;

  Lisp_Object f_Vundo_outer_limit_function;

  Lisp_Object f_Vunicode_category_table;

  Lisp_Object f_Vunread_command_events;

  Lisp_Object f_Vunread_input_method_events;

  Lisp_Object f_Vunread_post_input_method_events;

  Lisp_Object f_Vuse_default_ascent;

  Lisp_Object f_Vuser_full_name;

  Lisp_Object f_Vuser_init_file;

  Lisp_Object f_Vuser_login_name;

  Lisp_Object f_Vuser_real_login_name;

  Lisp_Object f_Vvalues;

  Lisp_Object f_Vvertical_centering_font_regexp;

  Lisp_Object f_Vvoid_text_area_pointer;

  Lisp_Object f_Vwhere_is_preferred_modifier;

  Lisp_Object f_Vwindow_combination_limit;

  Lisp_Object f_Vwindow_combination_resize;

  Lisp_Object f_Vwindow_configuration_change_hook;

  Lisp_Object f_Vwindow_persistent_parameters;

  Lisp_Object f_Vwindow_point_insertion_type;

  Lisp_Object f_Vwindow_scroll_functions;

  Lisp_Object f_Vwindow_size_change_functions;

  Lisp_Object f_Vwindow_system_version;

  Lisp_Object f_Vwindow_text_change_functions;

  Lisp_Object f_Vword_combining_categories;

  Lisp_Object f_Vword_separating_categories;

  Lisp_Object f_Vwrap_prefix;

  Lisp_Object f_Vwrite_region_annotate_functions;

  Lisp_Object f_Vwrite_region_annotations_so_far;

  Lisp_Object f_Vwrite_region_post_annotation_function;

  Lisp_Object f_Vx_alt_keysym;

  Lisp_Object f_Vx_bitmap_file_path;

  Lisp_Object f_Vx_cursor_fore_pixel;

  Lisp_Object f_Vx_hourglass_pointer_shape;

  Lisp_Object f_Vx_hyper_keysym;

  Lisp_Object f_Vx_keysym_table;

  Lisp_Object f_Vx_lost_selection_functions;

  Lisp_Object f_Vx_max_tooltip_size;

  Lisp_Object f_Vx_meta_keysym;

  Lisp_Object f_Vx_mode_pointer_shape;

  Lisp_Object f_Vx_no_window_manager;

  Lisp_Object f_Vx_nontext_pointer_shape;

  Lisp_Object f_Vx_pixel_size_width_font_regexp;

  Lisp_Object f_Vx_pointer_shape;

  Lisp_Object f_Vx_resource_class;

  Lisp_Object f_Vx_resource_name;

  Lisp_Object f_Vx_select_enable_clipboard_manager;

  Lisp_Object f_Vx_sensitive_text_pointer_shape;

  Lisp_Object f_Vx_sent_selection_functions;

  Lisp_Object f_Vx_session_id;

  Lisp_Object f_Vx_session_previous_id;

  Lisp_Object f_Vx_super_keysym;

  Lisp_Object f_Vx_toolkit_scroll_bars;

  Lisp_Object f_Vx_window_horizontal_drag_shape;

  Lisp_Object f_Vxft_settings;

  Lisp_Object f_do_mouse_tracking;

  Lisp_Object f_eol_mnemonic_dos;

  Lisp_Object f_eol_mnemonic_mac;

  Lisp_Object f_eol_mnemonic_undecided;

  Lisp_Object f_eol_mnemonic_unix;

  Lisp_Object f_last_command_event;

  Lisp_Object f_last_input_event;

  Lisp_Object f_last_nonmenu_event;

  Lisp_Object f_menu_prompt_more_char;

  Lisp_Object f_meta_prefix_char;

  EMACS_INT f_auto_save_interval;

  EMACS_INT f_baud_rate;

  EMACS_INT f_cons_cells_consed;

  EMACS_INT f_debug_end_pos;

  EMACS_INT f_double_click_fuzz;

  EMACS_INT f_emacs_scroll_step;

  EMACS_INT f_executing_kbd_macro_index;

  EMACS_INT f_extra_keyboard_modifiers;

  EMACS_INT f_floats_consed;

  EMACS_INT f_gc_cons_threshold;

  EMACS_INT f_gcs_done;

  EMACS_INT f_global_gnutls_log_level;

  EMACS_INT f_hscroll_margin;

  EMACS_INT f_imagemagick_render_type;

  EMACS_INT f_intervals_consed;

  EMACS_INT f_line_number_display_limit_width;

  EMACS_INT f_max_lisp_eval_depth;

  EMACS_INT f_max_specpdl_size;

  EMACS_INT f_misc_objects_consed;

  EMACS_INT f_next_screen_context_lines;

  EMACS_INT f_num_input_keys;

  EMACS_INT f_num_nonmacro_input_events;

  EMACS_INT f_overline_margin;

  EMACS_INT f_polling_period;

  EMACS_INT f_profiler_log_size;

  EMACS_INT f_profiler_max_stack_depth;

  EMACS_INT f_pure_bytes_used;

  EMACS_INT f_scroll_conservatively;

  EMACS_INT f_scroll_margin;

  EMACS_INT f_string_chars_consed;

  EMACS_INT f_strings_consed;

  EMACS_INT f_symbols_consed;

  EMACS_INT f_tool_bar_button_relief;

  EMACS_INT f_tool_bar_max_label_size;

  EMACS_INT f_underline_minimum_offset;

  EMACS_INT f_undo_limit;

  EMACS_INT f_undo_strong_limit;

  EMACS_INT f_vector_cells_consed;

  EMACS_INT f_x_selection_timeout;

  _Bool f_auto_raise_tool_bar_buttons_p;

  _Bool f_auto_window_vscroll_p;

  _Bool f_automatic_hscrolling_p;

  _Bool f_byte_metering_on;

  _Bool f_cannot_suspend;

  _Bool f_coding_system_require_warning;

  _Bool f_completion_ignore_case;

  _Bool f_create_lockfiles;

  _Bool f_cross_disabled_images;

  _Bool f_cursor_in_echo_area;

  _Bool f_debug_on_next_call;

  _Bool f_debug_on_quit;

  _Bool f_debugger_may_continue;

  _Bool f_delete_by_moving_to_trash;

  _Bool f_delete_exited_processes;

  _Bool f_display_hourglass_p;

  _Bool f_enable_recursive_minibuffers;

  _Bool f_focus_follows_mouse;

  _Bool f_force_load_messages;

  _Bool f_garbage_collection_messages;

  _Bool f_highlight_nonselected_windows;

  _Bool f_history_delete_duplicates;

  _Bool f_indent_tabs_mode;

  _Bool f_inherit_process_coding_system;

  _Bool f_inhibit_eol_conversion;

  _Bool f_inhibit_eval_during_redisplay;

  _Bool f_inhibit_free_realized_faces;

  _Bool f_inhibit_iso_escape_detection;

  _Bool f_inhibit_load_charset_map;

  _Bool f_inhibit_local_menu_bar_menus;

  _Bool f_inhibit_menubar_update;

  _Bool f_inhibit_modification_hooks;

  _Bool f_inhibit_null_byte_detection;

  _Bool f_inhibit_try_cursor_movement;

  _Bool f_inhibit_try_window_id;

  _Bool f_inhibit_try_window_reusing;

  _Bool f_inhibit_x_resources;

  _Bool f_inverse_video;

  _Bool f_load_convert_to_unibyte;

  _Bool f_load_dangerous_libraries;

  _Bool f_load_force_doc_strings;

  _Bool f_load_in_progress;

  _Bool f_make_cursor_line_fully_visible_p;

  _Bool f_menu_prompting;

  _Bool f_message_truncate_lines;

  _Bool f_minibuffer_allow_text_properties;

  _Bool f_minibuffer_auto_raise;

  _Bool f_mode_line_in_non_selected_windows;

  _Bool f_multibyte_syntax_as_symbol;

  _Bool f_multiple_frames;

  _Bool f_no_redraw_on_reenter;

  _Bool f_noninteractive1;

  _Bool f_open_paren_in_column_0_is_defun_start;

  _Bool f_parse_sexp_ignore_comments;

  _Bool f_parse_sexp_lookup_properties;

  _Bool f_print_escape_multibyte;

  _Bool f_print_escape_newlines;

  _Bool f_print_escape_nonascii;

  _Bool f_print_quoted;

  _Bool f_read_buffer_completion_ignore_case;

  _Bool f_redisplay_dont_pause;

  _Bool f_system_uses_terminfo;

  _Bool f_undo_inhibit_record_point;

  _Bool f_unibyte_display_via_language_environment;

  _Bool f_use_dialog_box;

  _Bool f_use_file_dialog;

  _Bool f_use_system_font;

  _Bool f_visible_bell;

  _Bool f_visible_cursor;

  _Bool f_words_include_escapes;

  _Bool f_write_region_inhibit_fsync;

  _Bool f_x_gtk_file_dialog_help_text;

  _Bool f_x_gtk_show_hidden_files;

  _Bool f_x_gtk_use_old_file_dialog;

  _Bool f_x_gtk_use_system_tooltips;

  _Bool f_x_gtk_whole_detached_tool_bar;

  _Bool f_x_mouse_click_focus_ignore_position;

  _Bool f_x_stretch_cursor_p;

  _Bool f_x_underline_at_descent_line;

  _Bool f_x_use_underline_position_properties;

};
extern struct emacs_globals globals;

__attribute__ ((__noreturn__)) extern Lisp_Object Fabort_recursive_edit (void);
extern Lisp_Object Fabs (Lisp_Object);
extern Lisp_Object Faccept_process_output (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Faccess_file (Lisp_Object, Lisp_Object);
extern Lisp_Object Faccessible_keymaps (Lisp_Object, Lisp_Object);
extern Lisp_Object Facos (Lisp_Object);
extern Lisp_Object Factive_minibuffer_window (void);
extern Lisp_Object Fadd1 (Lisp_Object);
extern Lisp_Object Fadd_name_to_file (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fadd_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fall_completions (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fand (Lisp_Object);
extern Lisp_Object Fappend (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fapply (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fapropos_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Faref (Lisp_Object, Lisp_Object);
extern Lisp_Object Farrayp (Lisp_Object);
extern Lisp_Object Faset (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fash (Lisp_Object, Lisp_Object);
extern Lisp_Object Fasin (Lisp_Object);
extern Lisp_Object Fassoc (Lisp_Object, Lisp_Object);
extern Lisp_Object Fassoc_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fassq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fatan (Lisp_Object, Lisp_Object);
extern Lisp_Object Fatom (Lisp_Object);
extern Lisp_Object Fautoload (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fautoload_do_load (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbacktrace (void);
extern Lisp_Object Fbacktrace_debug (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbacktrace_frame (Lisp_Object);
extern Lisp_Object Fbackward_char (Lisp_Object);
extern Lisp_Object Fbackward_prefix_chars (void);
extern Lisp_Object Fbarf_if_buffer_read_only (void);
extern Lisp_Object Fbase64_decode_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbase64_decode_string (Lisp_Object);
extern Lisp_Object Fbase64_encode_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbase64_encode_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbeginning_of_line (Lisp_Object);
extern Lisp_Object Fbitmap_spec_p (Lisp_Object);
extern Lisp_Object Fbobp (void);
extern Lisp_Object Fbolp (void);
extern Lisp_Object Fbool_vector_p (Lisp_Object);
extern Lisp_Object Fboundp (Lisp_Object);
extern Lisp_Object Fbuffer_base_buffer (Lisp_Object);
extern Lisp_Object Fbuffer_chars_modified_tick (Lisp_Object);
extern Lisp_Object Fbuffer_enable_undo (Lisp_Object);
extern Lisp_Object Fbuffer_file_name (Lisp_Object);
extern Lisp_Object Fbuffer_has_markers_at (Lisp_Object);
extern Lisp_Object Fbuffer_list (Lisp_Object);
extern Lisp_Object Fbuffer_live_p (Lisp_Object);
extern Lisp_Object Fbuffer_local_value (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbuffer_local_variables (Lisp_Object);
extern Lisp_Object Fbuffer_modified_p (Lisp_Object);
extern Lisp_Object Fbuffer_modified_tick (Lisp_Object);
extern Lisp_Object Fbuffer_name (Lisp_Object);
extern Lisp_Object Fbuffer_string (void);
extern Lisp_Object Fbuffer_substring (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbuffer_substring_no_properties (Lisp_Object, Lisp_Object);
extern Lisp_Object Fbuffer_swap_text (Lisp_Object);
extern Lisp_Object Fbufferp (Lisp_Object);
extern Lisp_Object Fbufsize (Lisp_Object);
extern Lisp_Object Fbury_buffer_internal (Lisp_Object);
extern Lisp_Object Fbyte_code (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fbyte_code_function_p (Lisp_Object);
extern Lisp_Object Fbyte_to_position (Lisp_Object);
extern Lisp_Object Fbyte_to_string (Lisp_Object);
extern Lisp_Object Fbyteorder (void);
extern Lisp_Object Fcall_interactively (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcall_last_kbd_macro (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcall_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fcall_process_region (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fcancel_kbd_macro_events (void);
extern Lisp_Object Fcapitalize (Lisp_Object);
extern Lisp_Object Fcapitalize_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcapitalize_word (Lisp_Object);
extern Lisp_Object Fcar (Lisp_Object);
extern Lisp_Object Fcar_less_than_car (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcar_safe (Lisp_Object);
extern Lisp_Object Fcase_table_p (Lisp_Object);
extern Lisp_Object Fcatch (Lisp_Object);
extern Lisp_Object Fcategory_docstring (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcategory_set_mnemonics (Lisp_Object);
extern Lisp_Object Fcategory_table (void);
extern Lisp_Object Fcategory_table_p (Lisp_Object);
extern Lisp_Object Fccl_execute (Lisp_Object, Lisp_Object);
extern Lisp_Object Fccl_execute_on_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fccl_program_p (Lisp_Object);
extern Lisp_Object Fcdr (Lisp_Object);
extern Lisp_Object Fcdr_safe (Lisp_Object);
extern Lisp_Object Fceiling (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_after (Lisp_Object);
extern Lisp_Object Fchar_before (Lisp_Object);
extern Lisp_Object Fchar_category_set (Lisp_Object);
extern Lisp_Object Fchar_charset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_equal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_or_string_p (Lisp_Object);
extern Lisp_Object Fchar_resolve_modifiers (Lisp_Object);
extern Lisp_Object Fchar_syntax (Lisp_Object);
extern Lisp_Object Fchar_table_extra_slot (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_table_p (Lisp_Object);
extern Lisp_Object Fchar_table_parent (Lisp_Object);
extern Lisp_Object Fchar_table_range (Lisp_Object, Lisp_Object);
extern Lisp_Object Fchar_table_subtype (Lisp_Object);
extern Lisp_Object Fchar_to_string (Lisp_Object);
extern Lisp_Object Fchar_width (Lisp_Object);
extern Lisp_Object Fcharacterp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcharset_after (Lisp_Object);
extern Lisp_Object Fcharset_id_internal (Lisp_Object);
extern Lisp_Object Fcharset_plist (Lisp_Object);
extern Lisp_Object Fcharset_priority_list (Lisp_Object);
extern Lisp_Object Fcharsetp (Lisp_Object);
extern Lisp_Object Fcheck_coding_system (Lisp_Object);
extern Lisp_Object Fcheck_coding_systems_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fclear_buffer_auto_save_failure (void);
extern Lisp_Object Fclear_charset_maps (void);
extern Lisp_Object Fclear_face_cache (Lisp_Object);
extern Lisp_Object Fclear_font_cache (void);
extern Lisp_Object Fclear_image_cache (Lisp_Object);
extern Lisp_Object Fclear_string (Lisp_Object);
extern Lisp_Object Fclear_this_command_keys (Lisp_Object);
extern Lisp_Object Fclear_visited_file_modtime (void);
extern Lisp_Object Fclose_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Fclrhash (Lisp_Object);
extern Lisp_Object Fcoding_system_aliases (Lisp_Object);
extern Lisp_Object Fcoding_system_base (Lisp_Object);
extern Lisp_Object Fcoding_system_eol_type (Lisp_Object);
extern Lisp_Object Fcoding_system_p (Lisp_Object);
extern Lisp_Object Fcoding_system_plist (Lisp_Object);
extern Lisp_Object Fcoding_system_priority_list (Lisp_Object);
extern Lisp_Object Fcoding_system_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcolor_distance (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcolor_gray_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcolor_supported_p (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcombine_after_change_execute (void);
extern Lisp_Object Fcommand_execute (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcommand_remapping (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcommandp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompare_buffer_substrings (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompare_strings (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompare_window_configurations (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompleting_read (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompose_region_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompose_string_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcomposition_get_gstring (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcompute_motion (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fconcat (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fcond (Lisp_Object);
extern Lisp_Object Fcondition_case (Lisp_Object);
extern Lisp_Object Fcons (Lisp_Object, Lisp_Object);
extern Lisp_Object Fconsp (Lisp_Object);
extern Lisp_Object Fconstrain_to_field (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcontinue_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcontrolling_tty_p (Lisp_Object);
extern Lisp_Object Fcoordinates_in_window_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcopy_alist (Lisp_Object);
extern Lisp_Object Fcopy_category_table (Lisp_Object);
extern Lisp_Object Fcopy_file (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fcopy_hash_table (Lisp_Object);
extern Lisp_Object Fcopy_keymap (Lisp_Object);
extern Lisp_Object Fcopy_marker (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcopy_sequence (Lisp_Object);
extern Lisp_Object Fcopy_syntax_table (Lisp_Object);
extern Lisp_Object Fcopysign (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcos (Lisp_Object);
extern Lisp_Object Fcurrent_active_maps (Lisp_Object, Lisp_Object);
extern Lisp_Object Fcurrent_bidi_paragraph_direction (Lisp_Object);
extern Lisp_Object Fcurrent_buffer (void);
extern Lisp_Object Fcurrent_case_table (void);
extern Lisp_Object Fcurrent_column (void);
extern Lisp_Object Fcurrent_global_map (void);
extern Lisp_Object Fcurrent_idle_time (void);
extern Lisp_Object Fcurrent_indentation (void);
extern Lisp_Object Fcurrent_input_mode (void);
extern Lisp_Object Fcurrent_local_map (void);
extern Lisp_Object Fcurrent_message (void);
extern Lisp_Object Fcurrent_minor_mode_maps (void);
extern Lisp_Object Fcurrent_time (void);
extern Lisp_Object Fcurrent_time_string (Lisp_Object);
extern Lisp_Object Fcurrent_time_zone (Lisp_Object);
extern Lisp_Object Fcurrent_window_configuration (Lisp_Object);
extern Lisp_Object Fdaemon_initialized (void);
extern Lisp_Object Fdaemonp (void);
extern Lisp_Object Fdbus_get_unique_name (Lisp_Object);
extern Lisp_Object Fdbus_init_bus (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdbus_message_internal (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fdeclare_equiv_charset (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_big5_char (Lisp_Object);
extern Lisp_Object Fdecode_char (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_coding_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_coding_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdecode_sjis_char (Lisp_Object);
extern Lisp_Object Fdecode_time (Lisp_Object);
extern Lisp_Object Fdefalias (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefault_boundp (Lisp_Object);
extern Lisp_Object Fdefault_file_modes (void);
extern Lisp_Object Fdefault_value (Lisp_Object);
extern Lisp_Object Fdefconst (Lisp_Object);
extern Lisp_Object Fdefine_category (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_charset_alias (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_charset_internal (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fdefine_coding_system_alias (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_coding_system_internal (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fdefine_fringe_bitmap (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_hash_table_test (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_key (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefine_prefix_command (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdefvar (Lisp_Object);
extern Lisp_Object Fdefvaralias (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_all_overlays (Lisp_Object);
extern Lisp_Object Fdelete_and_extract_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_directory_internal (Lisp_Object);
extern Lisp_Object Fdelete_field (Lisp_Object);
extern Lisp_Object Fdelete_file (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_other_windows_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_overlay (Lisp_Object);
extern Lisp_Object Fdelete_process (Lisp_Object);
extern Lisp_Object Fdelete_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_terminal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdelete_window_internal (Lisp_Object);
extern Lisp_Object Fdelq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdescribe_buffer_bindings (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdescribe_vector (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdestroy_fringe_bitmap (Lisp_Object);
extern Lisp_Object Fdetect_coding_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdetect_coding_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fding (Lisp_Object);
extern Lisp_Object Fdirectory_file_name (Lisp_Object);
extern Lisp_Object Fdirectory_files (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdirectory_files_and_attributes (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdiscard_input (void);
extern Lisp_Object Fdisplay_supports_face_attributes_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdo_auto_save (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdocumentation (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdocumentation_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fdowncase (Lisp_Object);
extern Lisp_Object Fdowncase_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdowncase_word (Lisp_Object);
extern Lisp_Object Fdraw_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdump_colors (void);
extern Lisp_Object Fdump_emacs (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdump_face (Lisp_Object);
extern Lisp_Object Fdump_frame_glyph_matrix (void);
extern Lisp_Object Fdump_glyph_matrix (Lisp_Object);
extern Lisp_Object Fdump_glyph_row (Lisp_Object, Lisp_Object);
extern Lisp_Object Fdump_redisplay_history (void);
extern Lisp_Object Fdump_tool_bar_row (Lisp_Object, Lisp_Object);
extern Lisp_Object Felt (Lisp_Object, Lisp_Object);
extern Lisp_Object Femacs_pid (void);
extern Lisp_Object Fencode_big5_char (Lisp_Object);
extern Lisp_Object Fencode_char (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fencode_coding_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fencode_coding_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fencode_sjis_char (Lisp_Object);
extern Lisp_Object Fencode_time (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fend_kbd_macro (Lisp_Object, Lisp_Object);
extern Lisp_Object Fend_of_line (Lisp_Object);
extern Lisp_Object Feobp (void);
extern Lisp_Object Feolp (void);
extern Lisp_Object Feq (Lisp_Object, Lisp_Object);
extern Lisp_Object Feql (Lisp_Object, Lisp_Object);
extern Lisp_Object Feqlsign (Lisp_Object, Lisp_Object);
extern Lisp_Object Fequal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fequal_including_properties (Lisp_Object, Lisp_Object);
extern Lisp_Object Ferase_buffer (void);
extern Lisp_Object Ferror_message_string (Lisp_Object);
extern Lisp_Object Feval (Lisp_Object, Lisp_Object);
extern Lisp_Object Feval_buffer (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Feval_minibuffer (Lisp_Object, Lisp_Object);
extern Lisp_Object Feval_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fevent_convert_list (Lisp_Object);
extern Lisp_Object Fevent_symbol_parse_modifiers (Lisp_Object);
extern Lisp_Object Fexecute_kbd_macro (Lisp_Object, Lisp_Object, Lisp_Object);
__attribute__ ((__noreturn__)) extern Lisp_Object Fexit_recursive_edit (void);
extern Lisp_Object Fexp (Lisp_Object);
extern Lisp_Object Fexpand_file_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Fexpt (Lisp_Object, Lisp_Object);
extern Lisp_Object Fexternal_debugging_output (Lisp_Object);
extern Lisp_Object Fface_attribute_relative_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fface_attributes_as_vector (Lisp_Object);
extern Lisp_Object Fface_font (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffboundp (Lisp_Object);
extern Lisp_Object Ffceiling (Lisp_Object);
extern Lisp_Object Ffeaturep (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffetch_bytecode (Lisp_Object);
extern Lisp_Object Fffloor (Lisp_Object);
extern Lisp_Object Ffield_beginning (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffield_end (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffield_string (Lisp_Object);
extern Lisp_Object Ffield_string_no_properties (Lisp_Object);
extern Lisp_Object Ffile_accessible_directory_p (Lisp_Object);
extern Lisp_Object Ffile_attributes (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_attributes_lessp (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_directory_p (Lisp_Object);
extern Lisp_Object Ffile_executable_p (Lisp_Object);
extern Lisp_Object Ffile_exists_p (Lisp_Object);
extern Lisp_Object Ffile_locked_p (Lisp_Object);
extern Lisp_Object Ffile_modes (Lisp_Object);
extern Lisp_Object Ffile_name_absolute_p (Lisp_Object);
extern Lisp_Object Ffile_name_all_completions (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_name_as_directory (Lisp_Object);
extern Lisp_Object Ffile_name_completion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_name_directory (Lisp_Object);
extern Lisp_Object Ffile_name_nondirectory (Lisp_Object);
extern Lisp_Object Ffile_newer_than_file_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffile_readable_p (Lisp_Object);
extern Lisp_Object Ffile_regular_p (Lisp_Object);
extern Lisp_Object Ffile_selinux_context (Lisp_Object);
extern Lisp_Object Ffile_symlink_p (Lisp_Object);
extern Lisp_Object Ffile_writable_p (Lisp_Object);
extern Lisp_Object Ffillarray (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_charset_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_charset_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_coding_systems_region_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_composition_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_file_name_handler (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffind_operation_coding_system (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffloat (Lisp_Object);
extern Lisp_Object Ffloat_time (Lisp_Object);
extern Lisp_Object Ffloatp (Lisp_Object);
extern Lisp_Object Ffloor (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffmakunbound (Lisp_Object);
extern Lisp_Object Ffollowing_char (void);
extern Lisp_Object Ffont_at (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_drive_otf (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_face_attributes (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_family_list (Lisp_Object);
extern Lisp_Object Ffont_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_get_glyphs (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_get_system_font (void);
extern Lisp_Object Ffont_get_system_normal_font (void);
extern Lisp_Object Ffont_info (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_match_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_otf_alternates (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_shape_gstring (Lisp_Object);
extern Lisp_Object Ffont_spec (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffont_variation_glyphs (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffont_xlfd_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontp (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontset_font (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontset_info (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffontset_list (void);
extern Lisp_Object Ffontset_list_all (void);
extern Lisp_Object Fforce_window_update (Lisp_Object);
extern Lisp_Object Fformat (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fformat_mode_line (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fformat_network_address (Lisp_Object, Lisp_Object);
extern Lisp_Object Fformat_time_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fforward_char (Lisp_Object);
extern Lisp_Object Fforward_comment (Lisp_Object);
extern Lisp_Object Fforward_line (Lisp_Object);
extern Lisp_Object Fforward_point (Lisp_Object);
extern Lisp_Object Fforward_word (Lisp_Object);
extern Lisp_Object Fframe_char_height (Lisp_Object);
extern Lisp_Object Fframe_char_width (Lisp_Object);
extern Lisp_Object Fframe_face_alist (Lisp_Object);
extern Lisp_Object Fframe_first_window (Lisp_Object);
extern Lisp_Object Fframe_focus (Lisp_Object);
extern Lisp_Object Fframe_list (void);
extern Lisp_Object Fframe_live_p (Lisp_Object);
extern Lisp_Object Fframe_or_buffer_changed_p (Lisp_Object);
extern Lisp_Object Fframe_parameter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fframe_parameters (Lisp_Object);
extern Lisp_Object Fframe_pixel_height (Lisp_Object);
extern Lisp_Object Fframe_pixel_width (Lisp_Object);
extern Lisp_Object Fframe_pointer_visible_p (Lisp_Object);
extern Lisp_Object Fframe_root_window (Lisp_Object);
extern Lisp_Object Fframe_selected_window (Lisp_Object);
extern Lisp_Object Fframe_terminal (Lisp_Object);
extern Lisp_Object Fframe_visible_p (Lisp_Object);
extern Lisp_Object Fframep (Lisp_Object);
extern Lisp_Object Ffrexp (Lisp_Object);
extern Lisp_Object Ffringe_bitmaps_at_pos (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffround (Lisp_Object);
extern Lisp_Object Ffset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fftruncate (Lisp_Object);
extern Lisp_Object Ffuncall (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ffunction (Lisp_Object);
extern Lisp_Object Ffunction_equal (Lisp_Object, Lisp_Object);
extern Lisp_Object Ffunctionp (Lisp_Object);
extern Lisp_Object Fgap_position (void);
extern Lisp_Object Fgap_size (void);
extern Lisp_Object Fgarbage_collect (void);
extern Lisp_Object Fgc_status (void);
extern Lisp_Object Fgenerate_new_buffer_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgeq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_buffer (Lisp_Object);
extern Lisp_Object Fget_buffer_create (Lisp_Object);
extern Lisp_Object Fget_buffer_process (Lisp_Object);
extern Lisp_Object Fget_buffer_window (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_byte (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_char_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_char_property_and_overlay (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_file_buffer (Lisp_Object);
extern Lisp_Object Fget_file_char (void);
extern Lisp_Object Fget_internal_run_time (void);
extern Lisp_Object Fget_load_suffixes (void);
extern Lisp_Object Fget_process (Lisp_Object);
extern Lisp_Object Fget_text_property (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_unicode_property_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fget_unused_category (Lisp_Object);
extern Lisp_Object Fget_unused_iso_final_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgetenv_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgethash (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fglobal_key_binding (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_available_p (void);
extern Lisp_Object Fgnutls_boot (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_bye (Lisp_Object, Lisp_Object);
extern Lisp_Object Fgnutls_deinit (Lisp_Object);
extern Lisp_Object Fgnutls_error_fatalp (Lisp_Object);
extern Lisp_Object Fgnutls_error_string (Lisp_Object);
extern Lisp_Object Fgnutls_errorp (Lisp_Object);
extern Lisp_Object Fgnutls_get_initstage (Lisp_Object);
extern Lisp_Object Fgoto_char (Lisp_Object);
extern Lisp_Object Fgpm_mouse_start (void);
extern Lisp_Object Fgpm_mouse_stop (void);
extern Lisp_Object Fgtr (Lisp_Object, Lisp_Object);
extern Lisp_Object Fhandle_save_session (Lisp_Object);
extern Lisp_Object Fhandle_switch_frame (Lisp_Object);
extern Lisp_Object Fhash_table_count (Lisp_Object);
extern Lisp_Object Fhash_table_p (Lisp_Object);
extern Lisp_Object Fhash_table_rehash_size (Lisp_Object);
extern Lisp_Object Fhash_table_rehash_threshold (Lisp_Object);
extern Lisp_Object Fhash_table_size (Lisp_Object);
extern Lisp_Object Fhash_table_test (Lisp_Object);
extern Lisp_Object Fhash_table_weakness (Lisp_Object);
extern Lisp_Object Ficonify_frame (Lisp_Object);
extern Lisp_Object Fidentity (Lisp_Object);
extern Lisp_Object Fif (Lisp_Object);
extern Lisp_Object Fimage_flush (Lisp_Object, Lisp_Object);
extern Lisp_Object Fimage_mask_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fimage_metadata (Lisp_Object, Lisp_Object);
extern Lisp_Object Fimage_size (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fimagemagick_types (void);
extern Lisp_Object Fimagep (Lisp_Object);
extern Lisp_Object Findent_to (Lisp_Object, Lisp_Object);
extern Lisp_Object Findirect_function (Lisp_Object, Lisp_Object);
extern Lisp_Object Findirect_variable (Lisp_Object);
extern Lisp_Object Finit_image_library (Lisp_Object);
extern Lisp_Object Finput_pending_p (void);
extern Lisp_Object Finsert (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_and_inherit (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_and_inherit_before_markers (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_before_markers (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Finsert_buffer_substring (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finsert_byte (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finsert_char (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finsert_file_contents (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finteger_or_marker_p (Lisp_Object);
extern Lisp_Object Fintegerp (Lisp_Object);
extern Lisp_Object Finteractive (Lisp_Object);
extern Lisp_Object Finteractive_form (Lisp_Object);
extern Lisp_Object Fintern (Lisp_Object, Lisp_Object);
extern Lisp_Object Fintern_soft (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_char_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_complete_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_copy_lisp_face (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_describe_syntax_value (Lisp_Object);
extern Lisp_Object Finternal_face_x_get_resource (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_get_lisp_face_attribute (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_lisp_face_attribute_values (Lisp_Object);
extern Lisp_Object Finternal_lisp_face_empty_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_lisp_face_equal_p (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_lisp_face_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_make_lisp_face (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_merge_in_global_face (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_set_alternative_font_family_alist (Lisp_Object);
extern Lisp_Object Finternal_set_alternative_font_registry_alist (Lisp_Object);
extern Lisp_Object Finternal_set_font_selection_order (Lisp_Object);
extern Lisp_Object Finternal_set_lisp_face_attribute (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_set_lisp_face_attribute_from_resource (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_show_cursor (Lisp_Object, Lisp_Object);
extern Lisp_Object Finternal_show_cursor_p (Lisp_Object);
extern Lisp_Object Finterrupt_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Finvisible_p (Lisp_Object);
extern Lisp_Object Finvocation_directory (void);
extern Lisp_Object Finvocation_name (void);
extern Lisp_Object Fisnan (Lisp_Object);
extern Lisp_Object Fiso_charset (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fkey_binding (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fkey_description (Lisp_Object, Lisp_Object);
extern Lisp_Object Fkeyboard_coding_system (Lisp_Object);
extern Lisp_Object Fkeymap_parent (Lisp_Object);
extern Lisp_Object Fkeymap_prompt (Lisp_Object);
extern Lisp_Object Fkeymapp (Lisp_Object);
extern Lisp_Object Fkeywordp (Lisp_Object);
extern Lisp_Object Fkill_all_local_variables (void);
extern Lisp_Object Fkill_buffer (Lisp_Object);
__attribute__ ((__noreturn__)) extern Lisp_Object Fkill_emacs (Lisp_Object);
extern Lisp_Object Fkill_local_variable (Lisp_Object);
extern Lisp_Object Fkill_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Flast_nonminibuf_frame (void);
extern Lisp_Object Flax_plist_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Flax_plist_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fldexp (Lisp_Object, Lisp_Object);
extern Lisp_Object Flength (Lisp_Object);
extern Lisp_Object Fleq (Lisp_Object, Lisp_Object);
extern Lisp_Object Flet (Lisp_Object);
extern Lisp_Object FletX (Lisp_Object);
extern Lisp_Object Flibxml_parse_html_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flibxml_parse_xml_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fline_beginning_position (Lisp_Object);
extern Lisp_Object Fline_end_position (Lisp_Object);
extern Lisp_Object Flist (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flist_fonts (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flist_system_processes (void);
extern Lisp_Object Flistp (Lisp_Object);
extern Lisp_Object Fload (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fload_average (Lisp_Object);
extern Lisp_Object Flocal_key_binding (Lisp_Object, Lisp_Object);
extern Lisp_Object Flocal_variable_if_set_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Flocal_variable_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Flocale_info (Lisp_Object);
extern Lisp_Object Flocate_file_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flock_buffer (Lisp_Object);
extern Lisp_Object Flog (Lisp_Object, Lisp_Object);
extern Lisp_Object Flog10 (Lisp_Object);
extern Lisp_Object Flogand (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flogb (Lisp_Object);
extern Lisp_Object Flogior (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flognot (Lisp_Object);
extern Lisp_Object Flogxor (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Flooking_at (Lisp_Object);
extern Lisp_Object Flookup_image (Lisp_Object);
extern Lisp_Object Flookup_image_map (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flookup_key (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Flower_frame (Lisp_Object);
extern Lisp_Object Flsh (Lisp_Object, Lisp_Object);
extern Lisp_Object Flss (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmacroexpand (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_bool_vector (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_byte_code (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_category_set (Lisp_Object);
extern Lisp_Object Fmake_category_table (void);
extern Lisp_Object Fmake_char (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_char_table (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_directory_internal (Lisp_Object);
extern Lisp_Object Fmake_frame_invisible (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_frame_visible (Lisp_Object);
extern Lisp_Object Fmake_hash_table (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_indirect_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_keymap (Lisp_Object);
extern Lisp_Object Fmake_list (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_local_variable (Lisp_Object);
extern Lisp_Object Fmake_marker (void);
extern Lisp_Object Fmake_network_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_overlay (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_serial_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmake_sparse_keymap (Lisp_Object);
extern Lisp_Object Fmake_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_symbol (Lisp_Object);
extern Lisp_Object Fmake_symbolic_link (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmake_temp_name (Lisp_Object);
extern Lisp_Object Fmake_terminal_frame (Lisp_Object);
extern Lisp_Object Fmake_var_non_special (Lisp_Object);
extern Lisp_Object Fmake_variable_buffer_local (Lisp_Object);
extern Lisp_Object Fmake_variable_frame_local (Lisp_Object);
extern Lisp_Object Fmake_vector (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmakunbound (Lisp_Object);
extern Lisp_Object Fmap_char_table (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmap_charset_chars (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmap_keymap (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmap_keymap_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapatoms (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapc (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapcar (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmapconcat (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmaphash (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmark_marker (void);
extern Lisp_Object Fmarker_buffer (Lisp_Object);
extern Lisp_Object Fmarker_insertion_type (Lisp_Object);
extern Lisp_Object Fmarker_position (Lisp_Object);
extern Lisp_Object Fmarkerp (Lisp_Object);
extern Lisp_Object Fmatch_beginning (Lisp_Object);
extern Lisp_Object Fmatch_data (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmatch_end (Lisp_Object);
extern Lisp_Object Fmatching_paren (Lisp_Object);
extern Lisp_Object Fmax (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmax_char (void);
extern Lisp_Object Fmd5 (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmember (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmemory_limit (void);
extern Lisp_Object Fmemory_use_counts (void);
extern Lisp_Object Fmemq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmemql (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmenu_or_popup_active_p (void);
extern Lisp_Object Fmerge_face_attribute (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmessage (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmessage_box (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmessage_or_box (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmin (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fminibuffer_completion_contents (void);
extern Lisp_Object Fminibuffer_contents (void);
extern Lisp_Object Fminibuffer_contents_no_properties (void);
extern Lisp_Object Fminibuffer_depth (void);
extern Lisp_Object Fminibuffer_prompt (void);
extern Lisp_Object Fminibuffer_prompt_end (void);
extern Lisp_Object Fminibuffer_selected_window (void);
extern Lisp_Object Fminibuffer_window (Lisp_Object);
extern Lisp_Object Fminibufferp (Lisp_Object);
extern Lisp_Object Fminor_mode_key_binding (Lisp_Object, Lisp_Object);
extern Lisp_Object Fminus (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fmod (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodify_category_entry (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodify_frame_parameters (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmodify_syntax_entry (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmouse_pixel_position (void);
extern Lisp_Object Fmouse_position (void);
extern Lisp_Object Fmove_overlay (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fmove_to_column (Lisp_Object, Lisp_Object);
extern Lisp_Object Fmove_to_window_line (Lisp_Object);
extern Lisp_Object Fmultibyte_char_to_unibyte (Lisp_Object);
extern Lisp_Object Fmultibyte_string_p (Lisp_Object);
extern Lisp_Object Fnarrow_to_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnatnump (Lisp_Object);
extern Lisp_Object Fnconc (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fneq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnetwork_interface_info (Lisp_Object);
extern Lisp_Object Fnetwork_interface_list (void);
extern Lisp_Object Fnew_fontset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_char_property_change (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_overlay_change (Lisp_Object);
extern Lisp_Object Fnext_property_change (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_read_file_uses_dialog_p (void);
extern Lisp_Object Fnext_single_char_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_single_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnext_window (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fnlistp (Lisp_Object);
extern Lisp_Object Fnreverse (Lisp_Object);
extern Lisp_Object Fnth (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnthcdr (Lisp_Object, Lisp_Object);
extern Lisp_Object Fnull (Lisp_Object);
extern Lisp_Object Fnumber_or_marker_p (Lisp_Object);
extern Lisp_Object Fnumber_to_string (Lisp_Object);
extern Lisp_Object Fnumberp (Lisp_Object);
extern Lisp_Object Fopen_dribble_file (Lisp_Object);
extern Lisp_Object Fopen_font (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fopen_termscript (Lisp_Object);
extern Lisp_Object Foptimize_char_table (Lisp_Object, Lisp_Object);
extern Lisp_Object For (Lisp_Object);
extern Lisp_Object Fother_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fother_window_for_scrolling (void);
extern Lisp_Object Foverlay_buffer (Lisp_Object);
extern Lisp_Object Foverlay_end (Lisp_Object);
extern Lisp_Object Foverlay_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Foverlay_lists (void);
extern Lisp_Object Foverlay_properties (Lisp_Object);
extern Lisp_Object Foverlay_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Foverlay_recenter (Lisp_Object);
extern Lisp_Object Foverlay_start (Lisp_Object);
extern Lisp_Object Foverlayp (Lisp_Object);
extern Lisp_Object Foverlays_at (Lisp_Object);
extern Lisp_Object Foverlays_in (Lisp_Object, Lisp_Object);
extern Lisp_Object Fparse_partial_sexp (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fplay_sound_internal (Lisp_Object);
extern Lisp_Object Fplist_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Fplist_member (Lisp_Object, Lisp_Object);
extern Lisp_Object Fplist_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fplus (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fpoint (void);
extern Lisp_Object Fpoint_marker (void);
extern Lisp_Object Fpoint_max (void);
extern Lisp_Object Fpoint_max_marker (void);
extern Lisp_Object Fpoint_min (void);
extern Lisp_Object Fpoint_min_marker (void);
extern Lisp_Object Fpos_visible_in_window_p (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposition_bytes (Lisp_Object);
extern Lisp_Object Fposix_looking_at (Lisp_Object);
extern Lisp_Object Fposix_search_backward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposix_search_forward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposix_string_match (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fposn_at_point (Lisp_Object, Lisp_Object);
extern Lisp_Object Fposn_at_x_y (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprefix_numeric_value (Lisp_Object);
extern Lisp_Object Fprevious_char (void);
extern Lisp_Object Fprevious_char_property_change (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_overlay_change (Lisp_Object);
extern Lisp_Object Fprevious_property_change (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_single_char_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_single_property_change (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprevious_window (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprimitive_undo (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprin1 (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprin1_to_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprinc (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprint (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_attributes (Lisp_Object);
extern Lisp_Object Fprocess_buffer (Lisp_Object);
extern Lisp_Object Fprocess_coding_system (Lisp_Object);
extern Lisp_Object Fprocess_command (Lisp_Object);
extern Lisp_Object Fprocess_connection (Lisp_Object);
extern Lisp_Object Fprocess_contact (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_datagram_address (Lisp_Object);
extern Lisp_Object Fprocess_exit_status (Lisp_Object);
extern Lisp_Object Fprocess_filter (Lisp_Object);
extern Lisp_Object Fprocess_filter_multibyte_p (Lisp_Object);
extern Lisp_Object Fprocess_id (Lisp_Object);
extern Lisp_Object Fprocess_inherit_coding_system_flag (Lisp_Object);
extern Lisp_Object Fprocess_list (void);
extern Lisp_Object Fprocess_mark (Lisp_Object);
extern Lisp_Object Fprocess_name (Lisp_Object);
extern Lisp_Object Fprocess_plist (Lisp_Object);
extern Lisp_Object Fprocess_query_on_exit_flag (Lisp_Object);
extern Lisp_Object Fprocess_running_child_p (Lisp_Object);
extern Lisp_Object Fprocess_send_eof (Lisp_Object);
extern Lisp_Object Fprocess_send_region (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_send_string (Lisp_Object, Lisp_Object);
extern Lisp_Object Fprocess_sentinel (Lisp_Object);
extern Lisp_Object Fprocess_status (Lisp_Object);
extern Lisp_Object Fprocess_tty_name (Lisp_Object);
extern Lisp_Object Fprocess_type (Lisp_Object);
extern Lisp_Object Fprocessp (Lisp_Object);
extern Lisp_Object Fprofiler_cpu_log (void);
extern Lisp_Object Fprofiler_cpu_running_p (void);
extern Lisp_Object Fprofiler_cpu_start (Lisp_Object);
extern Lisp_Object Fprofiler_cpu_stop (void);
extern Lisp_Object Fprofiler_memory_log (void);
extern Lisp_Object Fprofiler_memory_running_p (void);
extern Lisp_Object Fprofiler_memory_start (void);
extern Lisp_Object Fprofiler_memory_stop (void);
extern Lisp_Object Fprog1 (Lisp_Object);
extern Lisp_Object Fprog2 (Lisp_Object);
extern Lisp_Object Fprogn (Lisp_Object);
extern Lisp_Object Fpropertize (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fprovide (Lisp_Object, Lisp_Object);
extern Lisp_Object Fpurecopy (Lisp_Object);
extern Lisp_Object Fput (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fput_text_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fput_unicode_property_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fputhash (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fquery_font (Lisp_Object);
extern Lisp_Object Fquery_fontset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fquit_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fquo (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fquote (Lisp_Object);
extern Lisp_Object Fraise_frame (Lisp_Object);
extern Lisp_Object Frandom (Lisp_Object);
extern Lisp_Object Frassoc (Lisp_Object, Lisp_Object);
extern Lisp_Object Frassq (Lisp_Object, Lisp_Object);
extern Lisp_Object Fre_search_backward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fre_search_forward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread (Lisp_Object);
extern Lisp_Object Fread_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_char (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_char_exclusive (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_coding_system (Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_command (Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_event (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_from_minibuffer (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_from_string (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_function (Lisp_Object);
extern Lisp_Object Fread_key_sequence (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_key_sequence_vector (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_minibuffer (Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_no_blanks_input (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_non_nil_coding_system (Lisp_Object);
extern Lisp_Object Fread_string (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fread_variable (Lisp_Object, Lisp_Object);
extern Lisp_Object Frecent_auto_save_p (void);
extern Lisp_Object Frecent_keys (void);
extern Lisp_Object Frecenter (Lisp_Object);
extern Lisp_Object Frecursion_depth (void);
extern Lisp_Object Frecursive_edit (void);
extern Lisp_Object Fredirect_debugging_output (Lisp_Object, Lisp_Object);
extern Lisp_Object Fredirect_frame_focus (Lisp_Object, Lisp_Object);
extern Lisp_Object Fredisplay (Lisp_Object);
extern Lisp_Object Fredraw_display (void);
extern Lisp_Object Fredraw_frame (Lisp_Object);
extern Lisp_Object Fregexp_quote (Lisp_Object);
extern Lisp_Object Fregion_beginning (void);
extern Lisp_Object Fregion_end (void);
extern Lisp_Object Fregister_ccl_program (Lisp_Object, Lisp_Object);
extern Lisp_Object Fregister_code_conversion_map (Lisp_Object, Lisp_Object);
extern Lisp_Object Frem (Lisp_Object, Lisp_Object);
extern Lisp_Object Fremhash (Lisp_Object, Lisp_Object);
extern Lisp_Object Fremove_list_of_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fremove_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Frename_buffer (Lisp_Object, Lisp_Object);
extern Lisp_Object Frename_file (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Freplace_match (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Frequire (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Freset_this_command_lengths (void);
extern Lisp_Object Fresize_mini_window_internal (Lisp_Object);
extern Lisp_Object Frestore_buffer_modified_p (Lisp_Object);
extern Lisp_Object Fresume_tty (Lisp_Object);
extern Lisp_Object Freverse (Lisp_Object);
extern Lisp_Object Fround (Lisp_Object, Lisp_Object);
extern Lisp_Object Frun_hook_with_args (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hook_with_args_until_failure (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hook_with_args_until_success (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hook_wrapped (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_hooks (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Frun_window_configuration_change_hook (Lisp_Object);
extern Lisp_Object Fsafe_length (Lisp_Object);
extern Lisp_Object Fsave_current_buffer (Lisp_Object);
extern Lisp_Object Fsave_excursion (Lisp_Object);
extern Lisp_Object Fsave_restriction (Lisp_Object);
extern Lisp_Object Fscan_lists (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fscan_sexps (Lisp_Object, Lisp_Object);
extern Lisp_Object Fscroll_down (Lisp_Object);
extern Lisp_Object Fscroll_left (Lisp_Object, Lisp_Object);
extern Lisp_Object Fscroll_other_window (Lisp_Object);
extern Lisp_Object Fscroll_right (Lisp_Object, Lisp_Object);
extern Lisp_Object Fscroll_up (Lisp_Object);
extern Lisp_Object Fsearch_backward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsearch_forward (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsecure_hash (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fselect_frame (Lisp_Object, Lisp_Object);
extern Lisp_Object Fselect_window (Lisp_Object, Lisp_Object);
extern Lisp_Object Fselected_frame (void);
extern Lisp_Object Fselected_window (void);
extern Lisp_Object Fself_insert_command (Lisp_Object);
extern Lisp_Object Fsend_string_to_terminal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsequencep (Lisp_Object);
extern Lisp_Object Fserial_process_configure (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fset (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_buffer (Lisp_Object);
extern Lisp_Object Fset_buffer_auto_saved (void);
extern Lisp_Object Fset_buffer_major_mode (Lisp_Object);
extern Lisp_Object Fset_buffer_modified_p (Lisp_Object);
extern Lisp_Object Fset_buffer_multibyte (Lisp_Object);
extern Lisp_Object Fset_case_table (Lisp_Object);
extern Lisp_Object Fset_category_table (Lisp_Object);
extern Lisp_Object Fset_char_table_extra_slot (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_char_table_parent (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_char_table_range (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_charset_plist (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_charset_priority (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fset_coding_system_priority (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fset_default (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_default_file_modes (Lisp_Object);
extern Lisp_Object Fset_file_modes (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_file_selinux_context (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_file_times (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_fontset_font (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_height (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_position (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_selected_window (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_size (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_frame_width (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_fringe_bitmap_face (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_input_interrupt_mode (Lisp_Object);
extern Lisp_Object Fset_input_meta_mode (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_input_mode (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_keyboard_coding_system_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_keymap_parent (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_marker (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_marker_insertion_type (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_match_data (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_minibuffer_window (Lisp_Object);
extern Lisp_Object Fset_mouse_pixel_position (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_mouse_position (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_network_process_option (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_output_flow_control (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_buffer (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_coding_system (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_datagram_address (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_filter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_filter_multibyte (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_inherit_coding_system_flag (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_plist (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_query_on_exit_flag (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_sentinel (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_process_window_size (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_quit_char (Lisp_Object);
extern Lisp_Object Fset_safe_terminal_coding_system_internal (Lisp_Object);
extern Lisp_Object Fset_standard_case_table (Lisp_Object);
extern Lisp_Object Fset_syntax_table (Lisp_Object);
extern Lisp_Object Fset_terminal_coding_system_internal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_terminal_local_value (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_terminal_parameter (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_text_properties (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_time_zone_rule (Lisp_Object);
extern Lisp_Object Fset_visited_file_modtime (Lisp_Object);
extern Lisp_Object Fset_window_buffer (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_combination_limit (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_configuration (Lisp_Object);
extern Lisp_Object Fset_window_dedicated_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_display_table (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_fringes (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_hscroll (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_margins (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_new_normal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_new_total (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_next_buffers (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_parameter (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_point (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_prev_buffers (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_redisplay_end_trigger (Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_scroll_bars (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_start (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fset_window_vscroll (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetcar (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetcdr (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetplist (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsetq (Lisp_Object);
extern Lisp_Object Fsetq_default (Lisp_Object);
extern Lisp_Object Fshow_face_resources (void);
extern Lisp_Object Fsignal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsignal_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsin (Lisp_Object);
extern Lisp_Object Fsingle_key_description (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_chars_backward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_chars_forward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_syntax_backward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fskip_syntax_forward (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsleep_for (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsnarf_documentation (Lisp_Object);
extern Lisp_Object Fsort (Lisp_Object, Lisp_Object);
extern Lisp_Object Fsort_charsets (Lisp_Object);
extern Lisp_Object Fspecial_variable_p (Lisp_Object);
extern Lisp_Object Fsplit_char (Lisp_Object);
extern Lisp_Object Fsplit_window_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsqrt (Lisp_Object);
extern Lisp_Object Fstandard_case_table (void);
extern Lisp_Object Fstandard_category_table (void);
extern Lisp_Object Fstandard_syntax_table (void);
extern Lisp_Object Fstart_kbd_macro (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstart_process (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fstop_process (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstore_kbd_macro_event (Lisp_Object);
extern Lisp_Object Fstring (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fstring_as_multibyte (Lisp_Object);
extern Lisp_Object Fstring_as_unibyte (Lisp_Object);
extern Lisp_Object Fstring_bytes (Lisp_Object);
extern Lisp_Object Fstring_equal (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_lessp (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_make_multibyte (Lisp_Object);
extern Lisp_Object Fstring_make_unibyte (Lisp_Object);
extern Lisp_Object Fstring_match (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_to_char (Lisp_Object);
extern Lisp_Object Fstring_to_multibyte (Lisp_Object);
extern Lisp_Object Fstring_to_number (Lisp_Object, Lisp_Object);
extern Lisp_Object Fstring_to_syntax (Lisp_Object);
extern Lisp_Object Fstring_to_unibyte (Lisp_Object);
extern Lisp_Object Fstring_width (Lisp_Object);
extern Lisp_Object Fstringp (Lisp_Object);
extern Lisp_Object Fsub1 (Lisp_Object);
extern Lisp_Object Fsubr_arity (Lisp_Object);
extern Lisp_Object Fsubr_name (Lisp_Object);
extern Lisp_Object Fsubrp (Lisp_Object);
extern Lisp_Object Fsubst_char_in_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsubstitute_command_keys (Lisp_Object);
extern Lisp_Object Fsubstitute_in_file_name (Lisp_Object);
extern Lisp_Object Fsubstring (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsubstring_no_properties (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fsuspend_emacs (Lisp_Object);
extern Lisp_Object Fsuspend_tty (Lisp_Object);
extern Lisp_Object Fsxhash (Lisp_Object);
extern Lisp_Object Fsymbol_function (Lisp_Object);
extern Lisp_Object Fsymbol_name (Lisp_Object);
extern Lisp_Object Fsymbol_plist (Lisp_Object);
extern Lisp_Object Fsymbol_value (Lisp_Object);
extern Lisp_Object Fsymbolp (Lisp_Object);
extern Lisp_Object Fsyntax_table (void);
extern Lisp_Object Fsyntax_table_p (Lisp_Object);
extern Lisp_Object Fsystem_groups (void);
extern Lisp_Object Fsystem_name (void);
extern Lisp_Object Fsystem_users (void);
extern Lisp_Object Ftan (Lisp_Object);
extern Lisp_Object Fterminal_coding_system (Lisp_Object);
extern Lisp_Object Fterminal_list (void);
extern Lisp_Object Fterminal_live_p (Lisp_Object);
extern Lisp_Object Fterminal_local_value (Lisp_Object, Lisp_Object);
extern Lisp_Object Fterminal_name (Lisp_Object);
extern Lisp_Object Fterminal_parameter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fterminal_parameters (Lisp_Object);
extern Lisp_Object Fterpri (Lisp_Object);
extern Lisp_Object Ftest_completion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftext_char_description (Lisp_Object);
extern Lisp_Object Ftext_properties_at (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftext_property_any (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftext_property_not_all (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fthis_command_keys (void);
extern Lisp_Object Fthis_command_keys_vector (void);
extern Lisp_Object Fthis_single_command_keys (void);
extern Lisp_Object Fthis_single_command_raw_keys (void);
__attribute__ ((__noreturn__)) extern Lisp_Object Fthrow (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftimes (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ftool_bar_get_system_style (void);
extern Lisp_Object Ftool_bar_lines_needed (Lisp_Object);
extern Lisp_Object Ftool_bar_pixel_width (Lisp_Object);
__attribute__ ((__noreturn__)) extern Lisp_Object Ftop_level (void);
extern Lisp_Object Ftrace_redisplay (Lisp_Object);
extern Lisp_Object Ftrace_to_stderr (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Ftrack_mouse (Lisp_Object);
extern Lisp_Object Ftranslate_region_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftranspose_regions (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftruncate (Lisp_Object, Lisp_Object);
extern Lisp_Object Ftry_completion (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Ftty_display_color_cells (Lisp_Object);
extern Lisp_Object Ftty_display_color_p (Lisp_Object);
extern Lisp_Object Ftty_no_underline (Lisp_Object);
extern Lisp_Object Ftty_suppress_bold_inverse_default_colors (Lisp_Object);
extern Lisp_Object Ftty_top_frame (Lisp_Object);
extern Lisp_Object Ftty_type (Lisp_Object);
extern Lisp_Object Ftype_of (Lisp_Object);
extern Lisp_Object Fundo_boundary (void);
extern Lisp_Object Funencodable_char_position (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Funhandled_file_name_directory (Lisp_Object);
extern Lisp_Object Funibyte_char_to_multibyte (Lisp_Object);
extern Lisp_Object Funibyte_string (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Funicode_property_table_internal (Lisp_Object);
extern Lisp_Object Funify_charset (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Funintern (Lisp_Object, Lisp_Object);
extern Lisp_Object Funix_sync (void);
extern Lisp_Object Funlock_buffer (void);
extern Lisp_Object Funwind_protect (Lisp_Object);
extern Lisp_Object Fupcase (Lisp_Object);
extern Lisp_Object Fupcase_initials (Lisp_Object);
extern Lisp_Object Fupcase_initials_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fupcase_region (Lisp_Object, Lisp_Object);
extern Lisp_Object Fupcase_word (Lisp_Object);
extern Lisp_Object Fuse_global_map (Lisp_Object);
extern Lisp_Object Fuse_local_map (Lisp_Object);
extern Lisp_Object Fuser_full_name (Lisp_Object);
extern Lisp_Object Fuser_login_name (Lisp_Object);
extern Lisp_Object Fuser_real_login_name (void);
extern Lisp_Object Fuser_real_uid (void);
extern Lisp_Object Fuser_uid (void);
extern Lisp_Object Fvariable_binding_locus (Lisp_Object);
extern Lisp_Object Fvconcat (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fvector (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fvector_or_char_table_p (Lisp_Object);
extern Lisp_Object Fvectorp (Lisp_Object);
extern Lisp_Object Fverify_visited_file_modtime (Lisp_Object);
extern Lisp_Object Fvertical_motion (Lisp_Object, Lisp_Object);
extern Lisp_Object Fvisible_frame_list (void);
extern Lisp_Object Fvisited_file_modtime (void);
extern Lisp_Object Fwaiting_for_user_input_p (void);
extern Lisp_Object Fwhere_is_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwhile (Lisp_Object);
extern Lisp_Object Fwiden (void);
extern Lisp_Object Fwidget_apply (ptrdiff_t, Lisp_Object *);
extern Lisp_Object Fwidget_get (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwidget_put (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_absolute_pixel_edges (Lisp_Object);
extern Lisp_Object Fwindow_at (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_body_height (Lisp_Object);
extern Lisp_Object Fwindow_body_width (Lisp_Object);
extern Lisp_Object Fwindow_buffer (Lisp_Object);
extern Lisp_Object Fwindow_combination_limit (Lisp_Object);
extern Lisp_Object Fwindow_configuration_frame (Lisp_Object);
extern Lisp_Object Fwindow_configuration_p (Lisp_Object);
extern Lisp_Object Fwindow_dedicated_p (Lisp_Object);
extern Lisp_Object Fwindow_display_table (Lisp_Object);
extern Lisp_Object Fwindow_edges (Lisp_Object);
extern Lisp_Object Fwindow_end (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_frame (Lisp_Object);
extern Lisp_Object Fwindow_fringes (Lisp_Object);
extern Lisp_Object Fwindow_hscroll (Lisp_Object);
extern Lisp_Object Fwindow_inside_absolute_pixel_edges (Lisp_Object);
extern Lisp_Object Fwindow_inside_edges (Lisp_Object);
extern Lisp_Object Fwindow_inside_pixel_edges (Lisp_Object);
extern Lisp_Object Fwindow_left_child (Lisp_Object);
extern Lisp_Object Fwindow_left_column (Lisp_Object);
extern Lisp_Object Fwindow_line_height (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_list (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_list_1 (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_live_p (Lisp_Object);
extern Lisp_Object Fwindow_margins (Lisp_Object);
extern Lisp_Object Fwindow_minibuffer_p (Lisp_Object);
extern Lisp_Object Fwindow_new_normal (Lisp_Object);
extern Lisp_Object Fwindow_new_total (Lisp_Object);
extern Lisp_Object Fwindow_next_buffers (Lisp_Object);
extern Lisp_Object Fwindow_next_sibling (Lisp_Object);
extern Lisp_Object Fwindow_normal_size (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_parameter (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_parameters (Lisp_Object);
extern Lisp_Object Fwindow_parent (Lisp_Object);
extern Lisp_Object Fwindow_pixel_edges (Lisp_Object);
extern Lisp_Object Fwindow_point (Lisp_Object);
extern Lisp_Object Fwindow_prev_buffers (Lisp_Object);
extern Lisp_Object Fwindow_prev_sibling (Lisp_Object);
extern Lisp_Object Fwindow_redisplay_end_trigger (Lisp_Object);
extern Lisp_Object Fwindow_resize_apply (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindow_scroll_bars (Lisp_Object);
extern Lisp_Object Fwindow_start (Lisp_Object);
extern Lisp_Object Fwindow_system (Lisp_Object);
extern Lisp_Object Fwindow_text_height (Lisp_Object);
extern Lisp_Object Fwindow_top_child (Lisp_Object);
extern Lisp_Object Fwindow_top_line (Lisp_Object);
extern Lisp_Object Fwindow_total_height (Lisp_Object);
extern Lisp_Object Fwindow_total_width (Lisp_Object);
extern Lisp_Object Fwindow_use_time (Lisp_Object);
extern Lisp_Object Fwindow_valid_p (Lisp_Object);
extern Lisp_Object Fwindow_vscroll (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwindowp (Lisp_Object);
extern Lisp_Object Fwrite_char (Lisp_Object, Lisp_Object);
extern Lisp_Object Fwrite_region (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_backspace_delete_keys_p (Lisp_Object);
extern Lisp_Object Fx_change_window_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_close_connection (Lisp_Object);
extern Lisp_Object Fx_create_frame (Lisp_Object);
extern Lisp_Object Fx_delete_window_property (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_disown_selection_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_display_backing_store (Lisp_Object);
extern Lisp_Object Fx_display_color_cells (Lisp_Object);
extern Lisp_Object Fx_display_grayscale_p (Lisp_Object);
extern Lisp_Object Fx_display_list (void);
extern Lisp_Object Fx_display_mm_height (Lisp_Object);
extern Lisp_Object Fx_display_mm_width (Lisp_Object);
extern Lisp_Object Fx_display_pixel_height (Lisp_Object);
extern Lisp_Object Fx_display_pixel_width (Lisp_Object);
extern Lisp_Object Fx_display_planes (Lisp_Object);
extern Lisp_Object Fx_display_save_under (Lisp_Object);
extern Lisp_Object Fx_display_screens (Lisp_Object);
extern Lisp_Object Fx_display_visual_class (Lisp_Object);
extern Lisp_Object Fx_family_fonts (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_file_dialog (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_focus_frame (Lisp_Object);
extern Lisp_Object Fx_get_atom_name (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_get_resource (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_get_selection_internal (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_hide_tip (void);
extern Lisp_Object Fx_list_fonts (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_load_color_file (Lisp_Object);
extern Lisp_Object Fx_menu_bar_open_internal (Lisp_Object);
extern Lisp_Object Fx_open_connection (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_own_selection_internal (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_parse_geometry (Lisp_Object);
extern Lisp_Object Fx_popup_dialog (Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_popup_menu (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_register_dnd_atom (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_select_font (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_selection_exists_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_selection_owner_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_send_client_event (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_server_max_request_size (Lisp_Object);
extern Lisp_Object Fx_server_vendor (Lisp_Object);
extern Lisp_Object Fx_server_version (Lisp_Object);
extern Lisp_Object Fx_show_tip (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_synchronize (Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_uses_old_gtk_dialog (void);
extern Lisp_Object Fx_window_property (Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object, Lisp_Object);
extern Lisp_Object Fx_wm_set_size_hint (Lisp_Object);
extern Lisp_Object Fxw_color_defined_p (Lisp_Object, Lisp_Object);
extern Lisp_Object Fxw_color_values (Lisp_Object, Lisp_Object);
extern Lisp_Object Fxw_display_color_p (Lisp_Object);
extern Lisp_Object Fyes_or_no_p (Lisp_Object);
extern Lisp_Object Fzerop (Lisp_Object);
# 3683 "lisp.h" 2



extern inline __attribute__ ((__gnu_inline__)) void
maybe_gc (void)
{
  if ((consing_since_gc > globals.f_gc_cons_threshold
       && consing_since_gc > gc_relative_threshold)
      || (!((globals.f_Vmemory_full) == (Qnil))
   && consing_since_gc > memory_full_cons_threshold))
    Fgarbage_collect ();
}

extern inline __attribute__ ((__gnu_inline__)) int
functionp (Lisp_Object object)
{
  if ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Symbol) && !((Ffboundp (object)) == (Qnil)))
    {
      object = Findirect_function (object, Qt);

      if ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons) && (((0 + (((((void) (0 && ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((object) - (Lisp_Cons))))->car)))) == (Qautoload)))
 {


   int i;
   for (i = 0; i < 4 && (((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons); i++)
     object = (0 + (((((void) (0 && ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((object) - (Lisp_Cons))))->u.cdr)));

   return ! ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons) && !(((0 + (((((void) (0 && ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((object) - (Lisp_Cons))))->car)))) == (Qnil)));
 }
    }

  if (((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((object) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUBR) << PSEUDOVECTOR_AREA_BITS)))))
    return (((void) (0 && (((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((object) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUBR) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Subr *) ((intptr_t) ((object) - (Lisp_Vectorlike))))->max_args != UNEVALLED;
  else if (((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((object) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_COMPILED) << PSEUDOVECTOR_AREA_BITS)))))
    return 1;
  else if ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons))
    {
      Lisp_Object car = (0 + (((((void) (0 && ((((enum Lisp_Type) (((object)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((object) - (Lisp_Cons))))->car)));
      return ((car) == (Qlambda)) || ((car) == (Qclosure));
    }
  else
    return 0;
}


# 3728 "lisp.h"
#pragma GCC diagnostic pop
# 3728 "lisp.h"

# 38 "bytecode.c" 2
# 1 "character.h" 1
# 26 "character.h"
# 1 "../lib/verify.h" 1
# 27 "character.h" 2


# 28 "character.h"
#pragma GCC diagnostic push
# 28 "character.h"

# 28 "character.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 28 "character.h"

# 28 "character.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 28 "character.h"

# 28 "character.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 28 "character.h"

# 561 "character.h"
extern inline __attribute__ ((__gnu_inline__)) int
sanitize_tab_width (EMACS_INT width)
{
  return 0 < width && width <= 1000 ? width : 8;
}
# 582 "character.h"
extern inline __attribute__ ((__gnu_inline__)) int
sanitize_char_width (EMACS_INT width)
{
  return 0 <= width && width <= 1000 ? width : 1000;
}
# 622 "character.h"
typedef enum {
  UNICODE_CATEGORY_UNKNOWN = 0,
  UNICODE_CATEGORY_Lu,
  UNICODE_CATEGORY_Ll,
  UNICODE_CATEGORY_Lt,
  UNICODE_CATEGORY_Lm,
  UNICODE_CATEGORY_Lo,
  UNICODE_CATEGORY_Mn,
  UNICODE_CATEGORY_Mc,
  UNICODE_CATEGORY_Me,
  UNICODE_CATEGORY_Nd,
  UNICODE_CATEGORY_Nl,
  UNICODE_CATEGORY_No,
  UNICODE_CATEGORY_Pc,
  UNICODE_CATEGORY_Pd,
  UNICODE_CATEGORY_Ps,
  UNICODE_CATEGORY_Pe,
  UNICODE_CATEGORY_Pi,
  UNICODE_CATEGORY_Pf,
  UNICODE_CATEGORY_Po,
  UNICODE_CATEGORY_Sm,
  UNICODE_CATEGORY_Sc,
  UNICODE_CATEGORY_Sk,
  UNICODE_CATEGORY_So,
  UNICODE_CATEGORY_Zs,
  UNICODE_CATEGORY_Zl,
  UNICODE_CATEGORY_Zp,
  UNICODE_CATEGORY_Cc,
  UNICODE_CATEGORY_Cf,
  UNICODE_CATEGORY_Cs,
  UNICODE_CATEGORY_Co,
  UNICODE_CATEGORY_Cn
} unicode_category_t;

extern EMACS_INT char_resolve_modifier_mask (EMACS_INT) __attribute__ ((__const__));
extern int char_string (unsigned, unsigned char *);
extern int string_char (const unsigned char *,
                        const unsigned char **, int *);

extern int translate_char (Lisp_Object, int c);
extern void parse_str_as_multibyte (const unsigned char *,
        ptrdiff_t, ptrdiff_t *, ptrdiff_t *);
extern ptrdiff_t count_size_as_multibyte (const unsigned char *, ptrdiff_t);
extern ptrdiff_t str_as_multibyte (unsigned char *, ptrdiff_t, ptrdiff_t,
       ptrdiff_t *);
extern ptrdiff_t str_to_multibyte (unsigned char *, ptrdiff_t, ptrdiff_t);
extern ptrdiff_t str_as_unibyte (unsigned char *, ptrdiff_t);
extern ptrdiff_t str_to_unibyte (const unsigned char *, unsigned char *,
                                 ptrdiff_t);
extern ptrdiff_t strwidth (const char *, ptrdiff_t);
extern ptrdiff_t c_string_width (const unsigned char *, ptrdiff_t, int,
     ptrdiff_t *, ptrdiff_t *);
extern ptrdiff_t lisp_string_width (Lisp_Object, ptrdiff_t,
        ptrdiff_t *, ptrdiff_t *);

extern Lisp_Object Qcharacterp;
extern Lisp_Object Vchar_unify_table;
extern Lisp_Object string_escape_byte8 (Lisp_Object);






# 685 "character.h"
#pragma GCC diagnostic pop
# 685 "character.h"

# 39 "bytecode.c" 2
# 1 "buffer.h" 1
# 22 "buffer.h"
# 1 "systime.h" 1
# 22 "systime.h"
# 1 "../lib/timespec.h" 1
# 22 "../lib/timespec.h"
# 1 "../lib/time.h" 1
# 20 "../lib/time.h"
       
# 21 "../lib/time.h" 3
# 39 "../lib/time.h" 3
# 1 "/usr/include/time.h" 1 3 4
# 30 "/usr/include/time.h" 3 4








# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 39 "/usr/include/time.h" 2 3 4



# 1 "/usr/include/i386-linux-gnu/bits/time.h" 1 3 4
# 86 "/usr/include/i386-linux-gnu/bits/time.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/timex.h" 1 3 4
# 24 "/usr/include/i386-linux-gnu/bits/timex.h" 3 4
struct timex
{
  unsigned int modes;
  long int offset;
  long int freq;
  long int maxerror;
  long int esterror;
  int status;
  long int constant;
  long int precision;
  long int tolerance;
  struct timeval time;
  long int tick;

  long int ppsfreq;
  long int jitter;
  int shift;
  long int stabil;
  long int jitcnt;
  long int calcnt;
  long int errcnt;
  long int stbcnt;

  int tai;


  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32; int :32;
  int :32; int :32; int :32;
};
# 87 "/usr/include/i386-linux-gnu/bits/time.h" 2 3 4




extern int clock_adjtime (__clockid_t __clock_id, struct timex *__utx) __attribute__ ((__nothrow__ , __leaf__));


# 43 "/usr/include/time.h" 2 3 4
# 131 "/usr/include/time.h" 3 4


struct tm
{
  int tm_sec;
  int tm_min;
  int tm_hour;
  int tm_mday;
  int tm_mon;
  int tm_year;
  int tm_wday;
  int tm_yday;
  int tm_isdst;


  long int tm_gmtoff;
  __const char *tm_zone;




};








struct itimerspec
  {
    struct timespec it_interval;
    struct timespec it_value;
  };


struct sigevent;
# 180 "/usr/include/time.h" 3 4



extern clock_t clock (void) __attribute__ ((__nothrow__ , __leaf__));


extern time_t time (time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));


extern double difftime (time_t __time1, time_t __time0)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));


extern time_t mktime (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));





extern size_t strftime (char *__restrict __s, size_t __maxsize,
   __const char *__restrict __format,
   __const struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *strptime (__const char *__restrict __s,
         __const char *__restrict __fmt, struct tm *__tp)
     __attribute__ ((__nothrow__ , __leaf__));







extern size_t strftime_l (char *__restrict __s, size_t __maxsize,
     __const char *__restrict __format,
     __const struct tm *__restrict __tp,
     __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));



extern char *strptime_l (__const char *__restrict __s,
    __const char *__restrict __fmt, struct tm *__tp,
    __locale_t __loc) __attribute__ ((__nothrow__ , __leaf__));






extern struct tm *gmtime (__const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime (__const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));





extern struct tm *gmtime_r (__const time_t *__restrict __timer,
       struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));



extern struct tm *localtime_r (__const time_t *__restrict __timer,
          struct tm *__restrict __tp) __attribute__ ((__nothrow__ , __leaf__));





extern char *asctime (__const struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime (__const time_t *__timer) __attribute__ ((__nothrow__ , __leaf__));







extern char *asctime_r (__const struct tm *__restrict __tp,
   char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));


extern char *ctime_r (__const time_t *__restrict __timer,
        char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));




extern char *__tzname[2];
extern int __daylight;
extern long int __timezone;




extern char *tzname[2];



extern void tzset (void) __attribute__ ((__nothrow__ , __leaf__));



extern int daylight;
extern long int timezone;





extern int stime (__const time_t *__when) __attribute__ ((__nothrow__ , __leaf__));
# 313 "/usr/include/time.h" 3 4
extern time_t timegm (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern time_t timelocal (struct tm *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int dysize (int __year) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__const__));
# 328 "/usr/include/time.h" 3 4
extern int nanosleep (__const struct timespec *__requested_time,
        struct timespec *__remaining);



extern int clock_getres (clockid_t __clock_id, struct timespec *__res) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_gettime (clockid_t __clock_id, struct timespec *__tp) __attribute__ ((__nothrow__ , __leaf__));


extern int clock_settime (clockid_t __clock_id, __const struct timespec *__tp)
     __attribute__ ((__nothrow__ , __leaf__));






extern int clock_nanosleep (clockid_t __clock_id, int __flags,
       __const struct timespec *__req,
       struct timespec *__rem);


extern int clock_getcpuclockid (pid_t __pid, clockid_t *__clock_id) __attribute__ ((__nothrow__ , __leaf__));




extern int timer_create (clockid_t __clock_id,
    struct sigevent *__restrict __evp,
    timer_t *__restrict __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_delete (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_settime (timer_t __timerid, int __flags,
     __const struct itimerspec *__restrict __value,
     struct itimerspec *__restrict __ovalue) __attribute__ ((__nothrow__ , __leaf__));


extern int timer_gettime (timer_t __timerid, struct itimerspec *__value)
     __attribute__ ((__nothrow__ , __leaf__));


extern int timer_getoverrun (timer_t __timerid) __attribute__ ((__nothrow__ , __leaf__));
# 390 "/usr/include/time.h" 3 4
extern int getdate_err;
# 399 "/usr/include/time.h" 3 4
extern struct tm *getdate (__const char *__string);
# 413 "/usr/include/time.h" 3 4
extern int getdate_r (__const char *__restrict __string,
        struct tm *__restrict __resbufp);



# 40 "../lib/time.h" 2 3


# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 43 "../lib/time.h" 2 3
# 407 "../lib/time.h" 3
struct __time_t_must_be_integral {
  unsigned int __floating_time_t_unsupported : (time_t) 1;
};
# 447 "../lib/time.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 472 "../lib/time.h" 3
extern int _gl_cxxalias_dummy
                                                                           ;


extern int _gl_cxxalias_dummy;
# 494 "../lib/time.h" 3
extern int _gl_cxxalias_dummy
                                                                        ;


extern int _gl_cxxalias_dummy;
# 23 "../lib/timespec.h" 2


# 24 "../lib/timespec.h"
#pragma GCC diagnostic push
# 24 "../lib/timespec.h"

# 24 "../lib/timespec.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 24 "../lib/timespec.h"

# 24 "../lib/timespec.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 24 "../lib/timespec.h"

# 24 "../lib/timespec.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 24 "../lib/timespec.h"

# 57 "../lib/timespec.h"
extern inline __attribute__ ((__gnu_inline__)) int
timespec_cmp (struct timespec a, struct timespec b)
{
  return (a.tv_sec < b.tv_sec ? -1
          : a.tv_sec > b.tv_sec ? 1
          : (int) (a.tv_nsec - b.tv_nsec));
}



extern inline __attribute__ ((__gnu_inline__)) int
timespec_sign (struct timespec a)
{
  return a.tv_sec < 0 ? -1 : a.tv_sec || a.tv_nsec;
}

struct timespec timespec_add (struct timespec, struct timespec)
  __attribute__ ((__const__));
struct timespec timespec_sub (struct timespec, struct timespec)
  __attribute__ ((__const__));
struct timespec dtotimespec (double)
  __attribute__ ((__const__));


extern inline __attribute__ ((__gnu_inline__)) double
timespectod (struct timespec a)
{
  return a.tv_sec + a.tv_nsec / 1e9;
}

void gettime (struct timespec *);
int settime (struct timespec const *);


# 90 "../lib/timespec.h"
#pragma GCC diagnostic pop
# 90 "../lib/timespec.h"

# 23 "systime.h" 2


# 24 "systime.h"
#pragma GCC diagnostic push
# 24 "systime.h"

# 24 "systime.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 24 "systime.h"

# 24 "systime.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 24 "systime.h"

# 24 "systime.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 24 "systime.h"







# 1 "/usr/include/X11/X.h" 1 3 4
# 66 "/usr/include/X11/X.h" 3 4
typedef unsigned long XID;



typedef unsigned long Mask;



typedef unsigned long Atom;

typedef unsigned long VisualID;
typedef unsigned long Time;
# 96 "/usr/include/X11/X.h" 3 4
typedef XID Window;
typedef XID Drawable;


typedef XID Font;

typedef XID Pixmap;
typedef XID Cursor;
typedef XID Colormap;
typedef XID GContext;
typedef XID KeySym;

typedef unsigned char KeyCode;
# 32 "systime.h" 2
# 47 "systime.h"
# 1 "../lib/sys/time.h" 1
# 22 "../lib/sys/time.h"
       
# 23 "../lib/sys/time.h" 3
# 38 "../lib/sys/time.h" 3
# 1 "/usr/include/i386-linux-gnu/sys/time.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
# 1 "../lib/time.h" 1 3 4
# 20 "../lib/time.h" 3 4
       
# 21 "../lib/time.h" 3
# 28 "/usr/include/i386-linux-gnu/sys/time.h" 2 3 4

# 1 "/usr/include/i386-linux-gnu/bits/time.h" 1 3 4
# 30 "/usr/include/i386-linux-gnu/sys/time.h" 2 3 4

# 1 "../lib/sys/select.h" 1 3 4
# 19 "../lib/sys/select.h" 3 4
       
# 20 "../lib/sys/select.h" 3
# 32 "/usr/include/i386-linux-gnu/sys/time.h" 2 3 4








# 57 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
struct timezone
  {
    int tz_minuteswest;
    int tz_dsttime;
  };

typedef struct timezone *__restrict __timezone_ptr_t;
# 73 "/usr/include/i386-linux-gnu/sys/time.h" 3 4
extern int gettimeofday (struct timeval *__restrict __tv,
    __timezone_ptr_t __tz) __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));




extern int settimeofday (__const struct timeval *__tv,
    __const struct timezone *__tz)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));





extern int adjtime (__const struct timeval *__delta,
      struct timeval *__olddelta) __attribute__ ((__nothrow__ , __leaf__));




enum __itimer_which
  {

    ITIMER_REAL = 0,


    ITIMER_VIRTUAL = 1,



    ITIMER_PROF = 2

  };



struct itimerval
  {

    struct timeval it_interval;

    struct timeval it_value;
  };




typedef enum __itimer_which __itimer_which_t;






extern int getitimer (__itimer_which_t __which,
        struct itimerval *__value) __attribute__ ((__nothrow__ , __leaf__));




extern int setitimer (__itimer_which_t __which,
        __const struct itimerval *__restrict __new,
        struct itimerval *__restrict __old) __attribute__ ((__nothrow__ , __leaf__));




extern int utimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));



extern int lutimes (__const char *__file, __const struct timeval __tvp[2])
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1)));


extern int futimes (int __fd, __const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));






extern int futimesat (int __fd, __const char *__file,
        __const struct timeval __tvp[2]) __attribute__ ((__nothrow__ , __leaf__));
# 191 "/usr/include/i386-linux-gnu/sys/time.h" 3 4

# 39 "../lib/sys/time.h" 2 3
# 414 "../lib/sys/time.h" 3
extern int _gl_cxxalias_dummy
                                                                  ;

extern int _gl_cxxalias_dummy;
# 48 "systime.h" 2




typedef struct timespec EMACS_TIME;



enum { EMACS_TIME_RESOLUTION = 1000000000 };
enum { LOG10_EMACS_TIME_RESOLUTION = 9 };




extern inline __attribute__ ((__gnu_inline__)) time_t EMACS_SECS (EMACS_TIME t) { return t.tv_sec; }
extern inline __attribute__ ((__gnu_inline__)) int EMACS_NSECS (EMACS_TIME t) { return t.tv_nsec; }
extern inline __attribute__ ((__gnu_inline__)) time_t *emacs_secs_addr (EMACS_TIME *t) { return &t->tv_sec; }


extern inline __attribute__ ((__gnu_inline__)) EMACS_TIME
make_emacs_time (time_t s, int ns)
{
  EMACS_TIME r = { s, ns };
  return r;
}


extern inline __attribute__ ((__gnu_inline__)) EMACS_TIME
invalid_emacs_time (void)
{
  EMACS_TIME r = { 0, -1 };
  return r;
}


extern inline __attribute__ ((__gnu_inline__)) EMACS_TIME
current_emacs_time (void)
{
  EMACS_TIME r;
  gettime (&r);
  return r;
}
# 100 "systime.h"
extern inline __attribute__ ((__gnu_inline__)) EMACS_TIME
add_emacs_time (EMACS_TIME a, EMACS_TIME b)
{
  return timespec_add (a, b);
}
extern inline __attribute__ ((__gnu_inline__)) EMACS_TIME
sub_emacs_time (EMACS_TIME a, EMACS_TIME b)
{
  return timespec_sub (a, b);
}




extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_SIGN (EMACS_TIME t)
{
  return timespec_sign (t);
}


extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_VALID_P (EMACS_TIME t)
{
  return 0 <= t.tv_nsec;
}





extern inline __attribute__ ((__gnu_inline__)) EMACS_TIME
EMACS_TIME_FROM_DOUBLE (double d)
{
  return dtotimespec (d);
}


extern inline __attribute__ ((__gnu_inline__)) double
EMACS_TIME_TO_DOUBLE (EMACS_TIME t)
{
  return timespectod (t);
}


extern int set_file_times (int, const char *, EMACS_TIME, EMACS_TIME);
extern struct timeval make_timeval (EMACS_TIME);


extern void set_waiting_for_input (EMACS_TIME *);






extern Lisp_Object make_lisp_time (EMACS_TIME);
extern _Bool decode_time_components (Lisp_Object, Lisp_Object, Lisp_Object,
        Lisp_Object, EMACS_TIME *, double *);
extern EMACS_TIME lisp_time_argument (Lisp_Object);



extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_EQ (EMACS_TIME t1, EMACS_TIME t2)
{
  return timespec_cmp (t1, t2) == 0;
}
extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_NE (EMACS_TIME t1, EMACS_TIME t2)
{
  return timespec_cmp (t1, t2) != 0;
}
extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_GT (EMACS_TIME t1, EMACS_TIME t2)
{
  return timespec_cmp (t1, t2) > 0;
}
extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_GE (EMACS_TIME t1, EMACS_TIME t2)
{
  return timespec_cmp (t1, t2) >= 0;
}
extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_LT (EMACS_TIME t1, EMACS_TIME t2)
{
  return timespec_cmp (t1, t2) < 0;
}
extern inline __attribute__ ((__gnu_inline__)) int
EMACS_TIME_LE (EMACS_TIME t1, EMACS_TIME t2)
{
  return timespec_cmp (t1, t2) <= 0;
}


# 194 "systime.h"
#pragma GCC diagnostic pop
# 194 "systime.h"

# 23 "buffer.h" 2


# 24 "buffer.h"
#pragma GCC diagnostic push
# 24 "buffer.h"

# 24 "buffer.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 24 "buffer.h"

# 24 "buffer.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 24 "buffer.h"

# 24 "buffer.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 24 "buffer.h"

# 251 "buffer.h"
extern void set_point (ptrdiff_t);
extern void temp_set_point (struct buffer *, ptrdiff_t);
extern void set_point_both (ptrdiff_t, ptrdiff_t);
extern void temp_set_point_both (struct buffer *,
     ptrdiff_t, ptrdiff_t);
extern void enlarge_buffer_text (struct buffer *, ptrdiff_t);
# 415 "buffer.h"
struct buffer_text
  {




    unsigned char *beg;

    ptrdiff_t gpt;
    ptrdiff_t z;
    ptrdiff_t gpt_byte;
    ptrdiff_t z_byte;
    ptrdiff_t gap_size;
    EMACS_INT modiff;



    EMACS_INT chars_modiff;



    EMACS_INT save_modiff;


    EMACS_INT overlay_modiff;

    EMACS_INT compact;



    ptrdiff_t beg_unchanged;


    ptrdiff_t end_unchanged;



    EMACS_INT unchanged_modified;




    EMACS_INT overlay_unchanged_modified;


    INTERVAL intervals;
# 469 "buffer.h"
    struct Lisp_Marker *markers;




    _Bool inhibit_shrinking;
  };







struct buffer
{
  struct vectorlike_header header;


  Lisp_Object name_;


  Lisp_Object filename_;


  Lisp_Object directory_;



  Lisp_Object backed_up_;







  Lisp_Object save_length_;




  Lisp_Object auto_save_file_name_;


  Lisp_Object read_only_;



  Lisp_Object mark_;




  Lisp_Object local_var_alist_;


  Lisp_Object major_mode_;


  Lisp_Object mode_name_;


  Lisp_Object mode_line_format_;



  Lisp_Object header_line_format_;


  Lisp_Object keymap_;


  Lisp_Object abbrev_table_;


  Lisp_Object syntax_table_;


  Lisp_Object category_table_;




  Lisp_Object case_fold_search_;
  Lisp_Object tab_width_;
  Lisp_Object fill_column_;
  Lisp_Object left_margin_;


  Lisp_Object auto_fill_function_;



  Lisp_Object downcase_table_;


  Lisp_Object upcase_table_;


  Lisp_Object case_canon_table_;


  Lisp_Object case_eqv_table_;


  Lisp_Object truncate_lines_;


  Lisp_Object word_wrap_;


  Lisp_Object ctl_arrow_;



  Lisp_Object bidi_display_reordering_;




  Lisp_Object bidi_paragraph_direction_;



  Lisp_Object selective_display_;


  Lisp_Object selective_display_ellipses_;


  Lisp_Object minor_modes_;



  Lisp_Object overwrite_mode_;


  Lisp_Object abbrev_mode_;


  Lisp_Object display_table_;


  Lisp_Object mark_active_;



  Lisp_Object enable_multibyte_characters_;



  Lisp_Object buffer_file_coding_system_;


  Lisp_Object file_format_;


  Lisp_Object auto_save_file_format_;



  Lisp_Object cache_long_line_scans_;







  Lisp_Object width_table_;




  Lisp_Object pt_marker_;




  Lisp_Object begv_marker_;




  Lisp_Object zv_marker_;



  Lisp_Object point_before_scroll_;


  Lisp_Object file_truename_;





  Lisp_Object invisibility_spec_;



  Lisp_Object last_selected_window_;


  Lisp_Object display_count_;



  Lisp_Object left_margin_cols_;
  Lisp_Object right_margin_cols_;



  Lisp_Object left_fringe_width_;
  Lisp_Object right_fringe_width_;



  Lisp_Object fringes_outside_margins_;



  Lisp_Object scroll_bar_width_;
  Lisp_Object vertical_scroll_bar_type_;



  Lisp_Object indicate_empty_lines_;


  Lisp_Object indicate_buffer_boundaries_;


  Lisp_Object fringe_indicator_alist_;


  Lisp_Object fringe_cursor_alist_;


  Lisp_Object display_time_;





  Lisp_Object scroll_up_aggressively_;





  Lisp_Object scroll_down_aggressively_;



  Lisp_Object cursor_type_;



  Lisp_Object extra_line_spacing_;




  Lisp_Object cursor_in_non_selected_windows_;






  struct buffer_text own_text;




  struct buffer_text *text;


  struct buffer *next;


  ptrdiff_t pt;


  ptrdiff_t pt_byte;


  ptrdiff_t begv;


  ptrdiff_t begv_byte;


  ptrdiff_t zv;


  ptrdiff_t zv_byte;



  struct buffer *base_buffer;




  int indirections;







  char local_flags[50];
# 793 "buffer.h"
  EMACS_TIME modtime;






  off_t modtime_size;


  EMACS_INT auto_save_modified;



  EMACS_INT display_error_modiff;



  time_t auto_save_failure_time;



  ptrdiff_t last_window_start;
# 833 "buffer.h"
  struct region_cache *newline_cache;
  struct region_cache *width_run_cache;



  unsigned prevent_redisplay_optimizations_p : 1;


  unsigned clip_changed : 1;



  struct Lisp_Overlay *overlays_before;



  struct Lisp_Overlay *overlays_after;


  ptrdiff_t overlay_center;






  Lisp_Object undo_list_;
};



extern inline __attribute__ ((__gnu_inline__)) void
bset_bidi_paragraph_direction (struct buffer *b, Lisp_Object val)
{
  b->bidi_paragraph_direction_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_case_canon_table (struct buffer *b, Lisp_Object val)
{
  b->case_canon_table_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_case_eqv_table (struct buffer *b, Lisp_Object val)
{
  b->case_eqv_table_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_directory (struct buffer *b, Lisp_Object val)
{
  b->directory_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_display_count (struct buffer *b, Lisp_Object val)
{
  b->display_count_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_display_time (struct buffer *b, Lisp_Object val)
{
  b->display_time_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_downcase_table (struct buffer *b, Lisp_Object val)
{
  b->downcase_table_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_enable_multibyte_characters (struct buffer *b, Lisp_Object val)
{
  b->enable_multibyte_characters_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_filename (struct buffer *b, Lisp_Object val)
{
  b->filename_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_keymap (struct buffer *b, Lisp_Object val)
{
  b->keymap_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_last_selected_window (struct buffer *b, Lisp_Object val)
{
  b->last_selected_window_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_local_var_alist (struct buffer *b, Lisp_Object val)
{
  b->local_var_alist_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_mark_active (struct buffer *b, Lisp_Object val)
{
  b->mark_active_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_point_before_scroll (struct buffer *b, Lisp_Object val)
{
  b->point_before_scroll_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_read_only (struct buffer *b, Lisp_Object val)
{
  b->read_only_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_truncate_lines (struct buffer *b, Lisp_Object val)
{
  b->truncate_lines_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_undo_list (struct buffer *b, Lisp_Object val)
{
  b->undo_list_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_upcase_table (struct buffer *b, Lisp_Object val)
{
  b->upcase_table_ = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
bset_width_table (struct buffer *b, Lisp_Object val)
{
  b->width_table_ = val;
}
# 1003 "buffer.h"
extern struct buffer *all_buffers;
# 1012 "buffer.h"
extern struct buffer *current_buffer;
# 1021 "buffer.h"
extern struct buffer buffer_defaults;
# 1037 "buffer.h"
extern struct buffer buffer_local_flags;





extern struct buffer buffer_local_symbols;

extern void delete_all_overlays (struct buffer *);
extern void reset_buffer (struct buffer *);
extern void compact_buffer (struct buffer *);
extern void evaporate_overlays (ptrdiff_t);
extern ptrdiff_t overlays_at (EMACS_INT, _Bool, Lisp_Object **,
         ptrdiff_t *, ptrdiff_t *, ptrdiff_t *, _Bool);
extern ptrdiff_t sort_overlays (Lisp_Object *, ptrdiff_t, struct window *);
extern void recenter_overlay_lists (struct buffer *, ptrdiff_t);
extern ptrdiff_t overlay_strings (ptrdiff_t, struct window *, unsigned char **);
extern void validate_region (Lisp_Object *, Lisp_Object *);
extern void set_buffer_internal_1 (struct buffer *);
extern void set_buffer_temp (struct buffer *);
extern Lisp_Object buffer_local_value_1 (Lisp_Object, Lisp_Object);
extern void record_buffer (Lisp_Object);
extern __attribute__ ((__noreturn__)) void buffer_slot_type_mismatch (Lisp_Object, int);
extern void fix_overlays_before (struct buffer *, ptrdiff_t, ptrdiff_t);
extern void mmap_set_vars (_Bool);
# 1072 "buffer.h"
extern inline __attribute__ ((__gnu_inline__)) void
set_buffer_internal (struct buffer *b)
{
  if (current_buffer != b)
    set_buffer_internal_1 (b);
}




extern inline __attribute__ ((__gnu_inline__)) void
record_unwind_current_buffer (void)
{
  record_unwind_protect (set_buffer_if_live, Fcurrent_buffer ());
}
# 1107 "buffer.h"
extern Lisp_Object Qbefore_change_functions;
extern Lisp_Object Qafter_change_functions;
extern Lisp_Object Qfirst_change_hook;



extern inline __attribute__ ((__gnu_inline__)) INTERVAL
buffer_intervals (struct buffer *b)
{
  ((void) (0 && (b->text != ((void *)0))));
  return b->text->intervals;
}



extern inline __attribute__ ((__gnu_inline__)) void
set_buffer_intervals (struct buffer *b, INTERVAL i)
{
  ((void) (0 && (b->text != ((void *)0))));
  b->text->intervals = i;
}



extern inline __attribute__ ((__gnu_inline__)) _Bool
buffer_has_overlays (void)
{
  return current_buffer->overlays_before || current_buffer->overlays_after;
}
# 1151 "buffer.h"
extern inline __attribute__ ((__gnu_inline__)) int
FETCH_MULTIBYTE_CHAR (ptrdiff_t pos)
{
  unsigned char *p = ((pos >= (current_buffer->text->gpt_byte) ? (current_buffer->text->gap_size) : 0)
        + pos + (current_buffer->text->beg) - ((1)));
  return (!((p)[0] & 0x80) ? (p)[0] : ! ((p)[0] & 0x20) ? (((((p)[0] & 0x1F) << 6) | ((p)[1] & 0x3F)) + (((unsigned char) (p)[0]) < 0xC2 ? 0x3FFF80 : 0)) : ! ((p)[0] & 0x10) ? ((((p)[0] & 0x0F) << 12) | (((p)[1] & 0x3F) << 6) | ((p)[2] & 0x3F)) : string_char ((p), ((void *)0), ((void *)0)));
}





extern inline __attribute__ ((__gnu_inline__)) int
BUF_FETCH_MULTIBYTE_CHAR (struct buffer *buf, ptrdiff_t pos)
{
  unsigned char *p
    = ((pos >= ((buf)->text->gpt_byte) ? ((buf)->text->gap_size) : 0)
       + pos + ((buf)->text->beg) - ((1)));
  return (!((p)[0] & 0x80) ? (p)[0] : ! ((p)[0] & 0x20) ? (((((p)[0] & 0x1F) << 6) | ((p)[1] & 0x3F)) + (((unsigned char) (p)[0]) < 0xC2 ? 0x3FFF80 : 0)) : ! ((p)[0] & 0x10) ? ((((p)[0] & 0x0F) << 12) | (((p)[1] & 0x3F) << 6) | ((p)[2] & 0x3F)) : string_char ((p), ((void *)0), ((void *)0)));
}
# 1199 "buffer.h"
extern int last_per_buffer_idx;
# 1270 "buffer.h"
extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
per_buffer_default (int offset)
{
  return *(Lisp_Object *)(offset + (char *) &buffer_defaults);
}

extern inline __attribute__ ((__gnu_inline__)) void
set_per_buffer_default (int offset, Lisp_Object value)
{
  *(Lisp_Object *)(offset + (char *) &buffer_defaults) = value;
}




extern inline __attribute__ ((__gnu_inline__)) Lisp_Object
per_buffer_value (struct buffer *b, int offset)
{
  return *(Lisp_Object *)(offset + (char *) b);
}

extern inline __attribute__ ((__gnu_inline__)) void
set_per_buffer_value (struct buffer *b, int offset, Lisp_Object value)
{
  *(Lisp_Object *)(offset + (char *) b) = value;
}


extern inline __attribute__ ((__gnu_inline__)) int
downcase (int c)
{
  Lisp_Object downcase_table = ((current_buffer)->downcase_table_);
  Lisp_Object down = ((((sizeof ((c) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof ((c) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? ((c) + (unsigned) 0) < ((0x80) + (unsigned) 0) : ((c) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) ? ({struct Lisp_Char_Table *_tbl = ((void *)0); Lisp_Object _val; do { _tbl = _tbl ? (((void) (0 && (((((enum Lisp_Type) (((_tbl->parent)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike)))) : (((void) (0 && (((((enum Lisp_Type) ((((downcase_table))) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) (((downcase_table)) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) (((downcase_table)) - (Lisp_Vectorlike)))); _val = (! ((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS)))) ? _tbl->ascii : (((void) (0 && (((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), ((struct Lisp_Sub_Char_Table *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike)))))->contents[(c)]); if (((_val) == (Qnil))) _val = _tbl->defalt; } while (((_val) == (Qnil)) && ! ((_tbl->parent) == (Qnil))); _val; }) : char_table_ref ((downcase_table), (c)));
  return (((((((enum Lisp_Type) (((down)) & TYPEMASK))) & ~Lisp_Int1) == 0)) && ((down) >> INTTYPEBITS) >= 0) ? (((down) >> INTTYPEBITS)) : c;
}


extern inline __attribute__ ((__gnu_inline__)) _Bool uppercasep (int c) { return downcase (c) != c; }


extern inline __attribute__ ((__gnu_inline__)) int
upcase1 (int c)
{
  Lisp_Object upcase_table = ((current_buffer)->upcase_table_);
  Lisp_Object up = ((((sizeof ((c) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof ((c) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? ((c) + (unsigned) 0) < ((0x80) + (unsigned) 0) : ((c) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) ? ({struct Lisp_Char_Table *_tbl = ((void *)0); Lisp_Object _val; do { _tbl = _tbl ? (((void) (0 && (((((enum Lisp_Type) (((_tbl->parent)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike)))) : (((void) (0 && (((((enum Lisp_Type) ((((upcase_table))) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) (((upcase_table)) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) (((upcase_table)) - (Lisp_Vectorlike)))); _val = (! ((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS)))) ? _tbl->ascii : (((void) (0 && (((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), ((struct Lisp_Sub_Char_Table *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike)))))->contents[(c)]); if (((_val) == (Qnil))) _val = _tbl->defalt; } while (((_val) == (Qnil)) && ! ((_tbl->parent) == (Qnil))); _val; }) : char_table_ref ((upcase_table), (c)));
  return (((((((enum Lisp_Type) (((up)) & TYPEMASK))) & ~Lisp_Int1) == 0)) && ((up) >> INTTYPEBITS) >= 0) ? (((up) >> INTTYPEBITS)) : c;
}


extern inline __attribute__ ((__gnu_inline__)) _Bool
lowercasep (int c)
{
  return !uppercasep (c) && upcase1 (c) != c;
}


extern inline __attribute__ ((__gnu_inline__)) int upcase (int c) { return uppercasep (c) ? c : upcase1 (c); }


# 1328 "buffer.h"
#pragma GCC diagnostic pop
# 1328 "buffer.h"

# 40 "bytecode.c" 2
# 1 "syntax.h" 1
# 22 "syntax.h"
extern void update_syntax_table (ptrdiff_t, EMACS_INT, int, Lisp_Object);
# 34 "syntax.h"
enum syntaxcode
  {
    Swhitespace,
    Spunct,
    Sword,
    Ssymbol,
    Sopen,
    Sclose,
    Squote,
    Sstring,
    Smath,
    Sescape,
    Scharquote,
    Scomment,
    Sendcomment,
    Sinherit,
    Scomment_fence,

    Sstring_fence,

    Smax
  };
# 133 "syntax.h"
extern int syntax_prefix_flag_p (int c);





extern unsigned char syntax_spec_code[0400];



extern char syntax_code_spec[16];
# 277 "syntax.h"
struct gl_state_s
{
  Lisp_Object object;
  ptrdiff_t start;
  ptrdiff_t stop;
  int use_global;

  Lisp_Object global_code;
  Lisp_Object current_syntax_table;
  Lisp_Object old_prop;
  ptrdiff_t b_property;
  ptrdiff_t e_property;

  INTERVAL forward_i;
  INTERVAL backward_i;






  ptrdiff_t offset;
};

extern struct gl_state_s gl_state;
extern ptrdiff_t scan_words (ptrdiff_t, EMACS_INT);
# 41 "bytecode.c" 2
# 1 "window.h" 1
# 23 "window.h"
# 1 "dispextern.h" 1
# 27 "dispextern.h"
# 1 "/usr/include/X11/Xlib.h" 1 3 4
# 47 "/usr/include/X11/Xlib.h" 3 4
# 1 "/usr/include/X11/Xfuncproto.h" 1 3 4
# 48 "/usr/include/X11/Xlib.h" 2 3 4
# 1 "/usr/include/X11/Xosdefs.h" 1 3 4
# 49 "/usr/include/X11/Xlib.h" 2 3 4


# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 52 "/usr/include/X11/Xlib.h" 2 3 4
# 69 "/usr/include/X11/Xlib.h" 3 4
extern int
_Xmblen(




    char *str,
    int len

    );





typedef char *XPointer;
# 156 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XExtData {
 int number;
 struct _XExtData *next;
 int (*free_private)(
 struct _XExtData *extension
 );
 XPointer private_data;
} XExtData;




typedef struct {
 int extension;
 int major_opcode;
 int first_event;
 int first_error;
} XExtCodes;





typedef struct {
    int depth;
    int bits_per_pixel;
    int scanline_pad;
} XPixmapFormatValues;





typedef struct {
 int function;
 unsigned long plane_mask;
 unsigned long foreground;
 unsigned long background;
 int line_width;
 int line_style;
 int cap_style;

 int join_style;
 int fill_style;

 int fill_rule;
 int arc_mode;
 Pixmap tile;
 Pixmap stipple;
 int ts_x_origin;
 int ts_y_origin;
        Font font;
 int subwindow_mode;
 int graphics_exposures;
 int clip_x_origin;
 int clip_y_origin;
 Pixmap clip_mask;
 int dash_offset;
 char dashes;
} XGCValues;






typedef struct _XGC







*GC;




typedef struct {
 XExtData *ext_data;
 VisualID visualid;



 int class;

 unsigned long red_mask, green_mask, blue_mask;
 int bits_per_rgb;
 int map_entries;
} Visual;




typedef struct {
 int depth;
 int nvisuals;
 Visual *visuals;
} Depth;







struct _XDisplay;

typedef struct {
 XExtData *ext_data;
 struct _XDisplay *display;
 Window root;
 int width, height;
 int mwidth, mheight;
 int ndepths;
 Depth *depths;
 int root_depth;
 Visual *root_visual;
 GC default_gc;
 Colormap cmap;
 unsigned long white_pixel;
 unsigned long black_pixel;
 int max_maps, min_maps;
 int backing_store;
 int save_unders;
 long root_input_mask;
} Screen;




typedef struct {
 XExtData *ext_data;
 int depth;
 int bits_per_pixel;
 int scanline_pad;
} ScreenFormat;




typedef struct {
    Pixmap background_pixmap;
    unsigned long background_pixel;
    Pixmap border_pixmap;
    unsigned long border_pixel;
    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long backing_planes;
    unsigned long backing_pixel;
    int save_under;
    long event_mask;
    long do_not_propagate_mask;
    int override_redirect;
    Colormap colormap;
    Cursor cursor;
} XSetWindowAttributes;

typedef struct {
    int x, y;
    int width, height;
    int border_width;
    int depth;
    Visual *visual;
    Window root;



    int class;

    int bit_gravity;
    int win_gravity;
    int backing_store;
    unsigned long backing_planes;
    unsigned long backing_pixel;
    int save_under;
    Colormap colormap;
    int map_installed;
    int map_state;
    long all_event_masks;
    long your_event_mask;
    long do_not_propagate_mask;
    int override_redirect;
    Screen *screen;
} XWindowAttributes;






typedef struct {
 int family;
 int length;
 char *address;
} XHostAddress;




typedef struct {
 int typelength;
 int valuelength;
 char *type;
 char *value;
} XServerInterpretedAddress;




typedef struct _XImage {
    int width, height;
    int xoffset;
    int format;
    char *data;
    int byte_order;
    int bitmap_unit;
    int bitmap_bit_order;
    int bitmap_pad;
    int depth;
    int bytes_per_line;
    int bits_per_pixel;
    unsigned long red_mask;
    unsigned long green_mask;
    unsigned long blue_mask;
    XPointer obdata;
    struct funcs {
 struct _XImage *(*create_image)(
  struct _XDisplay* ,
  Visual* ,
  unsigned int ,
  int ,
  int ,
  char* ,
  unsigned int ,
  unsigned int ,
  int ,
  int );
 int (*destroy_image) (struct _XImage *);
 unsigned long (*get_pixel) (struct _XImage *, int, int);
 int (*put_pixel) (struct _XImage *, int, int, unsigned long);
 struct _XImage *(*sub_image)(struct _XImage *, int, int, unsigned int, unsigned int);
 int (*add_pixel) (struct _XImage *, long);
 } f;
} XImage;




typedef struct {
    int x, y;
    int width, height;
    int border_width;
    Window sibling;
    int stack_mode;
} XWindowChanges;




typedef struct {
 unsigned long pixel;
 unsigned short red, green, blue;
 char flags;
 char pad;
} XColor;






typedef struct {
    short x1, y1, x2, y2;
} XSegment;

typedef struct {
    short x, y;
} XPoint;

typedef struct {
    short x, y;
    unsigned short width, height;
} XRectangle;

typedef struct {
    short x, y;
    unsigned short width, height;
    short angle1, angle2;
} XArc;




typedef struct {
        int key_click_percent;
        int bell_percent;
        int bell_pitch;
        int bell_duration;
        int led;
        int led_mode;
        int key;
        int auto_repeat_mode;
} XKeyboardControl;



typedef struct {
        int key_click_percent;
 int bell_percent;
 unsigned int bell_pitch, bell_duration;
 unsigned long led_mask;
 int global_auto_repeat;
 char auto_repeats[32];
} XKeyboardState;



typedef struct {
        Time time;
 short x, y;
} XTimeCoord;



typedef struct {
  int max_keypermod;
  KeyCode *modifiermap;
} XModifierKeymap;
# 495 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XDisplay Display;


struct _XPrivate;
struct _XrmHashBucketRec;

typedef struct



{
 XExtData *ext_data;
 struct _XPrivate *private1;
 int fd;
 int private2;
 int proto_major_version;
 int proto_minor_version;
 char *vendor;
        XID private3;
 XID private4;
 XID private5;
 int private6;
 XID (*resource_alloc)(
  struct _XDisplay*
 );
 int byte_order;
 int bitmap_unit;
 int bitmap_pad;
 int bitmap_bit_order;
 int nformats;
 ScreenFormat *pixmap_format;
 int private8;
 int release;
 struct _XPrivate *private9, *private10;
 int qlen;
 unsigned long last_request_read;
 unsigned long request;
 XPointer private11;
 XPointer private12;
 XPointer private13;
 XPointer private14;
 unsigned max_request_size;
 struct _XrmHashBucketRec *db;
 int (*private15)(
  struct _XDisplay*
  );
 char *display_name;
 int default_screen;
 int nscreens;
 Screen *screens;
 unsigned long motion_buffer;
 unsigned long private16;
 int min_keycode;
 int max_keycode;
 XPointer private17;
 XPointer private18;
 int private19;
 char *xdefaults;

}



*_XPrivDisplay;






typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 unsigned int keycode;
 int same_screen;
} XKeyEvent;
typedef XKeyEvent XKeyPressedEvent;
typedef XKeyEvent XKeyReleasedEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 unsigned int button;
 int same_screen;
} XButtonEvent;
typedef XButtonEvent XButtonPressedEvent;
typedef XButtonEvent XButtonReleasedEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 unsigned int state;
 char is_hint;
 int same_screen;
} XMotionEvent;
typedef XMotionEvent XPointerMovedEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Window root;
 Window subwindow;
 Time time;
 int x, y;
 int x_root, y_root;
 int mode;
 int detail;




 int same_screen;
 int focus;
 unsigned int state;
} XCrossingEvent;
typedef XCrossingEvent XEnterWindowEvent;
typedef XCrossingEvent XLeaveWindowEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int mode;

 int detail;





} XFocusChangeEvent;
typedef XFocusChangeEvent XFocusInEvent;
typedef XFocusChangeEvent XFocusOutEvent;


typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 char key_vector[32];
} XKeymapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int x, y;
 int width, height;
 int count;
} XExposeEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Drawable drawable;
 int x, y;
 int width, height;
 int count;
 int major_code;
 int minor_code;
} XGraphicsExposeEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Drawable drawable;
 int major_code;
 int minor_code;
} XNoExposeEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int state;
} XVisibilityEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 int override_redirect;
} XCreateWindowEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
} XDestroyWindowEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int from_configure;
} XUnmapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int override_redirect;
} XMapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
} XMapRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 Window parent;
 int x, y;
 int override_redirect;
} XReparentEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 Window above;
 int override_redirect;
} XConfigureEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int x, y;
} XGravityEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int width, height;
} XResizeRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int x, y;
 int width, height;
 int border_width;
 Window above;
 int detail;
 unsigned long value_mask;
} XConfigureRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window event;
 Window window;
 int place;
} XCirculateEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window parent;
 Window window;
 int place;
} XCirculateRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom atom;
 Time time;
 int state;
} XPropertyEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom selection;
 Time time;
} XSelectionClearEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window owner;
 Window requestor;
 Atom selection;
 Atom target;
 Atom property;
 Time time;
} XSelectionRequestEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window requestor;
 Atom selection;
 Atom target;
 Atom property;
 Time time;
} XSelectionEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Colormap colormap;



 int new;

 int state;
} XColormapEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 Atom message_type;
 int format;
 union {
  char b[20];
  short s[10];
  long l[5];
  } data;
} XClientMessageEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
 int request;

 int first_keycode;
 int count;
} XMappingEvent;

typedef struct {
 int type;
 Display *display;
 XID resourceid;
 unsigned long serial;
 unsigned char error_code;
 unsigned char request_code;
 unsigned char minor_code;
} XErrorEvent;

typedef struct {
 int type;
 unsigned long serial;
 int send_event;
 Display *display;
 Window window;
} XAnyEvent;







typedef struct
    {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    int extension;
    int evtype;
    } XGenericEvent;

typedef struct {
    int type;
    unsigned long serial;
    int send_event;
    Display *display;
    int extension;
    int evtype;
    unsigned int cookie;
    void *data;
} XGenericEventCookie;





typedef union _XEvent {
        int type;
 XAnyEvent xany;
 XKeyEvent xkey;
 XButtonEvent xbutton;
 XMotionEvent xmotion;
 XCrossingEvent xcrossing;
 XFocusChangeEvent xfocus;
 XExposeEvent xexpose;
 XGraphicsExposeEvent xgraphicsexpose;
 XNoExposeEvent xnoexpose;
 XVisibilityEvent xvisibility;
 XCreateWindowEvent xcreatewindow;
 XDestroyWindowEvent xdestroywindow;
 XUnmapEvent xunmap;
 XMapEvent xmap;
 XMapRequestEvent xmaprequest;
 XReparentEvent xreparent;
 XConfigureEvent xconfigure;
 XGravityEvent xgravity;
 XResizeRequestEvent xresizerequest;
 XConfigureRequestEvent xconfigurerequest;
 XCirculateEvent xcirculate;
 XCirculateRequestEvent xcirculaterequest;
 XPropertyEvent xproperty;
 XSelectionClearEvent xselectionclear;
 XSelectionRequestEvent xselectionrequest;
 XSelectionEvent xselection;
 XColormapEvent xcolormap;
 XClientMessageEvent xclient;
 XMappingEvent xmapping;
 XErrorEvent xerror;
 XKeymapEvent xkeymap;
 XGenericEvent xgeneric;
 XGenericEventCookie xcookie;
 long pad[24];
} XEvent;







typedef struct {
    short lbearing;
    short rbearing;
    short width;
    short ascent;
    short descent;
    unsigned short attributes;
} XCharStruct;





typedef struct {
    Atom name;
    unsigned long card32;
} XFontProp;

typedef struct {
    XExtData *ext_data;
    Font fid;
    unsigned direction;
    unsigned min_char_or_byte2;
    unsigned max_char_or_byte2;
    unsigned min_byte1;
    unsigned max_byte1;
    int all_chars_exist;
    unsigned default_char;
    int n_properties;
    XFontProp *properties;
    XCharStruct min_bounds;
    XCharStruct max_bounds;
    XCharStruct *per_char;
    int ascent;
    int descent;
} XFontStruct;




typedef struct {
    char *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem;

typedef struct {
    unsigned char byte1;
    unsigned char byte2;
} XChar2b;

typedef struct {
    XChar2b *chars;
    int nchars;
    int delta;
    Font font;
} XTextItem16;


typedef union { Display *display;
  GC gc;
  Visual *visual;
  Screen *screen;
  ScreenFormat *pixmap_format;
  XFontStruct *font; } XEDataObject;

typedef struct {
    XRectangle max_ink_extent;
    XRectangle max_logical_extent;
} XFontSetExtents;





typedef struct _XOM *XOM;
typedef struct _XOC *XOC, *XFontSet;

typedef struct {
    char *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XmbTextItem;

typedef struct {
    wchar_t *chars;
    int nchars;
    int delta;
    XFontSet font_set;
} XwcTextItem;
# 1129 "/usr/include/X11/Xlib.h" 3 4
typedef struct {
    int charset_count;
    char **charset_list;
} XOMCharSetList;

typedef enum {
    XOMOrientation_LTR_TTB,
    XOMOrientation_RTL_TTB,
    XOMOrientation_TTB_LTR,
    XOMOrientation_TTB_RTL,
    XOMOrientation_Context
} XOrientation;

typedef struct {
    int num_orientation;
    XOrientation *orientation;
} XOMOrientation;

typedef struct {
    int num_font;
    XFontStruct **font_struct_list;
    char **font_name_list;
} XOMFontInfo;

typedef struct _XIM *XIM;
typedef struct _XIC *XIC;

typedef void (*XIMProc)(
    XIM,
    XPointer,
    XPointer
);

typedef int (*XICProc)(
    XIC,
    XPointer,
    XPointer
);

typedef void (*XIDProc)(
    Display*,
    XPointer,
    XPointer
);

typedef unsigned long XIMStyle;

typedef struct {
    unsigned short count_styles;
    XIMStyle *supported_styles;
} XIMStyles;
# 1241 "/usr/include/X11/Xlib.h" 3 4
typedef void *XVaNestedList;

typedef struct {
    XPointer client_data;
    XIMProc callback;
} XIMCallback;

typedef struct {
    XPointer client_data;
    XICProc callback;
} XICCallback;

typedef unsigned long XIMFeedback;
# 1265 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XIMText {
    unsigned short length;
    XIMFeedback *feedback;
    int encoding_is_wchar;
    union {
 char *multi_byte;
 wchar_t *wide_char;
    } string;
} XIMText;

typedef unsigned long XIMPreeditState;





typedef struct _XIMPreeditStateNotifyCallbackStruct {
    XIMPreeditState state;
} XIMPreeditStateNotifyCallbackStruct;

typedef unsigned long XIMResetState;




typedef unsigned long XIMStringConversionFeedback;
# 1299 "/usr/include/X11/Xlib.h" 3 4
typedef struct _XIMStringConversionText {
    unsigned short length;
    XIMStringConversionFeedback *feedback;
    int encoding_is_wchar;
    union {
 char *mbs;
 wchar_t *wcs;
    } string;
} XIMStringConversionText;

typedef unsigned short XIMStringConversionPosition;

typedef unsigned short XIMStringConversionType;






typedef unsigned short XIMStringConversionOperation;




typedef enum {
    XIMForwardChar, XIMBackwardChar,
    XIMForwardWord, XIMBackwardWord,
    XIMCaretUp, XIMCaretDown,
    XIMNextLine, XIMPreviousLine,
    XIMLineStart, XIMLineEnd,
    XIMAbsolutePosition,
    XIMDontChange
} XIMCaretDirection;

typedef struct _XIMStringConversionCallbackStruct {
    XIMStringConversionPosition position;
    XIMCaretDirection direction;
    XIMStringConversionOperation operation;
    unsigned short factor;
    XIMStringConversionText *text;
} XIMStringConversionCallbackStruct;

typedef struct _XIMPreeditDrawCallbackStruct {
    int caret;
    int chg_first;
    int chg_length;
    XIMText *text;
} XIMPreeditDrawCallbackStruct;

typedef enum {
    XIMIsInvisible,
    XIMIsPrimary,
    XIMIsSecondary
} XIMCaretStyle;

typedef struct _XIMPreeditCaretCallbackStruct {
    int position;
    XIMCaretDirection direction;
    XIMCaretStyle style;
} XIMPreeditCaretCallbackStruct;

typedef enum {
    XIMTextType,
    XIMBitmapType
} XIMStatusDataType;

typedef struct _XIMStatusDrawCallbackStruct {
    XIMStatusDataType type;
    union {
 XIMText *text;
 Pixmap bitmap;
    } data;
} XIMStatusDrawCallbackStruct;

typedef struct _XIMHotKeyTrigger {
    KeySym keysym;
    int modifier;
    int modifier_mask;
} XIMHotKeyTrigger;

typedef struct _XIMHotKeyTriggers {
    int num_hot_key;
    XIMHotKeyTrigger *key;
} XIMHotKeyTriggers;

typedef unsigned long XIMHotKeyState;




typedef struct {
    unsigned short count_values;
    char **supported_values;
} XIMValuesList;







extern int _Xdebug;

extern XFontStruct *XLoadQueryFont(
    Display* ,
    const char*
);

extern XFontStruct *XQueryFont(
    Display* ,
    XID
);


extern XTimeCoord *XGetMotionEvents(
    Display* ,
    Window ,
    Time ,
    Time ,
    int*
);

extern XModifierKeymap *XDeleteModifiermapEntry(
    XModifierKeymap* ,



    KeyCode ,

    int
);

extern XModifierKeymap *XGetModifierMapping(
    Display*
);

extern XModifierKeymap *XInsertModifiermapEntry(
    XModifierKeymap* ,



    KeyCode ,

    int
);

extern XModifierKeymap *XNewModifiermap(
    int
);

extern XImage *XCreateImage(
    Display* ,
    Visual* ,
    unsigned int ,
    int ,
    int ,
    char* ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);
extern int XInitImage(
    XImage*
);
extern XImage *XGetImage(
    Display* ,
    Drawable ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    int
);
extern XImage *XGetSubImage(
    Display* ,
    Drawable ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    int ,
    XImage* ,
    int ,
    int
);




extern Display *XOpenDisplay(
    const char*
);

extern void XrmInitialize(
    void
);

extern char *XFetchBytes(
    Display* ,
    int*
);
extern char *XFetchBuffer(
    Display* ,
    int* ,
    int
);
extern char *XGetAtomName(
    Display* ,
    Atom
);
extern int XGetAtomNames(
    Display* ,
    Atom* ,
    int ,
    char**
);
extern char *XGetDefault(
    Display* ,
    const char* ,
    const char*
);
extern char *XDisplayName(
    const char*
);
extern char *XKeysymToString(
    KeySym
);

extern int (*XSynchronize(
    Display* ,
    int
))(
    Display*
);
extern int (*XSetAfterFunction(
    Display* ,
    int (*) (
      Display*
            )
))(
    Display*
);
extern Atom XInternAtom(
    Display* ,
    const char* ,
    int
);
extern int XInternAtoms(
    Display* ,
    char** ,
    int ,
    int ,
    Atom*
);
extern Colormap XCopyColormapAndFree(
    Display* ,
    Colormap
);
extern Colormap XCreateColormap(
    Display* ,
    Window ,
    Visual* ,
    int
);
extern Cursor XCreatePixmapCursor(
    Display* ,
    Pixmap ,
    Pixmap ,
    XColor* ,
    XColor* ,
    unsigned int ,
    unsigned int
);
extern Cursor XCreateGlyphCursor(
    Display* ,
    Font ,
    Font ,
    unsigned int ,
    unsigned int ,
    XColor const * ,
    XColor const *
);
extern Cursor XCreateFontCursor(
    Display* ,
    unsigned int
);
extern Font XLoadFont(
    Display* ,
    const char*
);
extern GC XCreateGC(
    Display* ,
    Drawable ,
    unsigned long ,
    XGCValues*
);
extern GContext XGContextFromGC(
    GC
);
extern void XFlushGC(
    Display* ,
    GC
);
extern Pixmap XCreatePixmap(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int
);
extern Pixmap XCreateBitmapFromData(
    Display* ,
    Drawable ,
    const char* ,
    unsigned int ,
    unsigned int
);
extern Pixmap XCreatePixmapFromBitmapData(
    Display* ,
    Drawable ,
    char* ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    unsigned long ,
    unsigned int
);
extern Window XCreateSimpleWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    unsigned long ,
    unsigned long
);
extern Window XGetSelectionOwner(
    Display* ,
    Atom
);
extern Window XCreateWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    int ,
    unsigned int ,
    Visual* ,
    unsigned long ,
    XSetWindowAttributes*
);
extern Colormap *XListInstalledColormaps(
    Display* ,
    Window ,
    int*
);
extern char **XListFonts(
    Display* ,
    const char* ,
    int ,
    int*
);
extern char **XListFontsWithInfo(
    Display* ,
    const char* ,
    int ,
    int* ,
    XFontStruct**
);
extern char **XGetFontPath(
    Display* ,
    int*
);
extern char **XListExtensions(
    Display* ,
    int*
);
extern Atom *XListProperties(
    Display* ,
    Window ,
    int*
);
extern XHostAddress *XListHosts(
    Display* ,
    int* ,
    int*
);
__attribute__((deprecated))
extern KeySym XKeycodeToKeysym(
    Display* ,



    KeyCode ,

    int
);
extern KeySym XLookupKeysym(
    XKeyEvent* ,
    int
);
extern KeySym *XGetKeyboardMapping(
    Display* ,



    KeyCode ,

    int ,
    int*
);
extern KeySym XStringToKeysym(
    const char*
);
extern long XMaxRequestSize(
    Display*
);
extern long XExtendedMaxRequestSize(
    Display*
);
extern char *XResourceManagerString(
    Display*
);
extern char *XScreenResourceString(
 Screen*
);
extern unsigned long XDisplayMotionBufferSize(
    Display*
);
extern VisualID XVisualIDFromVisual(
    Visual*
);



extern int XInitThreads(
    void
);

extern void XLockDisplay(
    Display*
);

extern void XUnlockDisplay(
    Display*
);



extern XExtCodes *XInitExtension(
    Display* ,
    const char*
);

extern XExtCodes *XAddExtension(
    Display*
);
extern XExtData *XFindOnExtensionList(
    XExtData** ,
    int
);
extern XExtData **XEHeadOfExtensionList(
    XEDataObject
);


extern Window XRootWindow(
    Display* ,
    int
);
extern Window XDefaultRootWindow(
    Display*
);
extern Window XRootWindowOfScreen(
    Screen*
);
extern Visual *XDefaultVisual(
    Display* ,
    int
);
extern Visual *XDefaultVisualOfScreen(
    Screen*
);
extern GC XDefaultGC(
    Display* ,
    int
);
extern GC XDefaultGCOfScreen(
    Screen*
);
extern unsigned long XBlackPixel(
    Display* ,
    int
);
extern unsigned long XWhitePixel(
    Display* ,
    int
);
extern unsigned long XAllPlanes(
    void
);
extern unsigned long XBlackPixelOfScreen(
    Screen*
);
extern unsigned long XWhitePixelOfScreen(
    Screen*
);
extern unsigned long XNextRequest(
    Display*
);
extern unsigned long XLastKnownRequestProcessed(
    Display*
);
extern char *XServerVendor(
    Display*
);
extern char *XDisplayString(
    Display*
);
extern Colormap XDefaultColormap(
    Display* ,
    int
);
extern Colormap XDefaultColormapOfScreen(
    Screen*
);
extern Display *XDisplayOfScreen(
    Screen*
);
extern Screen *XScreenOfDisplay(
    Display* ,
    int
);
extern Screen *XDefaultScreenOfDisplay(
    Display*
);
extern long XEventMaskOfScreen(
    Screen*
);

extern int XScreenNumberOfScreen(
    Screen*
);

typedef int (*XErrorHandler) (
    Display* ,
    XErrorEvent*
);

extern XErrorHandler XSetErrorHandler (
    XErrorHandler
);


typedef int (*XIOErrorHandler) (
    Display*
);

extern XIOErrorHandler XSetIOErrorHandler (
    XIOErrorHandler
);


extern XPixmapFormatValues *XListPixmapFormats(
    Display* ,
    int*
);
extern int *XListDepths(
    Display* ,
    int ,
    int*
);



extern int XReconfigureWMWindow(
    Display* ,
    Window ,
    int ,
    unsigned int ,
    XWindowChanges*
);

extern int XGetWMProtocols(
    Display* ,
    Window ,
    Atom** ,
    int*
);
extern int XSetWMProtocols(
    Display* ,
    Window ,
    Atom* ,
    int
);
extern int XIconifyWindow(
    Display* ,
    Window ,
    int
);
extern int XWithdrawWindow(
    Display* ,
    Window ,
    int
);
extern int XGetCommand(
    Display* ,
    Window ,
    char*** ,
    int*
);
extern int XGetWMColormapWindows(
    Display* ,
    Window ,
    Window** ,
    int*
);
extern int XSetWMColormapWindows(
    Display* ,
    Window ,
    Window* ,
    int
);
extern void XFreeStringList(
    char**
);
extern int XSetTransientForHint(
    Display* ,
    Window ,
    Window
);



extern int XActivateScreenSaver(
    Display*
);

extern int XAddHost(
    Display* ,
    XHostAddress*
);

extern int XAddHosts(
    Display* ,
    XHostAddress* ,
    int
);

extern int XAddToExtensionList(
    struct _XExtData** ,
    XExtData*
);

extern int XAddToSaveSet(
    Display* ,
    Window
);

extern int XAllocColor(
    Display* ,
    Colormap ,
    XColor*
);

extern int XAllocColorCells(
    Display* ,
    Colormap ,
    int ,
    unsigned long* ,
    unsigned int ,
    unsigned long* ,
    unsigned int
);

extern int XAllocColorPlanes(
    Display* ,
    Colormap ,
    int ,
    unsigned long* ,
    int ,
    int ,
    int ,
    int ,
    unsigned long* ,
    unsigned long* ,
    unsigned long*
);

extern int XAllocNamedColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor* ,
    XColor*
);

extern int XAllowEvents(
    Display* ,
    int ,
    Time
);

extern int XAutoRepeatOff(
    Display*
);

extern int XAutoRepeatOn(
    Display*
);

extern int XBell(
    Display* ,
    int
);

extern int XBitmapBitOrder(
    Display*
);

extern int XBitmapPad(
    Display*
);

extern int XBitmapUnit(
    Display*
);

extern int XCellsOfScreen(
    Screen*
);

extern int XChangeActivePointerGrab(
    Display* ,
    unsigned int ,
    Cursor ,
    Time
);

extern int XChangeGC(
    Display* ,
    GC ,
    unsigned long ,
    XGCValues*
);

extern int XChangeKeyboardControl(
    Display* ,
    unsigned long ,
    XKeyboardControl*
);

extern int XChangeKeyboardMapping(
    Display* ,
    int ,
    int ,
    KeySym* ,
    int
);

extern int XChangePointerControl(
    Display* ,
    int ,
    int ,
    int ,
    int ,
    int
);

extern int XChangeProperty(
    Display* ,
    Window ,
    Atom ,
    Atom ,
    int ,
    int ,
    const unsigned char* ,
    int
);

extern int XChangeSaveSet(
    Display* ,
    Window ,
    int
);

extern int XChangeWindowAttributes(
    Display* ,
    Window ,
    unsigned long ,
    XSetWindowAttributes*
);

extern int XCheckIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);

extern int XCheckMaskEvent(
    Display* ,
    long ,
    XEvent*
);

extern int XCheckTypedEvent(
    Display* ,
    int ,
    XEvent*
);

extern int XCheckTypedWindowEvent(
    Display* ,
    Window ,
    int ,
    XEvent*
);

extern int XCheckWindowEvent(
    Display* ,
    Window ,
    long ,
    XEvent*
);

extern int XCirculateSubwindows(
    Display* ,
    Window ,
    int
);

extern int XCirculateSubwindowsDown(
    Display* ,
    Window
);

extern int XCirculateSubwindowsUp(
    Display* ,
    Window
);

extern int XClearArea(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int
);

extern int XClearWindow(
    Display* ,
    Window
);

extern int XCloseDisplay(
    Display*
);

extern int XConfigureWindow(
    Display* ,
    Window ,
    unsigned int ,
    XWindowChanges*
);

extern int XConnectionNumber(
    Display*
);

extern int XConvertSelection(
    Display* ,
    Atom ,
    Atom ,
    Atom ,
    Window ,
    Time
);

extern int XCopyArea(
    Display* ,
    Drawable ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XCopyGC(
    Display* ,
    GC ,
    unsigned long ,
    GC
);

extern int XCopyPlane(
    Display* ,
    Drawable ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int ,
    unsigned long
);

extern int XDefaultDepth(
    Display* ,
    int
);

extern int XDefaultDepthOfScreen(
    Screen*
);

extern int XDefaultScreen(
    Display*
);

extern int XDefineCursor(
    Display* ,
    Window ,
    Cursor
);

extern int XDeleteProperty(
    Display* ,
    Window ,
    Atom
);

extern int XDestroyWindow(
    Display* ,
    Window
);

extern int XDestroySubwindows(
    Display* ,
    Window
);

extern int XDoesBackingStore(
    Screen*
);

extern int XDoesSaveUnders(
    Screen*
);

extern int XDisableAccessControl(
    Display*
);


extern int XDisplayCells(
    Display* ,
    int
);

extern int XDisplayHeight(
    Display* ,
    int
);

extern int XDisplayHeightMM(
    Display* ,
    int
);

extern int XDisplayKeycodes(
    Display* ,
    int* ,
    int*
);

extern int XDisplayPlanes(
    Display* ,
    int
);

extern int XDisplayWidth(
    Display* ,
    int
);

extern int XDisplayWidthMM(
    Display* ,
    int
);

extern int XDrawArc(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XDrawArcs(
    Display* ,
    Drawable ,
    GC ,
    XArc* ,
    int
);

extern int XDrawImageString(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern int XDrawImageString16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const XChar2b* ,
    int
);

extern int XDrawLine(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    int ,
    int
);

extern int XDrawLines(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int
);

extern int XDrawPoint(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int
);

extern int XDrawPoints(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int
);

extern int XDrawRectangle(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XDrawRectangles(
    Display* ,
    Drawable ,
    GC ,
    XRectangle* ,
    int
);

extern int XDrawSegments(
    Display* ,
    Drawable ,
    GC ,
    XSegment* ,
    int
);

extern int XDrawString(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern int XDrawString16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    const XChar2b* ,
    int
);

extern int XDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XTextItem* ,
    int
);

extern int XDrawText16(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XTextItem16* ,
    int
);

extern int XEnableAccessControl(
    Display*
);

extern int XEventsQueued(
    Display* ,
    int
);

extern int XFetchName(
    Display* ,
    Window ,
    char**
);

extern int XFillArc(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XFillArcs(
    Display* ,
    Drawable ,
    GC ,
    XArc* ,
    int
);

extern int XFillPolygon(
    Display* ,
    Drawable ,
    GC ,
    XPoint* ,
    int ,
    int ,
    int
);

extern int XFillRectangle(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XFillRectangles(
    Display* ,
    Drawable ,
    GC ,
    XRectangle* ,
    int
);

extern int XFlush(
    Display*
);

extern int XForceScreenSaver(
    Display* ,
    int
);

extern int XFree(
    void*
);

extern int XFreeColormap(
    Display* ,
    Colormap
);

extern int XFreeColors(
    Display* ,
    Colormap ,
    unsigned long* ,
    int ,
    unsigned long
);

extern int XFreeCursor(
    Display* ,
    Cursor
);

extern int XFreeExtensionList(
    char**
);

extern int XFreeFont(
    Display* ,
    XFontStruct*
);

extern int XFreeFontInfo(
    char** ,
    XFontStruct* ,
    int
);

extern int XFreeFontNames(
    char**
);

extern int XFreeFontPath(
    char**
);

extern int XFreeGC(
    Display* ,
    GC
);

extern int XFreeModifiermap(
    XModifierKeymap*
);

extern int XFreePixmap(
    Display* ,
    Pixmap
);

extern int XGeometry(
    Display* ,
    int ,
    const char* ,
    const char* ,
    unsigned int ,
    unsigned int ,
    unsigned int ,
    int ,
    int ,
    int* ,
    int* ,
    int* ,
    int*
);

extern int XGetErrorDatabaseText(
    Display* ,
    const char* ,
    const char* ,
    const char* ,
    char* ,
    int
);

extern int XGetErrorText(
    Display* ,
    int ,
    char* ,
    int
);

extern int XGetFontProperty(
    XFontStruct* ,
    Atom ,
    unsigned long*
);

extern int XGetGCValues(
    Display* ,
    GC ,
    unsigned long ,
    XGCValues*
);

extern int XGetGeometry(
    Display* ,
    Drawable ,
    Window* ,
    int* ,
    int* ,
    unsigned int* ,
    unsigned int* ,
    unsigned int* ,
    unsigned int*
);

extern int XGetIconName(
    Display* ,
    Window ,
    char**
);

extern int XGetInputFocus(
    Display* ,
    Window* ,
    int*
);

extern int XGetKeyboardControl(
    Display* ,
    XKeyboardState*
);

extern int XGetPointerControl(
    Display* ,
    int* ,
    int* ,
    int*
);

extern int XGetPointerMapping(
    Display* ,
    unsigned char* ,
    int
);

extern int XGetScreenSaver(
    Display* ,
    int* ,
    int* ,
    int* ,
    int*
);

extern int XGetTransientForHint(
    Display* ,
    Window ,
    Window*
);

extern int XGetWindowProperty(
    Display* ,
    Window ,
    Atom ,
    long ,
    long ,
    int ,
    Atom ,
    Atom* ,
    int* ,
    unsigned long* ,
    unsigned long* ,
    unsigned char**
);

extern int XGetWindowAttributes(
    Display* ,
    Window ,
    XWindowAttributes*
);

extern int XGrabButton(
    Display* ,
    unsigned int ,
    unsigned int ,
    Window ,
    int ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor
);

extern int XGrabKey(
    Display* ,
    int ,
    unsigned int ,
    Window ,
    int ,
    int ,
    int
);

extern int XGrabKeyboard(
    Display* ,
    Window ,
    int ,
    int ,
    int ,
    Time
);

extern int XGrabPointer(
    Display* ,
    Window ,
    int ,
    unsigned int ,
    int ,
    int ,
    Window ,
    Cursor ,
    Time
);

extern int XGrabServer(
    Display*
);

extern int XHeightMMOfScreen(
    Screen*
);

extern int XHeightOfScreen(
    Screen*
);

extern int XIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);

extern int XImageByteOrder(
    Display*
);

extern int XInstallColormap(
    Display* ,
    Colormap
);

extern KeyCode XKeysymToKeycode(
    Display* ,
    KeySym
);

extern int XKillClient(
    Display* ,
    XID
);

extern int XLookupColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor* ,
    XColor*
);

extern int XLowerWindow(
    Display* ,
    Window
);

extern int XMapRaised(
    Display* ,
    Window
);

extern int XMapSubwindows(
    Display* ,
    Window
);

extern int XMapWindow(
    Display* ,
    Window
);

extern int XMaskEvent(
    Display* ,
    long ,
    XEvent*
);

extern int XMaxCmapsOfScreen(
    Screen*
);

extern int XMinCmapsOfScreen(
    Screen*
);

extern int XMoveResizeWindow(
    Display* ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XMoveWindow(
    Display* ,
    Window ,
    int ,
    int
);

extern int XNextEvent(
    Display* ,
    XEvent*
);

extern int XNoOp(
    Display*
);

extern int XParseColor(
    Display* ,
    Colormap ,
    const char* ,
    XColor*
);

extern int XParseGeometry(
    const char* ,
    int* ,
    int* ,
    unsigned int* ,
    unsigned int*
);

extern int XPeekEvent(
    Display* ,
    XEvent*
);

extern int XPeekIfEvent(
    Display* ,
    XEvent* ,
    int (*) (
        Display* ,
               XEvent* ,
               XPointer
             ) ,
    XPointer
);

extern int XPending(
    Display*
);

extern int XPlanesOfScreen(
    Screen*
);

extern int XProtocolRevision(
    Display*
);

extern int XProtocolVersion(
    Display*
);


extern int XPutBackEvent(
    Display* ,
    XEvent*
);

extern int XPutImage(
    Display* ,
    Drawable ,
    GC ,
    XImage* ,
    int ,
    int ,
    int ,
    int ,
    unsigned int ,
    unsigned int
);

extern int XQLength(
    Display*
);

extern int XQueryBestCursor(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryBestSize(
    Display* ,
    int ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryBestStipple(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryBestTile(
    Display* ,
    Drawable ,
    unsigned int ,
    unsigned int ,
    unsigned int* ,
    unsigned int*
);

extern int XQueryColor(
    Display* ,
    Colormap ,
    XColor*
);

extern int XQueryColors(
    Display* ,
    Colormap ,
    XColor* ,
    int
);

extern int XQueryExtension(
    Display* ,
    const char* ,
    int* ,
    int* ,
    int*
);

extern int XQueryKeymap(
    Display* ,
    char [32]
);

extern int XQueryPointer(
    Display* ,
    Window ,
    Window* ,
    Window* ,
    int* ,
    int* ,
    int* ,
    int* ,
    unsigned int*
);

extern int XQueryTextExtents(
    Display* ,
    XID ,
    const char* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XQueryTextExtents16(
    Display* ,
    XID ,
    const XChar2b* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XQueryTree(
    Display* ,
    Window ,
    Window* ,
    Window* ,
    Window** ,
    unsigned int*
);

extern int XRaiseWindow(
    Display* ,
    Window
);

extern int XReadBitmapFile(
    Display* ,
    Drawable ,
    const char* ,
    unsigned int* ,
    unsigned int* ,
    Pixmap* ,
    int* ,
    int*
);

extern int XReadBitmapFileData(
    const char* ,
    unsigned int* ,
    unsigned int* ,
    unsigned char** ,
    int* ,
    int*
);

extern int XRebindKeysym(
    Display* ,
    KeySym ,
    KeySym* ,
    int ,
    const unsigned char* ,
    int
);

extern int XRecolorCursor(
    Display* ,
    Cursor ,
    XColor* ,
    XColor*
);

extern int XRefreshKeyboardMapping(
    XMappingEvent*
);

extern int XRemoveFromSaveSet(
    Display* ,
    Window
);

extern int XRemoveHost(
    Display* ,
    XHostAddress*
);

extern int XRemoveHosts(
    Display* ,
    XHostAddress* ,
    int
);

extern int XReparentWindow(
    Display* ,
    Window ,
    Window ,
    int ,
    int
);

extern int XResetScreenSaver(
    Display*
);

extern int XResizeWindow(
    Display* ,
    Window ,
    unsigned int ,
    unsigned int
);

extern int XRestackWindows(
    Display* ,
    Window* ,
    int
);

extern int XRotateBuffers(
    Display* ,
    int
);

extern int XRotateWindowProperties(
    Display* ,
    Window ,
    Atom* ,
    int ,
    int
);

extern int XScreenCount(
    Display*
);

extern int XSelectInput(
    Display* ,
    Window ,
    long
);

extern int XSendEvent(
    Display* ,
    Window ,
    int ,
    long ,
    XEvent*
);

extern int XSetAccessControl(
    Display* ,
    int
);

extern int XSetArcMode(
    Display* ,
    GC ,
    int
);

extern int XSetBackground(
    Display* ,
    GC ,
    unsigned long
);

extern int XSetClipMask(
    Display* ,
    GC ,
    Pixmap
);

extern int XSetClipOrigin(
    Display* ,
    GC ,
    int ,
    int
);

extern int XSetClipRectangles(
    Display* ,
    GC ,
    int ,
    int ,
    XRectangle* ,
    int ,
    int
);

extern int XSetCloseDownMode(
    Display* ,
    int
);

extern int XSetCommand(
    Display* ,
    Window ,
    char** ,
    int
);

extern int XSetDashes(
    Display* ,
    GC ,
    int ,
    const char* ,
    int
);

extern int XSetFillRule(
    Display* ,
    GC ,
    int
);

extern int XSetFillStyle(
    Display* ,
    GC ,
    int
);

extern int XSetFont(
    Display* ,
    GC ,
    Font
);

extern int XSetFontPath(
    Display* ,
    char** ,
    int
);

extern int XSetForeground(
    Display* ,
    GC ,
    unsigned long
);

extern int XSetFunction(
    Display* ,
    GC ,
    int
);

extern int XSetGraphicsExposures(
    Display* ,
    GC ,
    int
);

extern int XSetIconName(
    Display* ,
    Window ,
    const char*
);

extern int XSetInputFocus(
    Display* ,
    Window ,
    int ,
    Time
);

extern int XSetLineAttributes(
    Display* ,
    GC ,
    unsigned int ,
    int ,
    int ,
    int
);

extern int XSetModifierMapping(
    Display* ,
    XModifierKeymap*
);

extern int XSetPlaneMask(
    Display* ,
    GC ,
    unsigned long
);

extern int XSetPointerMapping(
    Display* ,
    const unsigned char* ,
    int
);

extern int XSetScreenSaver(
    Display* ,
    int ,
    int ,
    int ,
    int
);

extern int XSetSelectionOwner(
    Display* ,
    Atom ,
    Window ,
    Time
);

extern int XSetState(
    Display* ,
    GC ,
    unsigned long ,
    unsigned long ,
    int ,
    unsigned long
);

extern int XSetStipple(
    Display* ,
    GC ,
    Pixmap
);

extern int XSetSubwindowMode(
    Display* ,
    GC ,
    int
);

extern int XSetTSOrigin(
    Display* ,
    GC ,
    int ,
    int
);

extern int XSetTile(
    Display* ,
    GC ,
    Pixmap
);

extern int XSetWindowBackground(
    Display* ,
    Window ,
    unsigned long
);

extern int XSetWindowBackgroundPixmap(
    Display* ,
    Window ,
    Pixmap
);

extern int XSetWindowBorder(
    Display* ,
    Window ,
    unsigned long
);

extern int XSetWindowBorderPixmap(
    Display* ,
    Window ,
    Pixmap
);

extern int XSetWindowBorderWidth(
    Display* ,
    Window ,
    unsigned int
);

extern int XSetWindowColormap(
    Display* ,
    Window ,
    Colormap
);

extern int XStoreBuffer(
    Display* ,
    const char* ,
    int ,
    int
);

extern int XStoreBytes(
    Display* ,
    const char* ,
    int
);

extern int XStoreColor(
    Display* ,
    Colormap ,
    XColor*
);

extern int XStoreColors(
    Display* ,
    Colormap ,
    XColor* ,
    int
);

extern int XStoreName(
    Display* ,
    Window ,
    const char*
);

extern int XStoreNamedColor(
    Display* ,
    Colormap ,
    const char* ,
    unsigned long ,
    int
);

extern int XSync(
    Display* ,
    int
);

extern int XTextExtents(
    XFontStruct* ,
    const char* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XTextExtents16(
    XFontStruct* ,
    const XChar2b* ,
    int ,
    int* ,
    int* ,
    int* ,
    XCharStruct*
);

extern int XTextWidth(
    XFontStruct* ,
    const char* ,
    int
);

extern int XTextWidth16(
    XFontStruct* ,
    const XChar2b* ,
    int
);

extern int XTranslateCoordinates(
    Display* ,
    Window ,
    Window ,
    int ,
    int ,
    int* ,
    int* ,
    Window*
);

extern int XUndefineCursor(
    Display* ,
    Window
);

extern int XUngrabButton(
    Display* ,
    unsigned int ,
    unsigned int ,
    Window
);

extern int XUngrabKey(
    Display* ,
    int ,
    unsigned int ,
    Window
);

extern int XUngrabKeyboard(
    Display* ,
    Time
);

extern int XUngrabPointer(
    Display* ,
    Time
);

extern int XUngrabServer(
    Display*
);

extern int XUninstallColormap(
    Display* ,
    Colormap
);

extern int XUnloadFont(
    Display* ,
    Font
);

extern int XUnmapSubwindows(
    Display* ,
    Window
);

extern int XUnmapWindow(
    Display* ,
    Window
);

extern int XVendorRelease(
    Display*
);

extern int XWarpPointer(
    Display* ,
    Window ,
    Window ,
    int ,
    int ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XWidthMMOfScreen(
    Screen*
);

extern int XWidthOfScreen(
    Screen*
);

extern int XWindowEvent(
    Display* ,
    Window ,
    long ,
    XEvent*
);

extern int XWriteBitmapFile(
    Display* ,
    const char* ,
    Pixmap ,
    unsigned int ,
    unsigned int ,
    int ,
    int
);

extern int XSupportsLocale (void);

extern char *XSetLocaleModifiers(
    const char*
);

extern XOM XOpenOM(
    Display* ,
    struct _XrmHashBucketRec* ,
    const char* ,
    const char*
);

extern int XCloseOM(
    XOM
);

extern char *XSetOMValues(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));

extern char *XGetOMValues(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));

extern Display *XDisplayOfOM(
    XOM
);

extern char *XLocaleOfOM(
    XOM
);

extern XOC XCreateOC(
    XOM ,
    ...
) __attribute__ ((__sentinel__(0)));

extern void XDestroyOC(
    XOC
);

extern XOM XOMOfOC(
    XOC
);

extern char *XSetOCValues(
    XOC ,
    ...
) __attribute__ ((__sentinel__(0)));

extern char *XGetOCValues(
    XOC ,
    ...
) __attribute__ ((__sentinel__(0)));

extern XFontSet XCreateFontSet(
    Display* ,
    const char* ,
    char*** ,
    int* ,
    char**
);

extern void XFreeFontSet(
    Display* ,
    XFontSet
);

extern int XFontsOfFontSet(
    XFontSet ,
    XFontStruct*** ,
    char***
);

extern char *XBaseFontNameListOfFontSet(
    XFontSet
);

extern char *XLocaleOfFontSet(
    XFontSet
);

extern int XContextDependentDrawing(
    XFontSet
);

extern int XDirectionalDependentDrawing(
    XFontSet
);

extern int XContextualDrawing(
    XFontSet
);

extern XFontSetExtents *XExtentsOfFontSet(
    XFontSet
);

extern int XmbTextEscapement(
    XFontSet ,
    const char* ,
    int
);

extern int XwcTextEscapement(
    XFontSet ,
    const wchar_t* ,
    int
);

extern int Xutf8TextEscapement(
    XFontSet ,
    const char* ,
    int
);

extern int XmbTextExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle*
);

extern int XwcTextExtents(
    XFontSet ,
    const wchar_t* ,
    int ,
    XRectangle* ,
    XRectangle*
);

extern int Xutf8TextExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle*
);

extern int XmbTextPerCharExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);

extern int XwcTextPerCharExtents(
    XFontSet ,
    const wchar_t* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);

extern int Xutf8TextPerCharExtents(
    XFontSet ,
    const char* ,
    int ,
    XRectangle* ,
    XRectangle* ,
    int ,
    int* ,
    XRectangle* ,
    XRectangle*
);

extern void XmbDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XmbTextItem* ,
    int
);

extern void XwcDrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XwcTextItem* ,
    int
);

extern void Xutf8DrawText(
    Display* ,
    Drawable ,
    GC ,
    int ,
    int ,
    XmbTextItem* ,
    int
);

extern void XmbDrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern void XwcDrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const wchar_t* ,
    int
);

extern void Xutf8DrawString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern void XmbDrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern void XwcDrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const wchar_t* ,
    int
);

extern void Xutf8DrawImageString(
    Display* ,
    Drawable ,
    XFontSet ,
    GC ,
    int ,
    int ,
    const char* ,
    int
);

extern XIM XOpenIM(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char*
);

extern int XCloseIM(
    XIM
);

extern char *XGetIMValues(
    XIM , ...
) __attribute__ ((__sentinel__(0)));

extern char *XSetIMValues(
    XIM , ...
) __attribute__ ((__sentinel__(0)));

extern Display *XDisplayOfIM(
    XIM
);

extern char *XLocaleOfIM(
    XIM
);

extern XIC XCreateIC(
    XIM , ...
) __attribute__ ((__sentinel__(0)));

extern void XDestroyIC(
    XIC
);

extern void XSetICFocus(
    XIC
);

extern void XUnsetICFocus(
    XIC
);

extern wchar_t *XwcResetIC(
    XIC
);

extern char *XmbResetIC(
    XIC
);

extern char *Xutf8ResetIC(
    XIC
);

extern char *XSetICValues(
    XIC , ...
) __attribute__ ((__sentinel__(0)));

extern char *XGetICValues(
    XIC , ...
) __attribute__ ((__sentinel__(0)));

extern XIM XIMOfIC(
    XIC
);

extern int XFilterEvent(
    XEvent* ,
    Window
);

extern int XmbLookupString(
    XIC ,
    XKeyPressedEvent* ,
    char* ,
    int ,
    KeySym* ,
    int*
);

extern int XwcLookupString(
    XIC ,
    XKeyPressedEvent* ,
    wchar_t* ,
    int ,
    KeySym* ,
    int*
);

extern int Xutf8LookupString(
    XIC ,
    XKeyPressedEvent* ,
    char* ,
    int ,
    KeySym* ,
    int*
);

extern XVaNestedList XVaCreateNestedList(
    int , ...
) __attribute__ ((__sentinel__(0)));



extern int XRegisterIMInstantiateCallback(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char* ,
    XIDProc ,
    XPointer
);

extern int XUnregisterIMInstantiateCallback(
    Display* ,
    struct _XrmHashBucketRec* ,
    char* ,
    char* ,
    XIDProc ,
    XPointer
);

typedef void (*XConnectionWatchProc)(
    Display* ,
    XPointer ,
    int ,
    int ,
    XPointer*
);


extern int XInternalConnectionNumbers(
    Display* ,
    int** ,
    int*
);

extern void XProcessInternalConnection(
    Display* ,
    int
);

extern int XAddConnectionWatch(
    Display* ,
    XConnectionWatchProc ,
    XPointer
);

extern void XRemoveConnectionWatch(
    Display* ,
    XConnectionWatchProc ,
    XPointer
);

extern void XSetAuthorization(
    char * ,
    int ,
    char * ,
    int
);

extern int _Xmbtowc(
    wchar_t * ,




    char * ,
    int

);

extern int _Xwctomb(
    char * ,
    wchar_t
);

extern int XGetEventData(
    Display* ,
    XGenericEventCookie*
);

extern void XFreeEventData(
    Display* ,
    XGenericEventCookie*
);


# 28 "dispextern.h" 2
# 49 "dispextern.h"

# 49 "dispextern.h"
#pragma GCC diagnostic push
# 49 "dispextern.h"

# 49 "dispextern.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 49 "dispextern.h"

# 49 "dispextern.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 49 "dispextern.h"

# 49 "dispextern.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 49 "dispextern.h"





# 1 "../lib/c-strcase.h" 1
# 21 "../lib/c-strcase.h"
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 22 "../lib/c-strcase.h" 2
# 42 "../lib/c-strcase.h"
extern int c_strcasecmp (const char *s1, const char *s2) __attribute__ ((__pure__));




extern int c_strncasecmp (const char *s1, const char *s2, size_t n)
  __attribute__ ((__pure__));
# 55 "dispextern.h" 2
extern inline __attribute__ ((__gnu_inline__)) int
xstrcasecmp (char const *a, char const *b)
{
  return c_strcasecmp (a, b);
}


typedef struct x_display_info Display_Info;
typedef XImage * XImagePtr;
typedef XImagePtr XImagePtr_or_DC;
# 101 "dispextern.h"
struct glyph;
struct glyph_row;
struct glyph_matrix;
struct glyph_pool;
struct frame;
struct window;




enum window_part
{
  ON_NOTHING,
  ON_TEXT,
  ON_MODE_LINE,
  ON_VERTICAL_BORDER,
  ON_HEADER_LINE,
  ON_LEFT_FRINGE,
  ON_RIGHT_FRINGE,
  ON_LEFT_MARGIN,
  ON_RIGHT_MARGIN,
  ON_SCROLL_BAR
};
# 177 "dispextern.h"
struct text_pos
{

  ptrdiff_t charpos;


  ptrdiff_t bytepos;
};
# 245 "dispextern.h"
struct display_pos
{

  struct text_pos pos;





  ptrdiff_t overlay_string_index;



  struct text_pos string_pos;





  int dpvec_index;
};
# 276 "dispextern.h"
enum glyph_type
{

  CHAR_GLYPH,


  COMPOSITE_GLYPH,


  GLYPHLESS_GLYPH,


  IMAGE_GLYPH,


  STRETCH_GLYPH
};




struct glyph_slice
{
  unsigned x : 16;
  unsigned y : 16;
  unsigned width : 16;
  unsigned height : 16;
};
# 314 "dispextern.h"
struct glyph
{





  ptrdiff_t charpos;





  Lisp_Object object;


  short pixel_width;


  short ascent, descent;



  short voffset;



  unsigned type : 3;




  unsigned multibyte_p : 1;




  unsigned left_box_line_p : 1;
  unsigned right_box_line_p : 1;




  unsigned overlaps_vertically_p : 1;
# 369 "dispextern.h"
  unsigned padding_p : 1;




  unsigned glyph_not_available_p : 1;


  unsigned avoid_cursor_p : 1;


  unsigned resolved_level : 5;






  unsigned bidi_type : 3;





  unsigned face_id : 20;





  unsigned font_type : 3;


  union
  {

    struct glyph_slice img;


    struct { int from, to; } cmp;

    struct {
      short upper_xoff, upper_yoff;
      short lower_xoff, lower_yoff;
    } glyphless;
  } slice;


  union
  {

    unsigned ch;


    struct
    {

      unsigned automatic : 1;

      unsigned id : 31;
    } cmp;


    int img_id;


    struct
    {

      unsigned height : 16;


      unsigned ascent : 16;
    }
    stretch;


    struct
    {

      unsigned method : 2;

      unsigned for_no_font : 1;

      unsigned len : 4;

      unsigned ch : 25;
    } glyphless;


    unsigned val;
  } u;
};
# 570 "dispextern.h"
struct glyph_pool
{

  struct glyph *glyphs;


  ptrdiff_t nglyphs;


  int nrows, ncolumns;
};
# 614 "dispextern.h"
struct glyph_matrix
{



  struct glyph_pool *pool;



  struct glyph_row *rows;


  ptrdiff_t rows_allocated;



  int nrows;




  int matrix_x, matrix_y;


  int matrix_w, matrix_h;







  int window_left_col, window_top_line;
  int window_height, window_width;
  int window_vscroll;



  int left_margin_glyphs, right_margin_glyphs;




  unsigned no_scrolling_p : 1;



  unsigned header_line_p : 1;
# 670 "dispextern.h"
  struct buffer *buffer;



  ptrdiff_t begv, zv;
};
# 697 "dispextern.h"
enum glyph_row_area
{
  LEFT_MARGIN_AREA,
  TEXT_AREA,
  RIGHT_MARGIN_AREA,
  LAST_AREA
};
# 730 "dispextern.h"
struct glyph_row
{
# 746 "dispextern.h"
  struct glyph *glyphs[1 + LAST_AREA];


  short used[LAST_AREA];







  int x, y;




  int pixel_width;



  int ascent, height;




  int phys_ascent, phys_height;




  int visible_height;



  int extra_line_spacing;



  unsigned hash;







  struct display_pos start;
# 801 "dispextern.h"
  struct display_pos end;







  struct text_pos minpos, maxpos;




  int overlay_arrow_bitmap;


  unsigned left_user_fringe_bitmap : 16;


  unsigned right_user_fringe_bitmap : 16;


  unsigned left_fringe_bitmap : 16;


  unsigned right_fringe_bitmap : 16;


  unsigned left_user_fringe_face_id : 20;


  unsigned right_user_fringe_face_id : 20;


  unsigned left_fringe_face_id : 20;


  unsigned right_fringe_face_id : 20;


  signed left_fringe_offset : 8;


  signed right_fringe_offset : 8;



  unsigned fringe_bitmap_periodic_p : 1;


  unsigned redraw_fringe_bitmaps_p : 1;





  unsigned enabled_p : 1;



  unsigned truncated_on_left_p : 1;
  unsigned truncated_on_right_p : 1;



  unsigned continued_p : 1;



  unsigned displays_text_p : 1;


  unsigned ends_at_zv_p : 1;




  unsigned fill_line_p : 1;



  unsigned indicate_empty_line_p : 1;



  unsigned contains_overlapping_glyphs_p : 1;




  unsigned full_width_p : 1;


  unsigned mode_line_p : 1;


  unsigned overlapped_p : 1;




  unsigned ends_in_middle_of_char_p : 1;




  unsigned starts_in_middle_of_char_p : 1;


  unsigned overlapping_p : 1;


  unsigned mouse_face_p : 1;


  unsigned ends_in_newline_from_string_p : 1;



  unsigned exact_window_width_line_p : 1;


  unsigned cursor_in_fringe_p : 1;


  unsigned ends_in_ellipsis_p : 1;



  unsigned indicate_bob_p : 1;



  unsigned indicate_top_line_p : 1;



  unsigned indicate_eob_p : 1;



  unsigned indicate_bottom_line_p : 1;



  unsigned reversed_p : 1;


  int continuation_lines_width;




  XRectangle *clip;

};
# 1133 "dispextern.h"
extern _Bool fonts_changed_p;



extern struct glyph space_glyph;




extern struct window *updated_window;



extern struct glyph_row *updated_row;
extern int updated_area;




extern _Bool display_completed;
# 1163 "dispextern.h"
enum draw_glyphs_face
{
  DRAW_NORMAL_TEXT,
  DRAW_INVERSE_VIDEO,
  DRAW_CURSOR,
  DRAW_MOUSE_FACE,
  DRAW_IMAGE_RAISED,
  DRAW_IMAGE_SUNKEN
};





struct glyph_string
{

  int x;


  int y, ybase;


  int width;


  int background_width;




  int height;




  int left_overhang;




  int right_overhang;


  struct frame *f;


  struct window *w;


  Display *display;
  Window window;



  struct glyph_row *row;


  enum glyph_row_area area;


  XChar2b *char2b;
  int nchars;


  enum draw_glyphs_face hl;


  struct face *face;


  struct font *font;



  struct composition *cmp;


  ptrdiff_t cmp_id;


  int cmp_from, cmp_to;



  unsigned extends_to_end_of_line_p : 1;


  unsigned background_filled_p : 1;


  unsigned two_byte_p : 1;




  unsigned font_not_found_p : 1;



  unsigned stippled_p : 1;
# 1276 "dispextern.h"
  unsigned for_overlaps : 3;




  unsigned padding_p : 1;



  GC gc;
# 1295 "dispextern.h"
  struct glyph *first_glyph;


  struct image *img;


  struct glyph_slice slice;




  struct glyph_string *clip_head, *clip_tail;


  XRectangle clip[2];


  int num_clips;

  int underline_position;

  int underline_thickness;

  struct glyph_string *next, *prev;
};
# 1472 "dispextern.h"
enum lface_attribute_index
{
  LFACE_FAMILY_INDEX = 1,
  LFACE_FOUNDRY_INDEX,
  LFACE_SWIDTH_INDEX,
  LFACE_HEIGHT_INDEX,
  LFACE_WEIGHT_INDEX,
  LFACE_SLANT_INDEX,
  LFACE_UNDERLINE_INDEX,
  LFACE_INVERSE_INDEX,
  LFACE_FOREGROUND_INDEX,
  LFACE_BACKGROUND_INDEX,
  LFACE_STIPPLE_INDEX,
  LFACE_OVERLINE_INDEX,
  LFACE_STRIKE_THROUGH_INDEX,
  LFACE_BOX_INDEX,
  LFACE_FONT_INDEX,
  LFACE_INHERIT_INDEX,
  LFACE_FONTSET_INDEX,
  LFACE_VECTOR_SIZE
};




enum face_box_type
{

  FACE_NO_BOX,



  FACE_SIMPLE_BOX,



  FACE_RAISED_BOX,
  FACE_SUNKEN_BOX
};



enum face_underline_type
{
  FACE_UNDER_LINE,
  FACE_UNDER_WAVE
};
# 1527 "dispextern.h"
struct face
{


  int id;





  GC gc;



  ptrdiff_t stipple;
# 1552 "dispextern.h"
  unsigned long foreground;


  unsigned long background;


  unsigned long underline_color;



  unsigned long overline_color;
  unsigned long strike_through_color;
  unsigned long box_color;

  struct font *font;



  int fontset;


  unsigned int pixmap_w, pixmap_h;







  int box_line_width;






  enum face_box_type box;



  unsigned use_box_color_for_shadows_p : 1;


  enum face_underline_type underline_type;



  unsigned underline_p : 1;
  unsigned overline_p : 1;
  unsigned strike_through_p : 1;




  unsigned foreground_defaulted_p : 1;
  unsigned background_defaulted_p : 1;




  unsigned underline_defaulted_p : 1;




  unsigned overline_color_defaulted_p : 1;
  unsigned strike_through_color_defaulted_p : 1;
  unsigned box_color_defaulted_p : 1;



  unsigned tty_bold_p : 1;
  unsigned tty_italic_p : 1;
  unsigned tty_underline_p : 1;
  unsigned tty_reverse_p : 1;




  unsigned colors_copied_bitwise_p : 1;


  unsigned overstrike : 1;
# 1645 "dispextern.h"
  Lisp_Object lface[LFACE_VECTOR_SIZE];


  unsigned hash;


  struct face *next, *prev;




  struct face *ascii_face;


  void *extra;
};
# 1683 "dispextern.h"
enum face_id
{
  DEFAULT_FACE_ID,
  MODE_LINE_FACE_ID,
  MODE_LINE_INACTIVE_FACE_ID,
  TOOL_BAR_FACE_ID,
  FRINGE_FACE_ID,
  HEADER_LINE_FACE_ID,
  SCROLL_BAR_FACE_ID,
  BORDER_FACE_ID,
  CURSOR_FACE_ID,
  MOUSE_FACE_ID,
  MENU_FACE_ID,
  VERTICAL_BORDER_FACE_ID,
  BASIC_FACE_ID_SENTINEL
};






struct face_cache
{

  struct face **buckets;


  struct frame *f;


  struct face **faces_by_id;


  ptrdiff_t size;
  int used;



  unsigned menu_face_changed_p : 1;
};
# 1775 "dispextern.h"
extern int face_change_count;
# 1788 "dispextern.h"
typedef enum {
  UNKNOWN_BT = 0,
  STRONG_L,
  STRONG_R,
  WEAK_EN,
  WEAK_AN,
  WEAK_BN,
  NEUTRAL_B,
  STRONG_AL,
  LRE,
  LRO,
  RLE,
  RLO,
  PDF,
  WEAK_ES,
  WEAK_ET,
  WEAK_CS,
  WEAK_NSM,
  NEUTRAL_S,
  NEUTRAL_WS,
  NEUTRAL_ON
} bidi_type_t;


typedef enum { NEUTRAL_DIR, L2R, R2L } bidi_dir_t;



struct bidi_saved_info {
  ptrdiff_t bytepos, charpos;
  bidi_type_t type;
  bidi_type_t type_after_w1;
  bidi_type_t orig_type;
};



struct bidi_stack {
  int level;
  bidi_dir_t override;
};


struct bidi_string_data {
  Lisp_Object lstring;
  const unsigned char *s;
  ptrdiff_t schars;

  ptrdiff_t bufpos;
  unsigned from_disp_str : 1;

  unsigned unibyte : 1;
};


struct bidi_it {
  ptrdiff_t bytepos;
  ptrdiff_t charpos;
  int ch;


  ptrdiff_t nchars;

  ptrdiff_t ch_len;
  bidi_type_t type;

  bidi_type_t type_after_w1;
  bidi_type_t orig_type;
  int resolved_level;
  int invalid_levels;
  int invalid_rl_levels;
  struct bidi_saved_info prev;
  struct bidi_saved_info last_strong;
  struct bidi_saved_info next_for_neutral;
  struct bidi_saved_info prev_for_neutral;
  struct bidi_saved_info next_for_ws;
  ptrdiff_t next_en_pos;
  bidi_type_t next_en_type;
  ptrdiff_t ignore_bn_limit;
  bidi_dir_t sor;
  int scan_dir;
  ptrdiff_t disp_pos;
  int disp_prop;


  int stack_idx;



  struct bidi_stack level_stack[64];
  struct bidi_string_data string;
  bidi_dir_t paragraph_dir;
  ptrdiff_t separator_limit;
  unsigned prev_was_pdf : 1;
  unsigned first_elt : 1;
  unsigned new_paragraph : 1;
  unsigned frame_window_p : 1;
};
# 1905 "dispextern.h"
struct draw_fringe_bitmap_params
{
  int which;
  unsigned short *bits;
  int wd, h, dh;
  int x, y;
  int bx, nx, by, ny;
  unsigned cursor_p : 1;
  unsigned overlay_p : 1;
  struct face *face;
};
# 1967 "dispextern.h"
enum display_element_type
{

  IT_CHARACTER,


  IT_COMPOSITION,


  IT_GLYPHLESS,


  IT_IMAGE,


  IT_STRETCH,


  IT_EOB,




  IT_TRUNCATION,


  IT_CONTINUATION
};





enum prop_idx
{
  FONTIFIED_PROP_IDX,
  FACE_PROP_IDX,
  INVISIBLE_PROP_IDX,
  DISPLAY_PROP_IDX,
  COMPOSITION_PROP_IDX,


  OVERLAY_PROP_IDX,


  LAST_PROP_IDX
};



enum line_wrap_method
{
  TRUNCATE,
  WORD_WRAP,
  WINDOW_WRAP
};



enum glyphless_display_method
  {


    GLYPHLESS_DISPLAY_THIN_SPACE,

    GLYPHLESS_DISPLAY_EMPTY_BOX,

    GLYPHLESS_DISPLAY_ACRONYM,

    GLYPHLESS_DISPLAY_HEX_CODE
  };

struct it_slice
{
  Lisp_Object x;
  Lisp_Object y;
  Lisp_Object width;
  Lisp_Object height;
};




enum it_method {
  GET_FROM_BUFFER = 0,
  GET_FROM_DISPLAY_VECTOR,
  GET_FROM_STRING,
  GET_FROM_C_STRING,
  GET_FROM_IMAGE,
  GET_FROM_STRETCH,
  NUM_IT_METHODS
};





struct composition_it
{

  ptrdiff_t stop_pos;


  ptrdiff_t id;





  int ch;




  int rule_idx;



  ptrdiff_t lookback;

  int nglyphs;



  _Bool reversed_p;




  ptrdiff_t charpos;

  int nchars, nbytes;

  int from, to;



  int width;
};

struct it
{

  Lisp_Object window;
  struct window *w;


  struct frame *f;


  enum it_method method;



  ptrdiff_t stop_charpos;



  ptrdiff_t prev_stop;



  ptrdiff_t base_level_stop;



  ptrdiff_t end_charpos;




  const unsigned char *s;




  ptrdiff_t string_nchars;



  ptrdiff_t region_beg_charpos, region_end_charpos;


  ptrdiff_t redisplay_end_trigger_charpos;


  unsigned multibyte_p : 1;


  unsigned header_line_p : 1;



  unsigned string_from_display_prop_p : 1;



  unsigned string_from_prefix_prop_p : 1;



  unsigned from_disp_prop_p : 1;



  unsigned ellipsis_p : 1;


  unsigned avoid_cursor_p : 1;


  struct Lisp_Char_Table *dp;







  Lisp_Object *dpvec, *dpend;





  int dpvec_char_len;


  int dpvec_face_id;




  int saved_face_id;






  Lisp_Object ctl_chars[16];



  struct display_pos start;



  struct display_pos current;







  ptrdiff_t n_overlay_strings;





  ptrdiff_t overlay_strings_charpos;




  Lisp_Object overlay_strings[16];


  Lisp_Object string_overlays[16];





  Lisp_Object string;



  Lisp_Object from_overlay;





  struct iterator_stack_entry
  {
    Lisp_Object string;
    int string_nchars;
    ptrdiff_t end_charpos;
    ptrdiff_t stop_charpos;
    ptrdiff_t prev_stop;
    ptrdiff_t base_level_stop;
    struct composition_it cmp_it;
    int face_id;


    union {

      struct {
 Lisp_Object object;
 struct it_slice slice;
 ptrdiff_t image_id;
      } image;

      struct {
 Lisp_Object object;
      } comp;

      struct {
 Lisp_Object object;
      } stretch;
    } u;


    struct text_pos position;
    struct display_pos current;
    Lisp_Object from_overlay;
    enum glyph_row_area area;
    enum it_method method;
    bidi_dir_t paragraph_embedding;
    unsigned multibyte_p : 1;
    unsigned string_from_display_prop_p : 1;
    unsigned string_from_prefix_prop_p : 1;
    unsigned display_ellipsis_p : 1;
    unsigned avoid_cursor_p : 1;
    unsigned bidi_p:1;
    unsigned from_disp_prop_p : 1;
    enum line_wrap_method line_wrap;


    short voffset;
    Lisp_Object space_width;
    Lisp_Object font_height;
  }
  stack[5];


  int sp;



  ptrdiff_t selective;



  enum display_element_type what;


  int face_id;


  unsigned selective_display_ellipsis_p : 1;



  unsigned ctl_arrow_p : 1;


  unsigned face_box_p : 1;



  unsigned start_of_box_run_p : 1;



  unsigned end_of_box_run_p : 1;


  unsigned overlay_strings_at_end_processed_p : 1;



  unsigned ignore_overlay_strings_at_pos_p : 1;



  unsigned glyph_not_available_p : 1;




  unsigned starts_in_middle_of_char_p : 1;



  unsigned face_before_selective_p : 1;



  unsigned constrain_row_ascent_descent_p : 1;

  enum line_wrap_method line_wrap;



  int base_face_id;
# 2383 "dispextern.h"
  int c, len;



  struct composition_it cmp_it;






  int char_to_display;



  enum glyphless_display_method glyphless_method;


  ptrdiff_t image_id;


  struct it_slice slice;


  Lisp_Object space_width;


  short voffset;


  short tab_width;


  Lisp_Object font_height;
# 2435 "dispextern.h"
  Lisp_Object object;
  struct text_pos position;


  short truncation_pixel_width, continuation_pixel_width;




  int first_visible_x, last_visible_x;



  int last_visible_y;



  int extra_line_spacing;


  int max_extra_line_spacing;



  int override_ascent, override_descent, override_boff;



  struct glyph_row *glyph_row;


  enum glyph_row_area area;



  int nglyphs;



  int pixel_width;



  int ascent, descent, max_ascent, max_descent;
  int phys_ascent, phys_descent, max_phys_ascent, max_phys_descent;





  int current_x;




  int continuation_lines_width;







  struct text_pos eol_pos;



  int current_y;


  int first_vpos;



  int vpos;



  int hpos;


  unsigned left_user_fringe_bitmap : 16;


  unsigned right_user_fringe_bitmap : 16;


  unsigned left_user_fringe_face_id : 20;


  unsigned right_user_fringe_face_id : 20;



  unsigned bidi_p : 1;


  struct bidi_it bidi_it;
  bidi_dir_t paragraph_embedding;
};
# 2580 "dispextern.h"
enum move_operation_enum
{

  MOVE_TO_X = 0x01,


  MOVE_TO_Y = 0x02,


  MOVE_TO_VPOS = 0x04,


  MOVE_TO_POS = 0x08
};
# 2603 "dispextern.h"
struct run
{

  int desired_y, current_y;


  int desired_vpos, current_vpos;


  int height, nrows;
};




typedef void (*frame_parm_handler) (struct frame *, Lisp_Object, Lisp_Object);





struct redisplay_interface
{

  frame_parm_handler *frame_parm_handlers;



  void (*produce_glyphs) (struct it *it);



  void (*write_glyphs) (struct glyph *string, int len);
  void (*insert_glyphs) (struct glyph *start, int len);



  void (*clear_end_of_line) (int x);



  void (*scroll_run_hook) (struct window *w, struct run *run);




  void (*after_update_window_line_hook) (struct glyph_row *desired_row);



  void (*update_window_begin_hook) (struct window *w);






  void (*update_window_end_hook) (struct window *w, int cursor_on_p,
                                  int mouse_face_overwritten_p);




  void (*cursor_to) (int vpos, int hpos, int y, int x);


  void (*flush_display) (struct frame *f);




  void (*flush_display_optional) (struct frame *f);


  void (*clear_window_mouse_face) (struct window *w);



  void (*get_glyph_overhangs) (struct glyph *glyph, struct frame *f,
                               int *left, int *right);




  void (*fix_overlapping_area) (struct window *w, struct glyph_row *row,
                                enum glyph_row_area area, int);




  void (*draw_fringe_bitmap) (struct window *w, struct glyph_row *row,
                              struct draw_fringe_bitmap_params *p);


  void (*define_fringe_bitmap) (int which, unsigned short *bits,
                                int h, int wd);
  void (*destroy_fringe_bitmap) (int which);



  void (*compute_glyph_string_overhangs) (struct glyph_string *s);


  void (*draw_glyph_string) (struct glyph_string *s);


  void (*define_frame_cursor) (struct frame *f, Cursor cursor);


  void (*clear_frame_area) (struct frame *f, int x, int y,
                            int width, int height);





  void (*draw_window_cursor) (struct window *w,
                              struct glyph_row *glyph_row,
                              int x, int y,
                              int cursor_type, int cursor_width,
                              int on_p, int active_p);


  void (*draw_vertical_window_border) (struct window *w,
                                       int x, int y_0, int y_1);




  void (*shift_glyphs_for_insert) (struct frame *f,
                                   int x, int y, int width,
                                   int height, int shift_by);


};
# 2748 "dispextern.h"
struct image;





struct image_type
{

  Lisp_Object *type;



  _Bool (* valid_p) (Lisp_Object spec);



  _Bool (* load) (struct frame *f, struct image *img);


  void (* free) (struct frame *f, struct image *img);



  _Bool (* init) (void);


  struct image_type *next;
};






struct image
{


  EMACS_TIME timestamp;


  Pixmap pixmap, mask;


  unsigned long *colors;
  int ncolors;






  unsigned long background;



  unsigned long frame_foreground, frame_background;




  unsigned background_transparent : 1;



  unsigned background_valid : 1, background_transparent_valid : 1;


  int width, height;
# 2827 "dispextern.h"
  int corners[4];
# 2836 "dispextern.h"
  int ascent;




  Lisp_Object spec;




  Lisp_Object dependencies;


  int relief;


  int hmargin, vmargin;


  struct image_type *type;


  unsigned load_failed_p;



  Lisp_Object lisp_data;


  EMACS_UINT hash;


  ptrdiff_t id;


  struct image *next, *prev;
};





struct image_cache
{

  struct image **buckets;


  struct image **images;


  ptrdiff_t size;


  ptrdiff_t used;


  ptrdiff_t refcount;
};
# 2921 "dispextern.h"
enum tool_bar_item_idx
{


  TOOL_BAR_ITEM_KEY,


  TOOL_BAR_ITEM_ENABLED_P,


  TOOL_BAR_ITEM_SELECTED_P,


  TOOL_BAR_ITEM_CAPTION,



  TOOL_BAR_ITEM_IMAGES,


  TOOL_BAR_ITEM_BINDING,



  TOOL_BAR_ITEM_TYPE,


  TOOL_BAR_ITEM_HELP,


  TOOL_BAR_ITEM_RTL_IMAGE,


  TOOL_BAR_ITEM_LABEL,


  TOOL_BAR_ITEM_VERT_ONLY,



  TOOL_BAR_ITEM_NSLOTS
};





enum tool_bar_item_image
{
  TOOL_BAR_IMAGE_ENABLED_SELECTED,
  TOOL_BAR_IMAGE_ENABLED_DESELECTED,
  TOOL_BAR_IMAGE_DISABLED_SELECTED,
  TOOL_BAR_IMAGE_DISABLED_DESELECTED
};
# 3010 "dispextern.h"
extern void bidi_init_it (ptrdiff_t, ptrdiff_t, _Bool, struct bidi_it *);
extern void bidi_move_to_visually_next (struct bidi_it *);
extern void bidi_paragraph_init (bidi_dir_t, struct bidi_it *, _Bool);
extern int bidi_mirror_char (int);
extern void bidi_push_it (struct bidi_it *);
extern void bidi_pop_it (struct bidi_it *);
extern void *bidi_shelve_cache (void);
extern void bidi_unshelve_cache (void *, _Bool);



struct glyph_row *row_containing_pos (struct window *, ptrdiff_t,
                                      struct glyph_row *,
                                      struct glyph_row *, int);
int line_bottom_y (struct it *);
int display_prop_intangible_p (Lisp_Object, Lisp_Object, ptrdiff_t, ptrdiff_t);
void resize_echo_area_exactly (void);
int resize_mini_window (struct window *, int);



int try_window (Lisp_Object, struct text_pos, int);
void window_box (struct window *, int, int *, int *, int *, int *);
int window_box_height (struct window *);
int window_text_bottom_y (struct window *);
int window_box_width (struct window *, int);
int window_box_left (struct window *, int);
int window_box_left_offset (struct window *, int);
int window_box_right (struct window *, int);
int window_box_right_offset (struct window *, int);
int estimate_mode_line_height (struct frame *, enum face_id);
void pixel_to_glyph_coords (struct frame *, int, int, int *, int *,
                            XRectangle *, int);
void remember_mouse_glyph (struct frame *, int, int, XRectangle *);

void mark_window_display_accurate (Lisp_Object, int);
void redisplay_preserve_echo_area (int);
void init_iterator (struct it *, struct window *, ptrdiff_t,
                    ptrdiff_t, struct glyph_row *, enum face_id);
void init_iterator_to_row_start (struct it *, struct window *,
                                 struct glyph_row *);
void start_display (struct it *, struct window *, struct text_pos);
void move_it_to (struct it *, ptrdiff_t, int, int, int, int);
void move_it_vertically (struct it *, int);
void move_it_vertically_backward (struct it *, int);
void move_it_by_lines (struct it *, ptrdiff_t);
void move_it_past_eol (struct it *);
void move_it_in_display_line (struct it *it,
         ptrdiff_t to_charpos, int to_x,
         enum move_operation_enum op);
int in_display_vector_p (struct it *);
int frame_mode_line_height (struct frame *);
extern Lisp_Object Qtool_bar;
extern _Bool redisplaying_p;
extern int help_echo_showing_p;
extern int current_mode_line_height, current_header_line_height;
extern Lisp_Object help_echo_string, help_echo_window;
extern Lisp_Object help_echo_object, previous_help_echo_string;
extern ptrdiff_t help_echo_pos;
extern struct frame *last_mouse_frame;
extern int last_tool_bar_item;
extern void reseat_at_previous_visible_line_start (struct it *);
extern Lisp_Object lookup_glyphless_char_display (int, struct it *);
extern ptrdiff_t compute_display_string_pos (struct text_pos *,
          struct bidi_string_data *,
          int, int *);
extern ptrdiff_t compute_display_string_end (ptrdiff_t,
          struct bidi_string_data *);
extern void produce_stretch_glyph (struct it *);







extern void x_get_glyph_overhangs (struct glyph *, struct frame *,
                                   int *, int *);
extern void x_produce_glyphs (struct it *);

extern void x_write_glyphs (struct glyph *, int);
extern void x_insert_glyphs (struct glyph *, int len);
extern void x_clear_end_of_line (int);

extern struct cursor_pos output_cursor;

extern void x_fix_overlapping_area (struct window *, struct glyph_row *,
                                    enum glyph_row_area, int);
extern void draw_phys_cursor_glyph (struct window *,
                                    struct glyph_row *,
                                    enum draw_glyphs_face);
extern void get_phys_cursor_geometry (struct window *, struct glyph_row *,
                                      struct glyph *, int *, int *, int *);
extern void erase_phys_cursor (struct window *);
extern void display_and_set_cursor (struct window *,
                                    int, int, int, int, int);

extern void set_output_cursor (struct cursor_pos *);
extern void x_cursor_to (int, int, int, int);

extern void x_update_cursor (struct frame *, int);
extern void x_clear_cursor (struct window *);
extern void x_draw_vertical_border (struct window *w);

extern int get_glyph_string_clip_rects (struct glyph_string *,
                                        XRectangle *, int);
extern void get_glyph_string_clip_rect (struct glyph_string *,
                                        XRectangle *nr);
extern Lisp_Object find_hot_spot (Lisp_Object, int, int);

extern void handle_tool_bar_click (struct frame *,
                                   int, int, int, int);

extern void expose_frame (struct frame *, int, int, int, int);
extern int x_intersect_rectangles (XRectangle *, XRectangle *,
                                   XRectangle *);


extern void note_mouse_highlight (struct frame *, int, int);
extern void x_clear_window_mouse_face (struct window *);
extern void cancel_mouse_face (struct frame *);
extern int clear_mouse_face (Mouse_HLInfo *);
extern int cursor_in_mouse_face_p (struct window *w);
extern void tty_draw_row_with_mouse_face (struct window *, struct glyph_row *,
       int, int, enum draw_glyphs_face);





int lookup_fringe_bitmap (Lisp_Object);
void draw_fringe_bitmap (struct window *, struct glyph_row *, int);
void draw_row_fringe_bitmaps (struct window *, struct glyph_row *);
int draw_window_fringes (struct window *, int);
int update_window_fringes (struct window *, int);
void compute_fringe_widths (struct frame *, int);






extern unsigned row_hash (struct glyph_row *);





extern int x_bitmap_height (struct frame *, ptrdiff_t);
extern int x_bitmap_width (struct frame *, ptrdiff_t);
extern ptrdiff_t x_bitmap_pixmap (struct frame *, ptrdiff_t);
extern void x_reference_bitmap (struct frame *, ptrdiff_t);
extern ptrdiff_t x_create_bitmap_from_data (struct frame *, char *,
         unsigned int, unsigned int);
extern ptrdiff_t x_create_bitmap_from_file (struct frame *, Lisp_Object);




extern void x_destroy_bitmap (struct frame *, ptrdiff_t);

extern void x_destroy_all_bitmaps (Display_Info *);
extern void x_create_bitmap_mask (struct frame *, ptrdiff_t);
extern Lisp_Object x_find_image_file (Lisp_Object);

void x_kill_gs_process (Pixmap, struct frame *);
struct image_cache *make_image_cache (void);
void free_image_cache (struct frame *);
void clear_image_caches (Lisp_Object);
void mark_image_cache (struct image_cache *);
_Bool valid_image_p (Lisp_Object);
void prepare_image_for_display (struct frame *, struct image *);
ptrdiff_t lookup_image (struct frame *, Lisp_Object);

unsigned long image_background (struct image *, struct frame *,
                                XImagePtr_or_DC ximg);
int image_background_transparent (struct image *, struct frame *,
                                  XImagePtr_or_DC mask);

int image_ascent (struct image *, struct face *, struct glyph_slice *);





void get_tty_size (int, int *, int *);
void request_sigio (void);
void unrequest_sigio (void);
int tabs_safe_p (int);
void init_baud_rate (int);
void init_sigio (int);
void ignore_sigio (void);




void x_free_colors (struct frame *, unsigned long *, int);


void update_face_from_frame_parameter (struct frame *, Lisp_Object,
                                       Lisp_Object);
Lisp_Object tty_color_name (struct frame *, int);
void clear_face_cache (int);
unsigned long load_color (struct frame *, struct face *, Lisp_Object,
                          enum lface_attribute_index);
void unload_color (struct frame *, unsigned long);
char *choose_face_font (struct frame *, Lisp_Object *, Lisp_Object,
                        int *);
void prepare_face_for_display (struct frame *, struct face *);
int lookup_named_face (struct frame *, Lisp_Object, int);
int lookup_basic_face (struct frame *, int);
int smaller_face (struct frame *, int, int);
int face_with_height (struct frame *, int, int);
int lookup_derived_face (struct frame *, Lisp_Object, int, int);
void init_frame_faces (struct frame *);
void free_frame_faces (struct frame *);
void recompute_basic_faces (struct frame *);
int face_at_buffer_position (struct window *w, ptrdiff_t pos,
                             ptrdiff_t region_beg, ptrdiff_t region_end,
                             ptrdiff_t *endptr, ptrdiff_t limit,
                             int mouse, int base_face_id);
int face_for_overlay_string (struct window *w, ptrdiff_t pos,
                             ptrdiff_t region_beg, ptrdiff_t region_end,
                             ptrdiff_t *endptr, ptrdiff_t limit,
                             int mouse, Lisp_Object overlay);
int face_at_string_position (struct window *w, Lisp_Object string,
                             ptrdiff_t pos, ptrdiff_t bufpos,
                             ptrdiff_t region_beg, ptrdiff_t region_end,
                             ptrdiff_t *endptr, enum face_id, int mouse);
int merge_faces (struct frame *, Lisp_Object, int, int);
int compute_char_face (struct frame *, int, Lisp_Object);
void free_all_realized_faces (Lisp_Object);
extern Lisp_Object Qforeground_color, Qbackground_color;
extern char unspecified_fg[], unspecified_bg[];




void gamma_correct (struct frame *, XColor *);







void x_implicitly_set_name (struct frame *, Lisp_Object, Lisp_Object);

extern Lisp_Object tip_frame;
extern Window tip_window;
extern frame_parm_handler x_frame_parm_handlers[];

extern void start_hourglass (void);
extern void cancel_hourglass (void);
extern int hourglass_shown_p;

struct atimer;


extern struct atimer *hourglass_atimer;


extern void show_hourglass (struct atimer *);
extern void hide_hourglass (void);
# 3298 "dispextern.h"
int popup_activated (void);

extern Lisp_Object buffer_posn_from_coords (struct window *,
                                            int *, int *,
                                            struct display_pos *,
                                            Lisp_Object *,
                                            int *, int *, int *, int *);
extern Lisp_Object mode_line_string (struct window *, enum window_part,
                                     int *, int *, ptrdiff_t *,
                                     Lisp_Object *,
                                     int *, int *, int *, int *);
extern Lisp_Object marginal_area_string (struct window *, enum window_part,
                                         int *, int *, ptrdiff_t *,
                                         Lisp_Object *,
                                         int *, int *, int *, int *);
extern void redraw_frame (struct frame *);
extern void cancel_line (int, struct frame *);
extern void init_desired_glyphs (struct frame *);
extern _Bool update_frame (struct frame *, _Bool, _Bool);
extern void bitch_at_user (void);
void adjust_glyphs (struct frame *);
void free_glyphs (struct frame *);
void free_window_matrices (struct window *);
void check_glyph_memory (void);
void mirrored_line_dance (struct glyph_matrix *, int, int, int *, char *);
void clear_glyph_matrix (struct glyph_matrix *);
void clear_current_matrices (struct frame *f);
void clear_desired_matrices (struct frame *);
void shift_glyph_matrix (struct window *, struct glyph_matrix *,
                         int, int, int);
void rotate_matrix (struct glyph_matrix *, int, int, int);
void increment_matrix_positions (struct glyph_matrix *,
                                 int, int, ptrdiff_t, ptrdiff_t);
void blank_row (struct window *, struct glyph_row *, int);
void clear_glyph_matrix_rows (struct glyph_matrix *, int, int);
void clear_glyph_row (struct glyph_row *);
void prepare_desired_row (struct glyph_row *);
void set_window_update_flags (struct window *, _Bool);
void update_single_window (struct window *, _Bool);
void do_pending_window_change (_Bool);
void change_frame_size (struct frame *, int, int, _Bool, _Bool, _Bool);
void init_display (void);
void syms_of_display (void);
extern Lisp_Object Qredisplay_dont_pause;
void spec_glyph_lookup_face (struct window *, GLYPH *);



extern void ring_bell (struct frame *);
extern void update_begin (struct frame *);
extern void update_end (struct frame *);
extern void set_terminal_window (struct frame *, int);
extern void cursor_to (struct frame *, int, int);
extern void raw_cursor_to (struct frame *, int, int);
extern void clear_to_end (struct frame *);
extern void clear_frame (struct frame *);
extern void clear_end_of_line (struct frame *, int);
extern void write_glyphs (struct frame *, struct glyph *, int);
extern void insert_glyphs (struct frame *, struct glyph *, int);
extern void delete_glyphs (struct frame *, int);
extern void ins_del_lines (struct frame *, int, int);

extern struct terminal *init_initial_terminal (void);




extern void tty_turn_off_insert (struct tty_display_info *);
extern int string_cost (const char *);
extern int per_line_cost (const char *);
extern void calculate_costs (struct frame *);
extern void produce_glyphs (struct it *);
extern int tty_capable_p (struct tty_display_info *, unsigned, unsigned long, unsigned long);
extern void set_tty_color_mode (struct tty_display_info *, struct frame *);
extern struct terminal *get_named_tty (const char *);
extern void create_tty_output (struct frame *);
extern struct terminal *init_tty (const char *, const char *, int);
extern void tty_append_glyph (struct it *);




extern int scrolling_max_lines_saved (int, int, int *, int *, int *);
extern void do_line_insertion_deletion_costs (struct frame *, const char *,
                                              const char *, const char *,
           const char *, const char *,
           const char *, int);
void scrolling_1 (struct frame *, int, int, int, int *, int *, int *,
                  int *, int);






enum resource_types
{
  RES_TYPE_NUMBER,
  RES_TYPE_FLOAT,
  RES_TYPE_BOOLEAN,
  RES_TYPE_STRING,
  RES_TYPE_SYMBOL,
  RES_TYPE_BOOLEAN_NUMBER
};

extern Lisp_Object x_get_arg (Display_Info *, Lisp_Object,
                              Lisp_Object, const char *, const char *class,
                              enum resource_types);
extern Lisp_Object x_frame_get_and_record_arg (struct frame *, Lisp_Object,
                                               Lisp_Object,
            const char *, const char *,
                                               enum resource_types);
extern Lisp_Object x_default_parameter (struct frame *, Lisp_Object,
                                        Lisp_Object, Lisp_Object,
                                        const char *, const char *,
                                        enum resource_types);




# 3417 "dispextern.h"
#pragma GCC diagnostic pop
# 3417 "dispextern.h"

# 24 "window.h" 2


# 25 "window.h"
#pragma GCC diagnostic push
# 25 "window.h"

# 25 "window.h"
#pragma GCC diagnostic ignored "-Wmissing-prototypes"
# 25 "window.h"

# 25 "window.h"
#pragma GCC diagnostic ignored "-Wmissing-declarations"
# 25 "window.h"

# 25 "window.h"
#pragma GCC diagnostic ignored "-Wsuggest-attribute=const"
# 25 "window.h"

# 83 "window.h"
struct cursor_pos
{

  int x, y;


  int hpos, vpos;
};

struct window
  {

    struct vectorlike_header header;


    Lisp_Object frame;



    Lisp_Object next;
    Lisp_Object prev;





    Lisp_Object hchild;
    Lisp_Object vchild;


    Lisp_Object parent;



    Lisp_Object left_col;
    Lisp_Object top_line;


    Lisp_Object total_lines;
    Lisp_Object total_cols;


    Lisp_Object normal_lines;
    Lisp_Object normal_cols;


    Lisp_Object new_total;
    Lisp_Object new_normal;




    Lisp_Object buffer;





    Lisp_Object start;





    Lisp_Object pointm;



    Lisp_Object temslot;






    Lisp_Object vertical_scroll_bar;



    Lisp_Object left_margin_cols;
    Lisp_Object right_margin_cols;



    Lisp_Object left_fringe_width;
    Lisp_Object right_fringe_width;



    Lisp_Object scroll_bar_width;



    Lisp_Object vertical_scroll_bar_type;



    Lisp_Object window_end_pos;


    Lisp_Object window_end_vpos;




    Lisp_Object window_end_valid;



    Lisp_Object display_table;




    Lisp_Object dedicated;




    Lisp_Object base_line_number;



    Lisp_Object base_line_pos;



    Lisp_Object region_showing;



    Lisp_Object column_number_displayed;



    Lisp_Object redisplay_end_trigger;


    Lisp_Object combination_limit;


    Lisp_Object window_parameters;






    struct glyph_matrix *current_matrix;
    struct glyph_matrix *desired_matrix;





    Lisp_Object prev_buffers;

    Lisp_Object next_buffers;


    int use_time;


    int sequence_number;


    ptrdiff_t hscroll;



    ptrdiff_t min_hscroll;



    EMACS_INT last_modified;



    EMACS_INT last_overlay_modified;



    ptrdiff_t last_point;




    int nrows_scale_factor, ncols_scale_factor;



    struct cursor_pos last_cursor;



    struct cursor_pos cursor;


    struct cursor_pos phys_cursor;



    int phys_cursor_type, phys_cursor_width;


    int phys_cursor_ascent, phys_cursor_height;


    unsigned mini : 1;


    unsigned update_mode_line : 1;



    unsigned last_had_star : 1;



    unsigned start_at_line_beg : 1;



    unsigned force_start : 1;





    unsigned optional_new_start : 1;



    unsigned phys_cursor_on_p : 1;



    unsigned cursor_off_p : 1;


    unsigned last_cursor_off_p : 1;



    unsigned must_be_updated_p : 1;



    unsigned pseudo_window_p : 1;




    unsigned frozen_window_start_p : 1;



    unsigned fringes_outside_margins : 1;



    int vscroll;



    ptrdiff_t window_end_bytepos;
};



extern inline __attribute__ ((__gnu_inline__)) void
wset_buffer (struct window *w, Lisp_Object val)
{
  w->buffer = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_frame (struct window *w, Lisp_Object val)
{
  w->frame = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_left_col (struct window *w, Lisp_Object val)
{
  w->left_col = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_next (struct window *w, Lisp_Object val)
{
  w->next = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_prev (struct window *w, Lisp_Object val)
{
  w->prev = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_redisplay_end_trigger (struct window *w, Lisp_Object val)
{
  w->redisplay_end_trigger = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_top_line (struct window *w, Lisp_Object val)
{
  w->top_line = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_total_cols (struct window *w, Lisp_Object val)
{
  w->total_cols = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_total_lines (struct window *w, Lisp_Object val)
{
  w->total_lines = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_vertical_scroll_bar (struct window *w, Lisp_Object val)
{
  w->vertical_scroll_bar = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_window_end_pos (struct window *w, Lisp_Object val)
{
  w->window_end_pos = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_window_end_valid (struct window *w, Lisp_Object val)
{
  w->window_end_valid = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_window_end_vpos (struct window *w, Lisp_Object val)
{
  w->window_end_vpos = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_prev_buffers (struct window *w, Lisp_Object val)
{
  w->prev_buffers = val;
}
extern inline __attribute__ ((__gnu_inline__)) void
wset_next_buffers (struct window *w, Lisp_Object val)
{
  w->next_buffers = val;
}
# 877 "window.h"
extern Lisp_Object selected_window;





extern int window_select_count;





extern Lisp_Object minibuf_window;




extern Lisp_Object minibuf_selected_window;



extern Lisp_Object Vmouse_window;



extern Lisp_Object Vmouse_event;

extern Lisp_Object make_window (void);
extern Lisp_Object window_from_coordinates (struct frame *, int, int,
                                            enum window_part *, int);
extern void resize_frame_windows (struct frame *, int, int);
extern void delete_all_child_windows (Lisp_Object);
extern void freeze_window_starts (struct frame *, int);
extern void grow_mini_window (struct window *, int);
extern void shrink_mini_window (struct window *);
extern int window_relative_x_coord (struct window *, enum window_part, int);

void run_window_configuration_change_hook (struct frame *f);





void set_window_buffer (Lisp_Object window, Lisp_Object buffer,
                        int run_hooks_p, int keep_margins_p);





extern Lisp_Object echo_area_window;



extern EMACS_INT command_loop_level;



extern EMACS_INT minibuf_level;



extern int update_mode_lines;




extern int windows_or_buffers_changed;



extern int cursor_type_changed;




extern int buffer_shared;




extern void check_frame_size (struct frame *frame, int *rows, int *cols);





struct glyph *get_phys_cursor_glyph (struct window *w);
# 988 "window.h"
extern Lisp_Object Qwindowp, Qwindow_live_p;
extern Lisp_Object Vwindow_list;

extern struct window *decode_live_window (Lisp_Object);
extern struct window *decode_any_window (Lisp_Object);
extern _Bool compare_window_configurations (Lisp_Object, Lisp_Object, _Bool);
extern void mark_window_cursors_off (struct window *);
extern int window_internal_height (struct window *);
extern int window_body_cols (struct window *w);
extern void temp_output_buffer_show (Lisp_Object);
extern void replace_buffer_in_windows (Lisp_Object);
extern void replace_buffer_in_windows_safely (Lisp_Object);
extern void init_window_once (void);
extern void init_window (void);
extern void syms_of_window (void);
extern void keys_of_window (void);


# 1005 "window.h"
#pragma GCC diagnostic pop
# 1005 "window.h"

# 42 "bytecode.c" 2







# 1 "/usr/local/include/jit/jit.h" 1 3
# 28 "/usr/local/include/jit/jit.h" 3
# 1 "/usr/local/include/jit/jit-defs.h" 1 3
# 36 "/usr/local/include/jit/jit-defs.h" 3
typedef char jit_sbyte;
typedef unsigned char jit_ubyte;
typedef short jit_short;
typedef unsigned short jit_ushort;
typedef int jit_int;
typedef unsigned int jit_uint;
typedef int jit_nint;
typedef unsigned int jit_nuint;




typedef long long jit_long;
typedef unsigned long long jit_ulong;

typedef float jit_float32;
typedef double jit_float64;
typedef long double jit_nfloat;
typedef void *jit_ptr;
# 29 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-common.h" 1 3
# 33 "/usr/local/include/jit/jit-common.h" 3
typedef struct _jit_context *jit_context_t;




typedef struct _jit_function *jit_function_t;




typedef struct _jit_block *jit_block_t;




typedef struct _jit_insn *jit_insn_t;




typedef struct _jit_value *jit_value_t;




typedef struct _jit_type *jit_type_t;




typedef struct jit_stack_trace *jit_stack_trace_t;




typedef jit_nuint jit_label_t;
# 83 "/usr/local/include/jit/jit-common.h" 3
typedef void (*jit_meta_free_func)(void *data);





typedef int (*jit_on_demand_func)(jit_function_t func);






typedef void *(*jit_on_demand_driver_func)(jit_function_t func);
# 30 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-context.h" 1 3
# 30 "/usr/local/include/jit/jit-context.h" 3
jit_context_t jit_context_create(void) ;
void jit_context_destroy(jit_context_t context) ;
int jit_context_supports_threads(jit_context_t context) ;
void jit_context_build_start(jit_context_t context) ;
void jit_context_build_end(jit_context_t context) ;
void jit_context_set_on_demand_driver(
 jit_context_t context,
 jit_on_demand_driver_func driver) ;
int jit_context_set_meta
 (jit_context_t context, int type, void *data,
  jit_meta_free_func free_data) ;
int jit_context_set_meta_numeric
 (jit_context_t context, int type, jit_nuint data) ;
void *jit_context_get_meta(jit_context_t context, int type) ;
jit_nuint jit_context_get_meta_numeric
 (jit_context_t context, int type) ;
void jit_context_free_meta(jit_context_t context, int type) ;
# 31 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-apply.h" 1 3
# 26 "/usr/local/include/jit/jit-apply.h" 3
# 1 "/usr/local/include/jit/jit-type.h" 1 3
# 33 "/usr/local/include/jit/jit-type.h" 3
extern jit_type_t const jit_type_void;
extern jit_type_t const jit_type_sbyte;
extern jit_type_t const jit_type_ubyte;
extern jit_type_t const jit_type_short;
extern jit_type_t const jit_type_ushort;
extern jit_type_t const jit_type_int;
extern jit_type_t const jit_type_uint;
extern jit_type_t const jit_type_nint;
extern jit_type_t const jit_type_nuint;
extern jit_type_t const jit_type_long;
extern jit_type_t const jit_type_ulong;
extern jit_type_t const jit_type_float32;
extern jit_type_t const jit_type_float64;
extern jit_type_t const jit_type_nfloat;
extern jit_type_t const jit_type_void_ptr;





extern jit_type_t const jit_type_sys_bool;
extern jit_type_t const jit_type_sys_char;
extern jit_type_t const jit_type_sys_schar;
extern jit_type_t const jit_type_sys_uchar;
extern jit_type_t const jit_type_sys_short;
extern jit_type_t const jit_type_sys_ushort;
extern jit_type_t const jit_type_sys_int;
extern jit_type_t const jit_type_sys_uint;
extern jit_type_t const jit_type_sys_long;
extern jit_type_t const jit_type_sys_ulong;
extern jit_type_t const jit_type_sys_longlong;
extern jit_type_t const jit_type_sys_ulonglong;
extern jit_type_t const jit_type_sys_float;
extern jit_type_t const jit_type_sys_double;
extern jit_type_t const jit_type_sys_long_double;
# 125 "/usr/local/include/jit/jit-type.h" 3
typedef enum
{
 jit_abi_cdecl,
 jit_abi_vararg,
 jit_abi_stdcall,
 jit_abi_fastcall

} jit_abi_t;




jit_type_t jit_type_copy(jit_type_t type) ;
void jit_type_free(jit_type_t type) ;
jit_type_t jit_type_create_struct
 (jit_type_t *fields, unsigned int num_fields, int incref) ;
jit_type_t jit_type_create_union
 (jit_type_t *fields, unsigned int num_fields, int incref) ;
jit_type_t jit_type_create_signature
 (jit_abi_t abi, jit_type_t return_type, jit_type_t *params,
  unsigned int num_params, int incref) ;
jit_type_t jit_type_create_pointer(jit_type_t type, int incref) ;
jit_type_t jit_type_create_tagged
 (jit_type_t type, int kind, void *data,
  jit_meta_free_func free_func, int incref) ;
int jit_type_set_names
 (jit_type_t type, char **names, unsigned int num_names) ;
void jit_type_set_size_and_alignment
 (jit_type_t type, jit_nint size, jit_nint alignment) ;
void jit_type_set_offset
 (jit_type_t type, unsigned int field_index, jit_nuint offset) ;
int jit_type_get_kind(jit_type_t type) ;
jit_nuint jit_type_get_size(jit_type_t type) ;
jit_nuint jit_type_get_alignment(jit_type_t type) ;
unsigned int jit_type_num_fields(jit_type_t type) ;
jit_type_t jit_type_get_field
 (jit_type_t type, unsigned int field_index) ;
jit_nuint jit_type_get_offset
 (jit_type_t type, unsigned int field_index) ;
const char *jit_type_get_name(jit_type_t type, unsigned int index) ;

unsigned int jit_type_find_name(jit_type_t type, const char *name) ;
unsigned int jit_type_num_params(jit_type_t type) ;
jit_type_t jit_type_get_return(jit_type_t type) ;
jit_type_t jit_type_get_param
 (jit_type_t type, unsigned int param_index) ;
jit_abi_t jit_type_get_abi(jit_type_t type) ;
jit_type_t jit_type_get_ref(jit_type_t type) ;
jit_type_t jit_type_get_tagged_type(jit_type_t type) ;
void jit_type_set_tagged_type
 (jit_type_t type, jit_type_t underlying, int incref) ;
int jit_type_get_tagged_kind(jit_type_t type) ;
void *jit_type_get_tagged_data(jit_type_t type) ;
void jit_type_set_tagged_data
 (jit_type_t type, void *data, jit_meta_free_func free_func) ;
int jit_type_is_primitive(jit_type_t type) ;
int jit_type_is_struct(jit_type_t type) ;
int jit_type_is_union(jit_type_t type) ;
int jit_type_is_signature(jit_type_t type) ;
int jit_type_is_pointer(jit_type_t type) ;
int jit_type_is_tagged(jit_type_t type) ;
jit_nuint jit_type_best_alignment(void) ;
jit_type_t jit_type_normalize(jit_type_t type) ;
jit_type_t jit_type_remove_tags(jit_type_t type) ;
jit_type_t jit_type_promote_int(jit_type_t type) ;
int jit_type_return_via_pointer(jit_type_t type) ;
int jit_type_has_tag(jit_type_t type, int kind) ;
# 27 "/usr/local/include/jit/jit-apply.h" 2 3
# 35 "/usr/local/include/jit/jit-apply.h" 3
typedef void (*jit_closure_func)(jit_type_t signature, void *result,
                                 void **args, void *user_data);




typedef struct jit_closure_va_list *jit_closure_va_list_t;




void jit_apply(jit_type_t signature, void *func,
               void **args, unsigned int num_fixed_args,
               void *return_value);
void jit_apply_raw(jit_type_t signature, void *func,
                   void *args, void *return_value);
int jit_raw_supported(jit_type_t signature);
void *jit_closure_create(jit_context_t context, jit_type_t signature,
       jit_closure_func func, void *user_data);
int jit_closures_supported(void);
jit_nint jit_closure_va_get_nint(jit_closure_va_list_t va);
jit_nuint jit_closure_va_get_nuint(jit_closure_va_list_t va);
jit_long jit_closure_va_get_long(jit_closure_va_list_t va);
jit_ulong jit_closure_va_get_ulong(jit_closure_va_list_t va);
jit_float32 jit_closure_va_get_float32(jit_closure_va_list_t va);
jit_float64 jit_closure_va_get_float64(jit_closure_va_list_t va);
jit_nfloat jit_closure_va_get_nfloat(jit_closure_va_list_t va);
void *jit_closure_va_get_ptr(jit_closure_va_list_t va);
void jit_closure_va_get_struct
 (jit_closure_va_list_t va, void *buf, jit_type_t type);
# 32 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-block.h" 1 3
# 30 "/usr/local/include/jit/jit-block.h" 3
jit_function_t jit_block_get_function(jit_block_t block) ;
jit_context_t jit_block_get_context(jit_block_t block) ;
jit_label_t jit_block_get_label(jit_block_t block) ;
jit_block_t jit_block_next
 (jit_function_t func, jit_block_t previous) ;
jit_block_t jit_block_previous
 (jit_function_t func, jit_block_t previous) ;
jit_block_t jit_block_from_label
 (jit_function_t func, jit_label_t label) ;
int jit_block_set_meta(jit_block_t block, int type, void *data,
        jit_meta_free_func free_data) ;
void *jit_block_get_meta(jit_block_t block, int type) ;
void jit_block_free_meta(jit_block_t block, int type) ;
int jit_block_is_reachable(jit_block_t block) ;
int jit_block_ends_in_dead(jit_block_t block) ;
int jit_block_current_is_dead(jit_function_t func) ;
# 33 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-debugger.h" 1 3
# 30 "/usr/local/include/jit/jit-debugger.h" 3
typedef struct jit_debugger *jit_debugger_t;
typedef jit_nint jit_debugger_thread_id_t;
typedef jit_nint jit_debugger_breakpoint_id_t;

typedef struct jit_debugger_event
{
 int type;
 jit_debugger_thread_id_t thread;
 jit_function_t function;
 jit_nint data1;
 jit_nint data2;
 jit_debugger_breakpoint_id_t id;
 jit_stack_trace_t trace;

} jit_debugger_event_t;
# 53 "/usr/local/include/jit/jit-debugger.h" 3
typedef struct jit_debugger_breakpoint_info
{
 int flags;
 jit_debugger_thread_id_t thread;
 jit_function_t function;
 jit_nint data1;
 jit_nint data2;

} *jit_debugger_breakpoint_info_t;
# 74 "/usr/local/include/jit/jit-debugger.h" 3
typedef void (*jit_debugger_hook_func)
 (jit_function_t func, jit_nint data1, jit_nint data2);

int jit_debugging_possible(void) ;

jit_debugger_t jit_debugger_create(jit_context_t context) ;
void jit_debugger_destroy(jit_debugger_t dbg) ;

jit_context_t jit_debugger_get_context(jit_debugger_t dbg) ;
jit_debugger_t jit_debugger_from_context(jit_context_t context) ;

jit_debugger_thread_id_t jit_debugger_get_self(jit_debugger_t dbg) ;
jit_debugger_thread_id_t jit_debugger_get_thread
  (jit_debugger_t dbg, const void *native_thread) ;
int jit_debugger_get_native_thread
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread,
   void *native_thread) ;
void jit_debugger_set_breakable
  (jit_debugger_t dbg, const void *native_thread, int flag) ;

void jit_debugger_attach_self
  (jit_debugger_t dbg, int stop_immediately) ;
void jit_debugger_detach_self(jit_debugger_t dbg) ;

int jit_debugger_wait_event
  (jit_debugger_t dbg, jit_debugger_event_t *event,
   jit_int timeout) ;

jit_debugger_breakpoint_id_t jit_debugger_add_breakpoint
  (jit_debugger_t dbg, jit_debugger_breakpoint_info_t info) ;
void jit_debugger_remove_breakpoint
  (jit_debugger_t dbg, jit_debugger_breakpoint_id_t id) ;
void jit_debugger_remove_all_breakpoints(jit_debugger_t dbg) ;

int jit_debugger_is_alive
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread) ;
int jit_debugger_is_running
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread) ;
void jit_debugger_run
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread) ;
void jit_debugger_step
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread) ;
void jit_debugger_next
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread) ;
void jit_debugger_finish
  (jit_debugger_t dbg, jit_debugger_thread_id_t thread) ;

void jit_debugger_break(jit_debugger_t dbg) ;

void jit_debugger_quit(jit_debugger_t dbg) ;

jit_debugger_hook_func jit_debugger_set_hook
  (jit_context_t context, jit_debugger_hook_func hook);
# 34 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-elf.h" 1 3
# 33 "/usr/local/include/jit/jit-elf.h" 3
typedef struct jit_readelf *jit_readelf_t;
typedef struct jit_writeelf *jit_writeelf_t;
# 55 "/usr/local/include/jit/jit-elf.h" 3
int jit_readelf_open
 (jit_readelf_t *readelf, const char *filename, int flags) ;
void jit_readelf_close(jit_readelf_t readelf) ;
const char *jit_readelf_get_name(jit_readelf_t readelf) ;
void *jit_readelf_get_symbol
 (jit_readelf_t readelf, const char *name) ;
void *jit_readelf_get_section
 (jit_readelf_t readelf, const char *name, jit_nuint *size) ;
void *jit_readelf_get_section_by_type
 (jit_readelf_t readelf, jit_int type, jit_nuint *size) ;
void *jit_readelf_map_vaddr
 (jit_readelf_t readelf, jit_nuint vaddr) ;
unsigned int jit_readelf_num_needed(jit_readelf_t readelf) ;
const char *jit_readelf_get_needed
 (jit_readelf_t readelf, unsigned int index) ;
void jit_readelf_add_to_context
 (jit_readelf_t readelf, jit_context_t context) ;
int jit_readelf_resolve_all
 (jit_context_t context, int print_failures) ;
int jit_readelf_register_symbol
 (jit_context_t context, const char *name,
  void *value, int after) ;

jit_writeelf_t jit_writeelf_create(const char *library_name) ;
void jit_writeelf_destroy(jit_writeelf_t writeelf) ;
int jit_writeelf_write
 (jit_writeelf_t writeelf, const char *filename) ;
int jit_writeelf_add_function
 (jit_writeelf_t writeelf, jit_function_t func,
  const char *name) ;
int jit_writeelf_add_needed
 (jit_writeelf_t writeelf, const char *library_name) ;
int jit_writeelf_write_section
 (jit_writeelf_t writeelf, const char *name, jit_int type,
  const void *buf, unsigned int len, int discardable) ;
# 35 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-except.h" 1 3
# 47 "/usr/local/include/jit/jit-except.h" 3
typedef void *(*jit_exception_func)(int exception_type);




void *jit_exception_get_last(void);
void *jit_exception_get_last_and_clear(void);
void jit_exception_set_last(void *object);
void jit_exception_clear_last(void);
void jit_exception_throw(void *object);
void jit_exception_builtin(int exception_type);
jit_exception_func jit_exception_set_handler(jit_exception_func handler);
jit_exception_func jit_exception_get_handler(void);
jit_stack_trace_t jit_exception_get_stack_trace(void);
unsigned int jit_stack_trace_get_size(jit_stack_trace_t trace);
jit_function_t jit_stack_trace_get_function
 (jit_context_t context, jit_stack_trace_t trace, unsigned int posn);
void *jit_stack_trace_get_pc
 (jit_stack_trace_t trace, unsigned int posn);
unsigned int jit_stack_trace_get_offset
 (jit_context_t context, jit_stack_trace_t trace, unsigned int posn);
void jit_stack_trace_free(jit_stack_trace_t trace);
# 36 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-function.h" 1 3
# 30 "/usr/local/include/jit/jit-function.h" 3
jit_function_t jit_function_create
 (jit_context_t context, jit_type_t signature) ;
jit_function_t jit_function_create_nested
 (jit_context_t context, jit_type_t signature,
  jit_function_t parent) ;
void jit_function_abandon(jit_function_t func) ;
jit_context_t jit_function_get_context(jit_function_t func) ;
jit_type_t jit_function_get_signature(jit_function_t func) ;
int jit_function_set_meta
 (jit_function_t func, int type, void *data,
  jit_meta_free_func free_data, int build_only) ;
void *jit_function_get_meta(jit_function_t func, int type) ;
void jit_function_free_meta(jit_function_t func, int type) ;
jit_function_t jit_function_next
 (jit_context_t context, jit_function_t prev) ;
jit_function_t jit_function_previous
 (jit_context_t context, jit_function_t prev) ;
jit_block_t jit_function_get_entry(jit_function_t func) ;
jit_block_t jit_function_get_current(jit_function_t func) ;
jit_function_t jit_function_get_nested_parent(jit_function_t func) ;
int jit_function_compile(jit_function_t func) ;
int jit_function_is_compiled(jit_function_t func) ;
void jit_function_set_recompilable(jit_function_t func) ;
void jit_function_clear_recompilable(jit_function_t func) ;
int jit_function_is_recompilable(jit_function_t func) ;
int jit_function_compile_entry(jit_function_t func, void **entry_point) ;
void jit_function_setup_entry(jit_function_t func, void *entry_point) ;
void *jit_function_to_closure(jit_function_t func) ;
jit_function_t jit_function_from_closure
 (jit_context_t context, void *closure) ;
jit_function_t jit_function_from_pc
 (jit_context_t context, void *pc, void **handler) ;
void *jit_function_to_vtable_pointer(jit_function_t func) ;
jit_function_t jit_function_from_vtable_pointer
 (jit_context_t context, void *vtable_pointer) ;
void jit_function_set_on_demand_compiler
 (jit_function_t func, jit_on_demand_func on_demand) ;
jit_on_demand_func jit_function_get_on_demand_compiler(jit_function_t func) ;
int jit_function_apply
 (jit_function_t func, void **args, void *return_area);
int jit_function_apply_vararg
 (jit_function_t func, jit_type_t signature, void **args, void *return_area);
void jit_function_set_optimization_level
 (jit_function_t func, unsigned int level) ;
unsigned int jit_function_get_optimization_level
 (jit_function_t func) ;
unsigned int jit_function_get_max_optimization_level(void) ;
jit_label_t jit_function_reserve_label(jit_function_t func) ;
# 37 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-init.h" 1 3
# 30 "/usr/local/include/jit/jit-init.h" 3
void jit_init(void) ;
int jit_uses_interpreter(void) ;
# 38 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-insn.h" 1 3
# 33 "/usr/local/include/jit/jit-insn.h" 3
typedef struct
{
 jit_type_t return_type;
 jit_type_t ptr_result_type;
 jit_type_t arg1_type;
 jit_type_t arg2_type;

} jit_intrinsic_descr_t;





typedef struct
{
 jit_block_t block;
 int posn;

} jit_insn_iter_t;
# 60 "/usr/local/include/jit/jit-insn.h" 3
int jit_insn_get_opcode(jit_insn_t insn) ;
jit_value_t jit_insn_get_dest(jit_insn_t insn) ;
jit_value_t jit_insn_get_value1(jit_insn_t insn) ;
jit_value_t jit_insn_get_value2(jit_insn_t insn) ;
jit_label_t jit_insn_get_label(jit_insn_t insn) ;
jit_function_t jit_insn_get_function(jit_insn_t insn) ;
void *jit_insn_get_native(jit_insn_t insn) ;
const char *jit_insn_get_name(jit_insn_t insn) ;
jit_type_t jit_insn_get_signature(jit_insn_t insn) ;
int jit_insn_dest_is_value(jit_insn_t insn) ;

int jit_insn_label(jit_function_t func, jit_label_t *label) ;
int jit_insn_new_block(jit_function_t func) ;
jit_value_t jit_insn_load(jit_function_t func, jit_value_t value) ;
jit_value_t jit_insn_dup(jit_function_t func, jit_value_t value) ;
jit_value_t jit_insn_load_small
 (jit_function_t func, jit_value_t value) ;
int jit_insn_store
 (jit_function_t func, jit_value_t dest, jit_value_t value) ;
jit_value_t jit_insn_load_relative
 (jit_function_t func, jit_value_t value,
  jit_nint offset, jit_type_t type) ;
int jit_insn_store_relative
 (jit_function_t func, jit_value_t dest,
  jit_nint offset, jit_value_t value) ;
jit_value_t jit_insn_add_relative
 (jit_function_t func, jit_value_t value, jit_nint offset) ;
jit_value_t jit_insn_load_elem
 (jit_function_t func, jit_value_t base_addr,
  jit_value_t index, jit_type_t elem_type) ;
jit_value_t jit_insn_load_elem_address
 (jit_function_t func, jit_value_t base_addr,
  jit_value_t index, jit_type_t elem_type) ;
int jit_insn_store_elem
 (jit_function_t func, jit_value_t base_addr,
  jit_value_t index, jit_value_t value) ;
int jit_insn_check_null(jit_function_t func, jit_value_t value) ;

jit_value_t jit_insn_add
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_add_ovf
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_sub
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_sub_ovf
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_mul
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_mul_ovf
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_div
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_rem
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_rem_ieee
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_neg
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_and
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_or
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_xor
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_not
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_shl
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_shr
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_ushr
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_sshr
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_eq
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_ne
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_lt
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_le
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_gt
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_ge
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_cmpl
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_cmpg
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_to_bool
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_to_not_bool
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_acos
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_asin
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_atan
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_atan2
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_ceil
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_cos
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_cosh
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_exp
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_floor
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_log
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_log10
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_pow
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_rint
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_round
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_sin
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_sinh
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_sqrt
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_tan
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_tanh
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_is_nan
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_is_finite
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_is_inf
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_abs
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_min
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_max
 (jit_function_t func, jit_value_t value1, jit_value_t value2) ;
jit_value_t jit_insn_sign
 (jit_function_t func, jit_value_t value1) ;
int jit_insn_branch
 (jit_function_t func, jit_label_t *label) ;
int jit_insn_branch_if
 (jit_function_t func, jit_value_t value, jit_label_t *label) ;
int jit_insn_branch_if_not
 (jit_function_t func, jit_value_t value, jit_label_t *label) ;
int jit_insn_jump_table
 (jit_function_t func, jit_value_t value,
  jit_label_t *labels, unsigned int num_labels) ;
jit_value_t jit_insn_address_of
 (jit_function_t func, jit_value_t value1) ;
jit_value_t jit_insn_address_of_label
 (jit_function_t func, jit_label_t *label) ;
jit_value_t jit_insn_convert
 (jit_function_t func, jit_value_t value,
  jit_type_t type, int overflow_check) ;

jit_value_t jit_insn_call
 (jit_function_t func, const char *name,
  jit_function_t jit_func, jit_type_t signature,
  jit_value_t *args, unsigned int num_args, int flags) ;
jit_value_t jit_insn_call_indirect
 (jit_function_t func, jit_value_t value, jit_type_t signature,
  jit_value_t *args, unsigned int num_args, int flags) ;
jit_value_t jit_insn_call_indirect_vtable
 (jit_function_t func, jit_value_t value, jit_type_t signature,
  jit_value_t *args, unsigned int num_args, int flags) ;
jit_value_t jit_insn_call_native
 (jit_function_t func, const char *name,
  void *native_func, jit_type_t signature,
  jit_value_t *args, unsigned int num_args, int flags) ;
jit_value_t jit_insn_call_intrinsic
 (jit_function_t func, const char *name, void *intrinsic_func,
  const jit_intrinsic_descr_t *descriptor,
  jit_value_t arg1, jit_value_t arg2) ;
int jit_insn_incoming_reg
 (jit_function_t func, jit_value_t value, int reg) ;
int jit_insn_incoming_frame_posn
 (jit_function_t func, jit_value_t value, jit_nint frame_offset) ;
int jit_insn_outgoing_reg
 (jit_function_t func, jit_value_t value, int reg) ;
int jit_insn_outgoing_frame_posn
 (jit_function_t func, jit_value_t value, jit_nint frame_offset) ;
int jit_insn_return_reg
 (jit_function_t func, jit_value_t value, int reg) ;
int jit_insn_setup_for_nested
 (jit_function_t func, int nested_level, int reg) ;
int jit_insn_flush_struct(jit_function_t func, jit_value_t value) ;
jit_value_t jit_insn_import
 (jit_function_t func, jit_value_t value) ;
int jit_insn_push(jit_function_t func, jit_value_t value) ;
int jit_insn_push_ptr
 (jit_function_t func, jit_value_t value, jit_type_t type) ;
int jit_insn_set_param
 (jit_function_t func, jit_value_t value, jit_nint offset) ;
int jit_insn_set_param_ptr
 (jit_function_t func, jit_value_t value, jit_type_t type,
  jit_nint offset) ;
int jit_insn_push_return_area_ptr(jit_function_t func) ;
int jit_insn_pop_stack(jit_function_t func, jit_nint num_items) ;
int jit_insn_defer_pop_stack
 (jit_function_t func, jit_nint num_items) ;
int jit_insn_flush_defer_pop
 (jit_function_t func, jit_nint num_items) ;
int jit_insn_return(jit_function_t func, jit_value_t value) ;
int jit_insn_return_ptr
 (jit_function_t func, jit_value_t value, jit_type_t type) ;
int jit_insn_default_return(jit_function_t func) ;
int jit_insn_throw(jit_function_t func, jit_value_t value) ;
jit_value_t jit_insn_get_call_stack(jit_function_t func) ;

jit_value_t jit_insn_thrown_exception(jit_function_t func) ;
int jit_insn_uses_catcher(jit_function_t func) ;
jit_value_t jit_insn_start_catcher(jit_function_t func) ;
int jit_insn_branch_if_pc_not_in_range
 (jit_function_t func, jit_label_t start_label,
  jit_label_t end_label, jit_label_t *label) ;
int jit_insn_rethrow_unhandled(jit_function_t func) ;
int jit_insn_start_finally
 (jit_function_t func, jit_label_t *finally_label) ;
int jit_insn_return_from_finally(jit_function_t func) ;
int jit_insn_call_finally
 (jit_function_t func, jit_label_t *finally_label) ;
jit_value_t jit_insn_start_filter
 (jit_function_t func, jit_label_t *label, jit_type_t type) ;
int jit_insn_return_from_filter
 (jit_function_t func, jit_value_t value) ;
jit_value_t jit_insn_call_filter
 (jit_function_t func, jit_label_t *label,
  jit_value_t value, jit_type_t type) ;

int jit_insn_memcpy
 (jit_function_t func, jit_value_t dest,
  jit_value_t src, jit_value_t size) ;
int jit_insn_memmove
 (jit_function_t func, jit_value_t dest,
  jit_value_t src, jit_value_t size) ;
int jit_insn_memset
 (jit_function_t func, jit_value_t dest,
  jit_value_t value, jit_value_t size) ;
jit_value_t jit_insn_alloca
 (jit_function_t func, jit_value_t size) ;

int jit_insn_move_blocks_to_end
 (jit_function_t func, jit_label_t from_label, jit_label_t to_label)
  ;
int jit_insn_move_blocks_to_start
 (jit_function_t func, jit_label_t from_label, jit_label_t to_label)
  ;

int jit_insn_mark_offset
 (jit_function_t func, jit_int offset) ;
int jit_insn_mark_breakpoint
 (jit_function_t func, jit_nint data1, jit_nint data2) ;
int jit_insn_mark_breakpoint_variable
 (jit_function_t func, jit_value_t data1, jit_value_t data2) ;

void jit_insn_iter_init(jit_insn_iter_t *iter, jit_block_t block) ;
void jit_insn_iter_init_last
 (jit_insn_iter_t *iter, jit_block_t block) ;
jit_insn_t jit_insn_iter_next(jit_insn_iter_t *iter) ;
jit_insn_t jit_insn_iter_previous(jit_insn_iter_t *iter) ;
# 39 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-intrinsic.h" 1 3
# 33 "/usr/local/include/jit/jit-intrinsic.h" 3
jit_int jit_int_add(jit_int value1, jit_int value2) ;
jit_int jit_int_sub(jit_int value1, jit_int value2) ;
jit_int jit_int_mul(jit_int value1, jit_int value2) ;
jit_int jit_int_div
 (jit_int *result, jit_int value1, jit_int value2) ;
jit_int jit_int_rem
 (jit_int *result, jit_int value1, jit_int value2) ;
jit_int jit_int_add_ovf
 (jit_int *result, jit_int value1, jit_int value2) ;
jit_int jit_int_sub_ovf
 (jit_int *result, jit_int value1, jit_int value2) ;
jit_int jit_int_mul_ovf
 (jit_int *result, jit_int value1, jit_int value2) ;
jit_int jit_int_neg(jit_int value1) ;
jit_int jit_int_and(jit_int value1, jit_int value2) ;
jit_int jit_int_or(jit_int value1, jit_int value2) ;
jit_int jit_int_xor(jit_int value1, jit_int value2) ;
jit_int jit_int_not(jit_int value1) ;
jit_int jit_int_shl(jit_int value1, jit_uint value2) ;
jit_int jit_int_shr(jit_int value1, jit_uint value2) ;
jit_int jit_int_eq(jit_int value1, jit_int value2) ;
jit_int jit_int_ne(jit_int value1, jit_int value2) ;
jit_int jit_int_lt(jit_int value1, jit_int value2) ;
jit_int jit_int_le(jit_int value1, jit_int value2) ;
jit_int jit_int_gt(jit_int value1, jit_int value2) ;
jit_int jit_int_ge(jit_int value1, jit_int value2) ;
jit_int jit_int_cmp(jit_int value1, jit_int value2) ;
jit_int jit_int_abs(jit_int value1) ;
jit_int jit_int_min(jit_int value1, jit_int value2) ;
jit_int jit_int_max(jit_int value1, jit_int value2) ;
jit_int jit_int_sign(jit_int value1) ;




jit_uint jit_uint_add(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_sub(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_mul(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_div
 (jit_uint *result, jit_uint value1, jit_uint value2) ;
jit_int jit_uint_rem
 (jit_uint *result, jit_uint value1, jit_uint value2) ;
jit_int jit_uint_add_ovf
 (jit_uint *result, jit_uint value1, jit_uint value2) ;
jit_int jit_uint_sub_ovf
 (jit_uint *result, jit_uint value1, jit_uint value2) ;
jit_int jit_uint_mul_ovf
 (jit_uint *result, jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_neg(jit_uint value1) ;
jit_uint jit_uint_and(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_or(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_xor(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_not(jit_uint value1) ;
jit_uint jit_uint_shl(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_shr(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_eq(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_ne(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_lt(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_le(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_gt(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_ge(jit_uint value1, jit_uint value2) ;
jit_int jit_uint_cmp(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_min(jit_uint value1, jit_uint value2) ;
jit_uint jit_uint_max(jit_uint value1, jit_uint value2) ;




jit_long jit_long_add(jit_long value1, jit_long value2) ;
jit_long jit_long_sub(jit_long value1, jit_long value2) ;
jit_long jit_long_mul(jit_long value1, jit_long value2) ;
jit_int jit_long_div
 (jit_long *result, jit_long value1, jit_long value2) ;
jit_int jit_long_rem
 (jit_long *result, jit_long value1, jit_long value2) ;
jit_int jit_long_add_ovf
 (jit_long *result, jit_long value1, jit_long value2) ;
jit_int jit_long_sub_ovf
 (jit_long *result, jit_long value1, jit_long value2) ;
jit_int jit_long_mul_ovf
 (jit_long *result, jit_long value1, jit_long value2) ;
jit_long jit_long_neg(jit_long value1) ;
jit_long jit_long_and(jit_long value1, jit_long value2) ;
jit_long jit_long_or(jit_long value1, jit_long value2) ;
jit_long jit_long_xor(jit_long value1, jit_long value2) ;
jit_long jit_long_not(jit_long value1) ;
jit_long jit_long_shl(jit_long value1, jit_uint value2) ;
jit_long jit_long_shr(jit_long value1, jit_uint value2) ;
jit_int jit_long_eq(jit_long value1, jit_long value2) ;
jit_int jit_long_ne(jit_long value1, jit_long value2) ;
jit_int jit_long_lt(jit_long value1, jit_long value2) ;
jit_int jit_long_le(jit_long value1, jit_long value2) ;
jit_int jit_long_gt(jit_long value1, jit_long value2) ;
jit_int jit_long_ge(jit_long value1, jit_long value2) ;
jit_int jit_long_cmp(jit_long value1, jit_long value2) ;
jit_long jit_long_abs(jit_long value1) ;
jit_long jit_long_min(jit_long value1, jit_long value2) ;
jit_long jit_long_max(jit_long value1, jit_long value2) ;
jit_int jit_long_sign(jit_long value1) ;




jit_ulong jit_ulong_add(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_sub(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_mul(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_div
 (jit_ulong *result, jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_rem
 (jit_ulong *result, jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_add_ovf
 (jit_ulong *result, jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_sub_ovf
 (jit_ulong *result, jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_mul_ovf
 (jit_ulong *result, jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_neg(jit_ulong value1) ;
jit_ulong jit_ulong_and(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_or(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_xor(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_not(jit_ulong value1) ;
jit_ulong jit_ulong_shl(jit_ulong value1, jit_uint value2) ;
jit_ulong jit_ulong_shr(jit_ulong value1, jit_uint value2) ;
jit_int jit_ulong_eq(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_ne(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_lt(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_le(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_gt(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_ge(jit_ulong value1, jit_ulong value2) ;
jit_int jit_ulong_cmp(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_min(jit_ulong value1, jit_ulong value2) ;
jit_ulong jit_ulong_max(jit_ulong value1, jit_ulong value2) ;




jit_float32 jit_float32_add
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_sub
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_mul
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_div
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_rem
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_ieee_rem
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_neg(jit_float32 value1) ;
jit_int jit_float32_eq(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_ne(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_lt(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_le(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_gt(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_ge(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_cmpl(jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_cmpg(jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_acos(jit_float32 value1) ;
jit_float32 jit_float32_asin(jit_float32 value1) ;
jit_float32 jit_float32_atan(jit_float32 value1) ;
jit_float32 jit_float32_atan2
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_ceil(jit_float32 value1) ;
jit_float32 jit_float32_cos(jit_float32 value1) ;
jit_float32 jit_float32_cosh(jit_float32 value1) ;
jit_float32 jit_float32_exp(jit_float32 value1) ;
jit_float32 jit_float32_floor(jit_float32 value1) ;
jit_float32 jit_float32_log(jit_float32 value1) ;
jit_float32 jit_float32_log10(jit_float32 value1) ;
jit_float32 jit_float32_pow
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_rint(jit_float32 value1) ;
jit_float32 jit_float32_round(jit_float32 value1) ;
jit_float32 jit_float32_sin(jit_float32 value1) ;
jit_float32 jit_float32_sinh(jit_float32 value1) ;
jit_float32 jit_float32_sqrt(jit_float32 value1) ;
jit_float32 jit_float32_tan(jit_float32 value1) ;
jit_float32 jit_float32_tanh(jit_float32 value1) ;
jit_int jit_float32_is_finite(jit_float32 value) ;
jit_int jit_float32_is_nan(jit_float32 value) ;
jit_int jit_float32_is_inf(jit_float32 value) ;
jit_float32 jit_float32_abs(jit_float32 value1) ;
jit_float32 jit_float32_min
 (jit_float32 value1, jit_float32 value2) ;
jit_float32 jit_float32_max
 (jit_float32 value1, jit_float32 value2) ;
jit_int jit_float32_sign(jit_float32 value1) ;




jit_float64 jit_float64_add
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_sub
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_mul
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_div
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_rem
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_ieee_rem
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_neg(jit_float64 value1) ;
jit_int jit_float64_eq(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_ne(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_lt(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_le(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_gt(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_ge(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_cmpl(jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_cmpg(jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_acos(jit_float64 value1) ;
jit_float64 jit_float64_asin(jit_float64 value1) ;
jit_float64 jit_float64_atan(jit_float64 value1) ;
jit_float64 jit_float64_atan2
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_ceil(jit_float64 value1) ;
jit_float64 jit_float64_cos(jit_float64 value1) ;
jit_float64 jit_float64_cosh(jit_float64 value1) ;
jit_float64 jit_float64_exp(jit_float64 value1) ;
jit_float64 jit_float64_floor(jit_float64 value1) ;
jit_float64 jit_float64_log(jit_float64 value1) ;
jit_float64 jit_float64_log10(jit_float64 value1) ;
jit_float64 jit_float64_pow
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_rint(jit_float64 value1) ;
jit_float64 jit_float64_round(jit_float64 value1) ;
jit_float64 jit_float64_sin(jit_float64 value1) ;
jit_float64 jit_float64_sinh(jit_float64 value1) ;
jit_float64 jit_float64_sqrt(jit_float64 value1) ;
jit_float64 jit_float64_tan(jit_float64 value1) ;
jit_float64 jit_float64_tanh(jit_float64 value1) ;
jit_int jit_float64_is_finite(jit_float64 value) ;
jit_int jit_float64_is_nan(jit_float64 value) ;
jit_int jit_float64_is_inf(jit_float64 value) ;
jit_float64 jit_float64_abs(jit_float64 value1) ;
jit_float64 jit_float64_min
 (jit_float64 value1, jit_float64 value2) ;
jit_float64 jit_float64_max
 (jit_float64 value1, jit_float64 value2) ;
jit_int jit_float64_sign(jit_float64 value1) ;




jit_nfloat jit_nfloat_add(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_sub(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_mul(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_div(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_rem(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_ieee_rem
 (jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_neg(jit_nfloat value1) ;
jit_int jit_nfloat_eq(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_ne(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_lt(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_le(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_gt(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_ge(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_cmpl(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_cmpg(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_acos(jit_nfloat value1) ;
jit_nfloat jit_nfloat_asin(jit_nfloat value1) ;
jit_nfloat jit_nfloat_atan(jit_nfloat value1) ;
jit_nfloat jit_nfloat_atan2(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_ceil(jit_nfloat value1) ;
jit_nfloat jit_nfloat_cos(jit_nfloat value1) ;
jit_nfloat jit_nfloat_cosh(jit_nfloat value1) ;
jit_nfloat jit_nfloat_exp(jit_nfloat value1) ;
jit_nfloat jit_nfloat_floor(jit_nfloat value1) ;
jit_nfloat jit_nfloat_log(jit_nfloat value1) ;
jit_nfloat jit_nfloat_log10(jit_nfloat value1) ;
jit_nfloat jit_nfloat_pow(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_rint(jit_nfloat value1) ;
jit_nfloat jit_nfloat_round(jit_nfloat value1) ;
jit_nfloat jit_nfloat_sin(jit_nfloat value1) ;
jit_nfloat jit_nfloat_sinh(jit_nfloat value1) ;
jit_nfloat jit_nfloat_sqrt(jit_nfloat value1) ;
jit_nfloat jit_nfloat_tan(jit_nfloat value1) ;
jit_nfloat jit_nfloat_tanh(jit_nfloat value1) ;
jit_int jit_nfloat_is_finite(jit_nfloat value) ;
jit_int jit_nfloat_is_nan(jit_nfloat value) ;
jit_int jit_nfloat_is_inf(jit_nfloat value) ;
jit_nfloat jit_nfloat_abs(jit_nfloat value1) ;
jit_nfloat jit_nfloat_min(jit_nfloat value1, jit_nfloat value2) ;
jit_nfloat jit_nfloat_max(jit_nfloat value1, jit_nfloat value2) ;
jit_int jit_nfloat_sign(jit_nfloat value1) ;




jit_int jit_int_to_sbyte(jit_int value) ;
jit_int jit_int_to_ubyte(jit_int value) ;
jit_int jit_int_to_short(jit_int value) ;
jit_int jit_int_to_ushort(jit_int value) ;
jit_int jit_int_to_int(jit_int value) ;
jit_uint jit_int_to_uint(jit_int value) ;
jit_long jit_int_to_long(jit_int value) ;
jit_ulong jit_int_to_ulong(jit_int value) ;
jit_int jit_uint_to_int(jit_uint value) ;
jit_uint jit_uint_to_uint(jit_uint value) ;
jit_long jit_uint_to_long(jit_uint value) ;
jit_ulong jit_uint_to_ulong(jit_uint value) ;
jit_int jit_long_to_int(jit_long value) ;
jit_uint jit_long_to_uint(jit_long value) ;
jit_long jit_long_to_long(jit_long value) ;
jit_ulong jit_long_to_ulong(jit_long value) ;
jit_int jit_ulong_to_int(jit_ulong value) ;
jit_uint jit_ulong_to_uint(jit_ulong value) ;
jit_long jit_ulong_to_long(jit_ulong value) ;
jit_ulong jit_ulong_to_ulong(jit_ulong value) ;




jit_int jit_int_to_sbyte_ovf(jit_int *result, jit_int value) ;
jit_int jit_int_to_ubyte_ovf(jit_int *result, jit_int value) ;
jit_int jit_int_to_short_ovf(jit_int *result, jit_int value) ;
jit_int jit_int_to_ushort_ovf(jit_int *result, jit_int value) ;
jit_int jit_int_to_int_ovf(jit_int *result, jit_int value) ;
jit_int jit_int_to_uint_ovf(jit_uint *result, jit_int value) ;
jit_int jit_int_to_long_ovf(jit_long *result, jit_int value) ;
jit_int jit_int_to_ulong_ovf(jit_ulong *result, jit_int value) ;
jit_int jit_uint_to_int_ovf(jit_int *result, jit_uint value) ;
jit_int jit_uint_to_uint_ovf(jit_uint *result, jit_uint value) ;
jit_int jit_uint_to_long_ovf(jit_long *result, jit_uint value) ;
jit_int jit_uint_to_ulong_ovf(jit_ulong *result, jit_uint value) ;
jit_int jit_long_to_int_ovf(jit_int *result, jit_long value) ;
jit_int jit_long_to_uint_ovf(jit_uint *result, jit_long value) ;
jit_int jit_long_to_long_ovf(jit_long *result, jit_long value) ;
jit_int jit_long_to_ulong_ovf(jit_ulong *result, jit_long value) ;
jit_int jit_ulong_to_int_ovf(jit_int *result, jit_ulong value) ;
jit_int jit_ulong_to_uint_ovf(jit_uint *result, jit_ulong value) ;
jit_int jit_ulong_to_long_ovf(jit_long *result, jit_ulong value) ;
jit_int jit_ulong_to_ulong_ovf(jit_ulong *result, jit_ulong value) ;




jit_int jit_nfloat_to_int(jit_nfloat value) ;
jit_uint jit_nfloat_to_uint(jit_nfloat value) ;
jit_long jit_nfloat_to_long(jit_nfloat value) ;
jit_ulong jit_nfloat_to_ulong(jit_nfloat value) ;





jit_int jit_nfloat_to_int_ovf(jit_int *result, jit_nfloat value) ;
jit_int jit_nfloat_to_uint_ovf(jit_uint *result, jit_nfloat value) ;
jit_int jit_nfloat_to_long_ovf(jit_long *result, jit_nfloat value) ;
jit_int jit_nfloat_to_ulong_ovf
 (jit_ulong *result, jit_nfloat value) ;




jit_nfloat jit_int_to_nfloat(jit_int value) ;
jit_nfloat jit_uint_to_nfloat(jit_uint value) ;
jit_nfloat jit_long_to_nfloat(jit_long value) ;
jit_nfloat jit_ulong_to_nfloat(jit_ulong value) ;




jit_nfloat jit_float32_to_nfloat(jit_float32 value) ;
jit_nfloat jit_float64_to_nfloat(jit_float64 value) ;
jit_float32 jit_nfloat_to_float32(jit_nfloat value) ;
jit_float64 jit_nfloat_to_float64(jit_nfloat value) ;
# 40 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-meta.h" 1 3
# 30 "/usr/local/include/jit/jit-meta.h" 3
typedef struct _jit_meta *jit_meta_t;

int jit_meta_set
 (jit_meta_t *list, int type, void *data,
  jit_meta_free_func free_data, jit_function_t pool_owner) ;
void *jit_meta_get(jit_meta_t list, int type) ;
void jit_meta_free(jit_meta_t *list, int type) ;
void jit_meta_destroy(jit_meta_t *list) ;
# 41 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-objmodel.h" 1 3
# 33 "/usr/local/include/jit/jit-objmodel.h" 3
typedef struct jit_objmodel *jit_objmodel_t;
typedef struct jitom_class *jitom_class_t;
typedef struct jitom_field *jitom_field_t;
typedef struct jitom_method *jitom_method_t;
# 73 "/usr/local/include/jit/jit-objmodel.h" 3
void jitom_destroy_model(jit_objmodel_t model) ;
jitom_class_t jitom_get_class_by_name
 (jit_objmodel_t model, const char *name) ;




char *jitom_class_get_name
 (jit_objmodel_t model, jitom_class_t klass) ;
int jitom_class_get_modifiers
 (jit_objmodel_t model, jitom_class_t klass) ;
jit_type_t jitom_class_get_type
 (jit_objmodel_t model, jitom_class_t klass) ;
jit_type_t jitom_class_get_value_type
 (jit_objmodel_t model, jitom_class_t klass) ;
jitom_class_t jitom_class_get_primary_super
 (jit_objmodel_t model, jitom_class_t klass) ;
jitom_class_t *jitom_class_get_all_supers
 (jit_objmodel_t model, jitom_class_t klass, unsigned int *num) ;
jitom_class_t *jitom_class_get_interfaces
 (jit_objmodel_t model, jitom_class_t klass, unsigned int *num) ;
jitom_field_t *jitom_class_get_fields
 (jit_objmodel_t model, jitom_class_t klass, unsigned int *num) ;
jitom_method_t *jitom_class_get_methods
 (jit_objmodel_t model, jitom_class_t klass, unsigned int *num) ;
jit_value_t jitom_class_new
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_method_t ctor, jit_function_t func,
  jit_value_t *args, unsigned int num_args, int flags) ;
jit_value_t jitom_class_new_value
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_method_t ctor, jit_function_t func,
  jit_value_t *args, unsigned int num_args, int flags) ;
int jitom_class_delete
 (jit_objmodel_t model, jitom_class_t klass,
  jit_value_t obj_value) ;
int jitom_class_add_ref
 (jit_objmodel_t model, jitom_class_t klass,
  jit_value_t obj_value) ;




char *jitom_field_get_name
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_field_t field) ;
jit_type_t jitom_field_get_type
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_field_t field) ;
int jitom_field_get_modifiers
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_field_t field) ;
jit_value_t jitom_field_load
 (jit_objmodel_t model, jitom_class_t klass, jitom_field_t field,
  jit_function_t func, jit_value_t obj_value) ;
jit_value_t jitom_field_load_address
 (jit_objmodel_t model, jitom_class_t klass, jitom_field_t field,
  jit_function_t func, jit_value_t obj_value) ;
int jitom_field_store
 (jit_objmodel_t model, jitom_class_t klass, jitom_field_t field,
  jit_function_t func, jit_value_t obj_value, jit_value_t value) ;




char *jitom_method_get_name
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_method_t method) ;
jit_type_t jitom_method_get_type
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_method_t method) ;
int jitom_method_get_modifiers
 (jit_objmodel_t model, jitom_class_t klass,
  jitom_method_t method) ;
jit_value_t jitom_method_invoke
 (jit_objmodel_t model, jitom_class_t klass, jitom_method_t method,
  jit_function_t func, jit_value_t *args,
  unsigned int num_args, int flags) ;
jit_value_t jitom_method_invoke_virtual
 (jit_objmodel_t model, jitom_class_t klass, jitom_method_t method,
  jit_function_t func, jit_value_t *args,
  unsigned int num_args, int flags) ;




jit_type_t jitom_type_tag_as_class
 (jit_type_t type, jit_objmodel_t model,
  jitom_class_t klass, int incref) ;
jit_type_t jitom_type_tag_as_value
 (jit_type_t type, jit_objmodel_t model,
  jitom_class_t klass, int incref) ;
int jitom_type_is_class(jit_type_t type) ;
int jitom_type_is_value(jit_type_t type) ;
jit_objmodel_t jitom_type_get_model(jit_type_t type) ;
jitom_class_t jitom_type_get_class(jit_type_t type) ;
# 42 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-opcode.h" 1 3
# 536 "/usr/local/include/jit/jit-opcode.h" 3
typedef struct jit_opcode_info jit_opcode_info_t;
struct jit_opcode_info
{
 const char *name;
 int flags;
};
# 604 "/usr/local/include/jit/jit-opcode.h" 3
extern jit_opcode_info_t const jit_opcodes[0x01A6];
# 43 "/usr/local/include/jit/jit.h" 2 3

# 1 "/usr/local/include/jit/jit-unwind.h" 1 3
# 27 "/usr/local/include/jit/jit-unwind.h" 3
# 1 "/usr/local/include/jit/jit-arch.h" 1 3
# 51 "/usr/local/include/jit/jit-arch.h" 3
typedef struct
{
 int ebx;
 int esi;
 int edi;
 int ebp;
 int esp;
} _jit_arch_unwind_t;
# 28 "/usr/local/include/jit/jit-unwind.h" 2 3





typedef struct
{
 void *frame;
 void *cache;
 jit_context_t context;



} jit_unwind_context_t;

int jit_unwind_init(jit_unwind_context_t *unwind, jit_context_t context);
void jit_unwind_free(jit_unwind_context_t *unwind);

int jit_unwind_next(jit_unwind_context_t *unwind);
int jit_unwind_next_pc(jit_unwind_context_t *unwind);
void *jit_unwind_get_pc(jit_unwind_context_t *unwind);

int jit_unwind_jump(jit_unwind_context_t *unwind, void *pc);

jit_function_t jit_unwind_get_function(jit_unwind_context_t *unwind);
unsigned int jit_unwind_get_offset(jit_unwind_context_t *unwind);
# 45 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-util.h" 1 3
# 33 "/usr/local/include/jit/jit-util.h" 3
void *jit_malloc(unsigned int size) ;
void *jit_calloc(unsigned int num, unsigned int size) ;
void *jit_realloc(void *ptr, unsigned int size) ;
void jit_free(void *ptr) ;
void *jit_malloc_exec(unsigned int size) ;
void jit_free_exec(void *ptr, unsigned int size) ;
void jit_flush_exec(void *ptr, unsigned int size) ;
unsigned int jit_exec_page_size(void) ;






void *jit_memset(void *dest, int ch, unsigned int len) ;
void *jit_memcpy(void *dest, const void *src, unsigned int len) ;
void *jit_memmove(void *dest, const void *src, unsigned int len) ;
int jit_memcmp(const void *s1, const void *s2, unsigned int len) ;
void *jit_memchr(const void *str, int ch, unsigned int len) ;




unsigned int jit_strlen(const char *str) ;
char *jit_strcpy(char *dest, const char *src) ;
char *jit_strcat(char *dest, const char *src) ;
char *jit_strncpy(char *dest, const char *src, unsigned int len) ;
char *jit_strdup(const char *str) ;
char *jit_strndup(const char *str, unsigned int len) ;
int jit_strcmp(const char *str1, const char *str2) ;
int jit_strncmp
 (const char *str1, const char *str2, unsigned int len) ;
int jit_stricmp(const char *str1, const char *str2) ;
int jit_strnicmp
 (const char *str1, const char *str2, unsigned int len) ;
char *jit_strchr(const char *str, int ch) ;
char *jit_strrchr(const char *str, int ch) ;
int jit_sprintf(char *str, const char *format, ...) ;
int jit_snprintf
 (char *str, unsigned int len, const char *format, ...) ;
# 46 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-value.h" 1 3
# 33 "/usr/local/include/jit/jit-value.h" 3
typedef struct
{
 jit_type_t type;
 union
 {
  void *ptr_value;
  jit_int int_value;
  jit_uint uint_value;
  jit_nint nint_value;
  jit_nuint nuint_value;
  jit_long long_value;
  jit_ulong ulong_value;
  jit_float32 float32_value;
  jit_float64 float64_value;
  jit_nfloat nfloat_value;

 } un;

} jit_constant_t;




jit_value_t jit_value_create(jit_function_t func, jit_type_t type) ;
jit_value_t jit_value_create_nint_constant
 (jit_function_t func, jit_type_t type, jit_nint const_value) ;
jit_value_t jit_value_create_long_constant
 (jit_function_t func, jit_type_t type, jit_long const_value) ;
jit_value_t jit_value_create_float32_constant
 (jit_function_t func, jit_type_t type,
  jit_float32 const_value) ;
jit_value_t jit_value_create_float64_constant
 (jit_function_t func, jit_type_t type,
  jit_float64 const_value) ;
jit_value_t jit_value_create_nfloat_constant
 (jit_function_t func, jit_type_t type,
  jit_nfloat const_value) ;
jit_value_t jit_value_create_constant
 (jit_function_t func, const jit_constant_t *const_value) ;
jit_value_t jit_value_get_param
 (jit_function_t func, unsigned int param) ;
jit_value_t jit_value_get_struct_pointer(jit_function_t func) ;
int jit_value_is_temporary(jit_value_t value) ;
int jit_value_is_local(jit_value_t value) ;
int jit_value_is_constant(jit_value_t value) ;
int jit_value_is_parameter(jit_value_t value) ;
void jit_value_ref(jit_function_t func, jit_value_t value) ;
void jit_value_set_volatile(jit_value_t value) ;
int jit_value_is_volatile(jit_value_t value) ;
void jit_value_set_addressable(jit_value_t value) ;
int jit_value_is_addressable(jit_value_t value) ;
jit_type_t jit_value_get_type(jit_value_t value) ;
jit_function_t jit_value_get_function(jit_value_t value) ;
jit_block_t jit_value_get_block(jit_value_t value) ;
jit_context_t jit_value_get_context(jit_value_t value) ;
jit_constant_t jit_value_get_constant(jit_value_t value) ;
jit_nint jit_value_get_nint_constant(jit_value_t value) ;
jit_long jit_value_get_long_constant(jit_value_t value) ;
jit_float32 jit_value_get_float32_constant(jit_value_t value) ;
jit_float64 jit_value_get_float64_constant(jit_value_t value) ;
jit_nfloat jit_value_get_nfloat_constant(jit_value_t value) ;
int jit_value_is_true(jit_value_t value) ;
int jit_constant_convert
 (jit_constant_t *result, const jit_constant_t *value,
  jit_type_t type, int overflow_check) ;
# 47 "/usr/local/include/jit/jit.h" 2 3
# 1 "/usr/local/include/jit/jit-walk.h" 1 3
# 34 "/usr/local/include/jit/jit-walk.h" 3
void *_jit_get_frame_address(void *start, unsigned int n);
# 70 "/usr/local/include/jit/jit-walk.h" 3
void *_jit_get_next_frame_address(void *frame);
# 86 "/usr/local/include/jit/jit-walk.h" 3
void *_jit_get_return_address(void *frame, void *frame0, void *return0);
# 132 "/usr/local/include/jit/jit-walk.h" 3
typedef struct { void * volatile mark; } jit_crawl_mark_t;






int jit_frame_contains_crawl_mark(void *frame, jit_crawl_mark_t *mark);
# 48 "/usr/local/include/jit/jit.h" 2 3
# 50 "bytecode.c" 2
# 94 "bytecode.c"
Lisp_Object Qbytecode;
# 286 "bytecode.c"
enum byte_code_op
{

    Bstack_ref = 0, Bstack_ref1 = 1, Bstack_ref2 = 2, Bstack_ref3 = 3, Bstack_ref4 = 4, Bstack_ref5 = 5, Bstack_ref6 = 6, Bstack_ref7 = 7, Bvarref = 010, Bvarref1 = 011, Bvarref2 = 012, Bvarref3 = 013, Bvarref4 = 014, Bvarref5 = 015, Bvarref6 = 016, Bvarref7 = 017, Bvarset = 020, Bvarset1 = 021, Bvarset2 = 022, Bvarset3 = 023, Bvarset4 = 024, Bvarset5 = 025, Bvarset6 = 026, Bvarset7 = 027, Bvarbind = 030, Bvarbind1 = 031, Bvarbind2 = 032, Bvarbind3 = 033, Bvarbind4 = 034, Bvarbind5 = 035, Bvarbind6 = 036, Bvarbind7 = 037, Bcall = 040, Bcall1 = 041, Bcall2 = 042, Bcall3 = 043, Bcall4 = 044, Bcall5 = 045, Bcall6 = 046, Bcall7 = 047, Bunbind = 050, Bunbind1 = 051, Bunbind2 = 052, Bunbind3 = 053, Bunbind4 = 054, Bunbind5 = 055, Bunbind6 = 056, Bunbind7 = 057, Bnth = 070, Bsymbolp = 071, Bconsp = 072, Bstringp = 073, Blistp = 074, Beq = 075, Bmemq = 076, Bnot = 077, Bcar = 0100, Bcdr = 0101, Bcons = 0102, Blist1 = 0103, Blist2 = 0104, Blist3 = 0105, Blist4 = 0106, Blength = 0107, Baref = 0110, Baset = 0111, Bsymbol_value = 0112, Bsymbol_function = 0113, Bset = 0114, Bfset = 0115, Bget = 0116, Bsubstring = 0117, Bconcat2 = 0120, Bconcat3 = 0121, Bconcat4 = 0122, Bsub1 = 0123, Badd1 = 0124, Beqlsign = 0125, Bgtr = 0126, Blss = 0127, Bleq = 0130, Bgeq = 0131, Bdiff = 0132, Bnegate = 0133, Bplus = 0134, Bmax = 0135, Bmin = 0136, Bmult = 0137, Bpoint = 0140, Bsave_current_buffer = 0141, Bgoto_char = 0142, Binsert = 0143, Bpoint_max = 0144, Bpoint_min = 0145, Bchar_after = 0146, Bfollowing_char = 0147, Bpreceding_char = 0150, Bcurrent_column = 0151, Bindent_to = 0152, Beolp = 0154, Beobp = 0155, Bbolp = 0156, Bbobp = 0157, Bcurrent_buffer = 0160, Bset_buffer = 0161, Bsave_current_buffer_1 = 0162, Binteractive_p = 0164, Bforward_char = 0165, Bforward_word = 0166, Bskip_chars_forward = 0167, Bskip_chars_backward = 0170, Bforward_line = 0171, Bchar_syntax = 0172, Bbuffer_substring = 0173, Bdelete_region = 0174, Bnarrow_to_region = 0175, Bwiden = 0176, Bend_of_line = 0177, Bconstant2 = 0201, Bgoto = 0202, Bgotoifnil = 0203, Bgotoifnonnil = 0204, Bgotoifnilelsepop = 0205, Bgotoifnonnilelsepop = 0206, Breturn = 0207, Bdiscard = 0210, Bdup = 0211, Bsave_excursion = 0212, Bsave_window_excursion = 0213, Bsave_restriction = 0214, Bcatch = 0215, Bunwind_protect = 0216, Bcondition_case = 0217, Btemp_output_buffer_setup = 0220, Btemp_output_buffer_show = 0221, Bunbind_all = 0222, Bset_marker = 0223, Bmatch_beginning = 0224, Bmatch_end = 0225, Bupcase = 0226, Bdowncase = 0227, Bstringeqlsign = 0230, Bstringlss = 0231, Bequal = 0232, Bnthcdr = 0233, Belt = 0234, Bmember = 0235, Bassq = 0236, Bnreverse = 0237, Bsetcar = 0240, Bsetcdr = 0241, Bcar_safe = 0242, Bcdr_safe = 0243, Bnconc = 0244, Bquo = 0245, Brem = 0246, Bnumberp = 0247, Bintegerp = 0250, BRgoto = 0252, BRgotoifnil = 0253, BRgotoifnonnil = 0254, BRgotoifnilelsepop = 0255, BRgotoifnonnilelsepop = 0256, BlistN = 0257, BconcatN = 0260, BinsertN = 0261, Bstack_set = 0262, Bstack_set2 = 0263, BdiscardN = 0266, Bjitcall = 0267, Bconstant = 0300,






};







struct byte_stack
{


  const unsigned char *pc;
# 319 "bytecode.c"
  Lisp_Object byte_string;
  const unsigned char *byte_string_start;



  Lisp_Object constants;


  struct byte_stack *next;
};







struct byte_stack *byte_stack_list;
# 371 "bytecode.c"
void
unmark_byte_stack (void)
{
  struct byte_stack *stack;

  for (stack = byte_stack_list; stack; stack = stack->next)
    {
      if (stack->byte_string_start != ((((void) (0 && ((((enum Lisp_Type) (((stack->byte_string)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((stack->byte_string) - (Lisp_String))))->data + 0))
 {
   ptrdiff_t offset = stack->pc - stack->byte_string_start;
   stack->byte_string_start = ((((void) (0 && ((((enum Lisp_Type) (((stack->byte_string)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((stack->byte_string) - (Lisp_String))))->data + 0);
   stack->pc = stack->byte_string_start + offset;
 }
    }
}
# 474 "bytecode.c"
struct bytecode_jit_core {
  struct byte_stack* pstack;
  Lisp_Object* top;
  Lisp_Object result;
  ptrdiff_t count;
};

# 1 "jit-bytecode.c" 1
# 1 "../lib/stdio.h" 1
# 20 "../lib/stdio.h"
       
# 21 "../lib/stdio.h" 3
# 43 "../lib/stdio.h" 3
# 1 "/usr/include/stdio.h" 1 3 4
# 30 "/usr/include/stdio.h" 3 4




# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 35 "/usr/include/stdio.h" 2 3 4
# 45 "/usr/include/stdio.h" 3 4
struct _IO_FILE;



typedef struct _IO_FILE FILE;





# 65 "/usr/include/stdio.h" 3 4
typedef struct _IO_FILE __FILE;
# 75 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/libio.h" 1 3 4
# 32 "/usr/include/libio.h" 3 4
# 1 "/usr/include/_G_config.h" 1 3 4
# 15 "/usr/include/_G_config.h" 3 4
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 16 "/usr/include/_G_config.h" 2 3 4




# 1 "/usr/include/wchar.h" 1 3 4
# 83 "/usr/include/wchar.h" 3 4
typedef struct
{
  int __count;
  union
  {

    unsigned int __wch;



    char __wchb[4];
  } __value;
} __mbstate_t;
# 21 "/usr/include/_G_config.h" 2 3 4

typedef struct
{
  __off_t __pos;
  __mbstate_t __state;
} _G_fpos_t;
typedef struct
{
  __off64_t __pos;
  __mbstate_t __state;
} _G_fpos64_t;
# 53 "/usr/include/_G_config.h" 3 4
typedef int _G_int16_t __attribute__ ((__mode__ (__HI__)));
typedef int _G_int32_t __attribute__ ((__mode__ (__SI__)));
typedef unsigned int _G_uint16_t __attribute__ ((__mode__ (__HI__)));
typedef unsigned int _G_uint32_t __attribute__ ((__mode__ (__SI__)));
# 33 "/usr/include/libio.h" 2 3 4
# 172 "/usr/include/libio.h" 3 4
struct _IO_jump_t; struct _IO_FILE;
# 182 "/usr/include/libio.h" 3 4
typedef void _IO_lock_t;





struct _IO_marker {
  struct _IO_marker *_next;
  struct _IO_FILE *_sbuf;



  int _pos;
# 205 "/usr/include/libio.h" 3 4
};


enum __codecvt_result
{
  __codecvt_ok,
  __codecvt_partial,
  __codecvt_error,
  __codecvt_noconv
};
# 273 "/usr/include/libio.h" 3 4
struct _IO_FILE {
  int _flags;




  char* _IO_read_ptr;
  char* _IO_read_end;
  char* _IO_read_base;
  char* _IO_write_base;
  char* _IO_write_ptr;
  char* _IO_write_end;
  char* _IO_buf_base;
  char* _IO_buf_end;

  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;



  int _flags2;

  __off_t _old_offset;



  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];



  _IO_lock_t *_lock;
# 321 "/usr/include/libio.h" 3 4
  __off64_t _offset;
# 330 "/usr/include/libio.h" 3 4
  void *__pad1;
  void *__pad2;
  void *__pad3;
  void *__pad4;
  size_t __pad5;

  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];

};


typedef struct _IO_FILE _IO_FILE;


struct _IO_FILE_plus;

extern struct _IO_FILE_plus _IO_2_1_stdin_;
extern struct _IO_FILE_plus _IO_2_1_stdout_;
extern struct _IO_FILE_plus _IO_2_1_stderr_;
# 366 "/usr/include/libio.h" 3 4
typedef __ssize_t __io_read_fn (void *__cookie, char *__buf, size_t __nbytes);







typedef __ssize_t __io_write_fn (void *__cookie, __const char *__buf,
     size_t __n);







typedef int __io_seek_fn (void *__cookie, __off64_t *__pos, int __w);


typedef int __io_close_fn (void *__cookie);




typedef __io_read_fn cookie_read_function_t;
typedef __io_write_fn cookie_write_function_t;
typedef __io_seek_fn cookie_seek_function_t;
typedef __io_close_fn cookie_close_function_t;


typedef struct
{
  __io_read_fn *read;
  __io_write_fn *write;
  __io_seek_fn *seek;
  __io_close_fn *close;
} _IO_cookie_io_functions_t;
typedef _IO_cookie_io_functions_t cookie_io_functions_t;

struct _IO_cookie_file;


extern void _IO_cookie_init (struct _IO_cookie_file *__cfile, int __read_write,
        void *__cookie, _IO_cookie_io_functions_t __fns);







extern int __underflow (_IO_FILE *);
extern int __uflow (_IO_FILE *);
extern int __overflow (_IO_FILE *, int);
# 462 "/usr/include/libio.h" 3 4
extern int _IO_getc (_IO_FILE *__fp);
extern int _IO_putc (int __c, _IO_FILE *__fp);
extern int _IO_feof (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ferror (_IO_FILE *__fp) __attribute__ ((__nothrow__ , __leaf__));

extern int _IO_peekc_locked (_IO_FILE *__fp);





extern void _IO_flockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern void _IO_funlockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
extern int _IO_ftrylockfile (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 492 "/usr/include/libio.h" 3 4
extern int _IO_vfscanf (_IO_FILE * __restrict, const char * __restrict,
   __gnuc_va_list, int *__restrict);
extern int _IO_vfprintf (_IO_FILE *__restrict, const char *__restrict,
    __gnuc_va_list);
extern __ssize_t _IO_padn (_IO_FILE *, int, __ssize_t);
extern size_t _IO_sgetn (_IO_FILE *, void *, size_t);

extern __off64_t _IO_seekoff (_IO_FILE *, __off64_t, int, int);
extern __off64_t _IO_seekpos (_IO_FILE *, __off64_t, int);

extern void _IO_free_backup_area (_IO_FILE *) __attribute__ ((__nothrow__ , __leaf__));
# 76 "/usr/include/stdio.h" 2 3 4
# 109 "/usr/include/stdio.h" 3 4




typedef _G_fpos64_t fpos_t;



typedef _G_fpos64_t fpos64_t;
# 165 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/i386-linux-gnu/bits/stdio_lim.h" 1 3 4
# 166 "/usr/include/stdio.h" 2 3 4



extern struct _IO_FILE *stdin;
extern struct _IO_FILE *stdout;
extern struct _IO_FILE *stderr;







extern int remove (__const char *__filename) __attribute__ ((__nothrow__ , __leaf__));

extern int rename (__const char *__old, __const char *__new) __attribute__ ((__nothrow__ , __leaf__));




extern int renameat (int __oldfd, __const char *__old, int __newfd,
       __const char *__new) __attribute__ ((__nothrow__ , __leaf__));



# 199 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile (void) __asm__ ("" "tmpfile64") ;






extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;





extern char *tmpnam_r (char *__s) __attribute__ ((__nothrow__ , __leaf__)) ;
# 228 "/usr/include/stdio.h" 3 4
extern char *tempnam (__const char *__dir, __const char *__pfx)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__malloc__)) ;








extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);

# 253 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 263 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);




# 284 "/usr/include/stdio.h" 3 4
extern FILE *fopen (__const char *__restrict __filename, __const char *__restrict __modes) __asm__ ("" "fopen64")

  ;
extern FILE *freopen (__const char *__restrict __filename, __const char *__restrict __modes, FILE *__restrict __stream) __asm__ ("" "freopen64")


  ;







extern FILE *fopen64 (__const char *__restrict __filename,
        __const char *__restrict __modes) ;
extern FILE *freopen64 (__const char *__restrict __filename,
   __const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, __const char *__modes) __attribute__ ((__nothrow__ , __leaf__)) ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     __const char *__restrict __modes,
     _IO_cookie_io_functions_t __io_funcs) __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *fmemopen (void *__s, size_t __len, __const char *__modes)
  __attribute__ ((__nothrow__ , __leaf__)) ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) __attribute__ ((__nothrow__ , __leaf__)) ;






extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) __attribute__ ((__nothrow__ , __leaf__));



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) __attribute__ ((__nothrow__ , __leaf__));





extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) __attribute__ ((__nothrow__ , __leaf__));


extern void setlinebuf (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));








extern int fprintf (FILE *__restrict __stream,
      __const char *__restrict __format, ...);




extern int printf (__const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      __const char *__restrict __format, ...) __attribute__ ((__nothrow__));





extern int vfprintf (FILE *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (__const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, __const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));





extern int snprintf (char *__restrict __s, size_t __maxlen,
       __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 3, 0)));






extern int vasprintf (char **__restrict __ptr, __const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         __const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       __const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
# 418 "/usr/include/stdio.h" 3 4
extern int vdprintf (int __fd, __const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, __const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));








extern int fscanf (FILE *__restrict __stream,
     __const char *__restrict __format, ...) ;




extern int scanf (__const char *__restrict __format, ...) ;

extern int sscanf (__const char *__restrict __s,
     __const char *__restrict __format, ...) __attribute__ ((__nothrow__ , __leaf__));
# 469 "/usr/include/stdio.h" 3 4








extern int vfscanf (FILE *__restrict __s, __const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (__const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (__const char *__restrict __s,
      __const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__format__ (__scanf__, 2, 0)));
# 528 "/usr/include/stdio.h" 3 4









extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);

# 556 "/usr/include/stdio.h" 3 4
extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 567 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);











extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);

# 600 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);








extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;






extern char *gets (char *__s) ;

# 646 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 662 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
          size_t *__restrict __n, int __delimiter,
          FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
        size_t *__restrict __n, int __delimiter,
        FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
       size_t *__restrict __n,
       FILE *__restrict __stream) ;








extern int fputs (__const char *__restrict __s, FILE *__restrict __stream);





extern int puts (__const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (__const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);

# 723 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (__const char *__restrict __s,
      FILE *__restrict __stream);
# 734 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (__const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);








extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);

# 778 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off64_t __off, int __whence) __asm__ ("" "fseeko64")

                  ;
extern __off64_t ftello (FILE *__stream) __asm__ ("" "ftello64");








# 803 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos) __asm__ ("" "fgetpos64")
                                          ;
extern int fsetpos (FILE *__stream, __const fpos_t *__pos) __asm__ ("" "fsetpos64")
                                                            ;








extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, __const fpos64_t *__pos);




extern void clearerr (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));

extern int feof (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;

extern int ferror (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern void clearerr_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
extern int feof_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
extern int ferror_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;








extern void perror (__const char *__s);






# 1 "/usr/include/i386-linux-gnu/bits/sys_errlist.h" 1 3 4
# 27 "/usr/include/i386-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern __const char *__const sys_errlist[];


extern int _sys_nerr;
extern __const char *__const _sys_errlist[];
# 851 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;




extern int fileno_unlocked (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;
# 870 "/usr/include/stdio.h" 3 4
extern FILE *popen (__const char *__command, __const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) __attribute__ ((__nothrow__ , __leaf__));





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      __const char *__restrict __format, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       __const char *__restrict __format,
       __gnuc_va_list __args)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));



extern int ftrylockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__)) ;


extern void funlockfile (FILE *__stream) __attribute__ ((__nothrow__ , __leaf__));
# 940 "/usr/include/stdio.h" 3 4

# 44 "../lib/stdio.h" 2 3
# 53 "../lib/stdio.h" 3
# 1 "/usr/lib/gcc/i686-linux-gnu/4.6/include/stddef.h" 1 3 4
# 54 "../lib/stdio.h" 2 3
# 538 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 553 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 596 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 647 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 662 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 677 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 717 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 887 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy
                                                                      ;
# 907 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;
# 919 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 933 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1170 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1193 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1207 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1221 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1323 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 1506 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy
                                                                    ;

extern int _gl_cxxalias_dummy;
# 1561 "../lib/stdio.h" 3
extern int _gl_cxxalias_dummy;

extern int _gl_cxxalias_dummy;
# 2 "jit-bytecode.c" 2

static jit_context_t bytecode_jit_context;
static jit_type_t bytecode_jitcall_signature;
static jit_type_t bytecode_jit_core_signature;
static jit_type_t bytecode_jit_goto_signature;
static jit_type_t bytecode_jit_op_signature;
static jit_type_t bytecode_jit_vector_ref_signature;
# 86 "jit-bytecode.c"
__attribute__((fastcall)) static void bytecode_jit_varref(struct bytecode_jit_core* core, Lisp_Object* vectorp, int op)
{
  fprintf(stderr, "varref 1 core->stack: 0x%x\n", core->pstack);
  {
    Lisp_Object v1, v2;

    v1 = vectorp[op];
    if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol))
      {
        if ((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((v1) - (Lisp_Symbol))))->redirect != SYMBOL_PLAINVAL
            || (v2 = (((void) (0 && (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((v1) - (Lisp_Symbol)))))->redirect == SYMBOL_PLAINVAL))), (((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((v1) - (Lisp_Symbol))))->val.value),
                ((v2) == (Qunbound))))
          {
            ((void)0);
            v2 = Fsymbol_value (v1);
            ((void)0);
          }
      }
    else
      {
        ((void)0);
        v2 = Fsymbol_value (v1);
        ((void)0);
      }
    (core->top++, *core->top = (v2));
# 132 "jit-bytecode.c"
  fprintf(stderr, "varref core: 0x%x\n", core);
  fprintf(stderr, "varref 2 core->stack: 0x%x\n", core->pstack);
  fprintf(stderr, "varref top: 0x%x\n", core->top[0]);
}

__attribute__((fastcall)) static void bytecode_jit_car(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
    (*core->top) = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->car)));
  else if (((v1) == (Qnil)))
    (*core->top) = Qnil;
  else
    {
      ((void)0);
      wrong_type_argument (Qlistp, v1);
      ((void)0);
    }
}

__attribute__((fastcall)) static void bytecode_jit_eq(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top--);
  (*core->top) = ((v1) == ((*core->top))) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_memq(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fmemq ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_cdr(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
    (*core->top) = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->u.cdr)));
  else if (((v1) == (Qnil)))
    (*core->top) = Qnil;
  else
    {
      ((void)0);
      wrong_type_argument (Qlistp, v1);
      ((void)0);
    }
}

__attribute__((fastcall)) static void bytecode_jit_varset(struct bytecode_jit_core* core, Lisp_Object* vectorp, int op)
{
  {
    Lisp_Object sym, val;

    sym = vectorp[op];
    val = (*core->top);


    if ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)
        && !((val) == (Qunbound))
        && !(((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->redirect
        && !(((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->constant)
      (((void) (0 && (((((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol)))))->redirect == SYMBOL_PLAINVAL))), ((((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol)))))->val.value = (val));
    else
      {
        ((void)0);
        set_internal (sym, val, Qnil, 0);
        ((void)0);
      }
  }
  (void) (*core->top--);
# 228 "jit-bytecode.c"
}

__attribute__((fastcall)) static void bytecode_jit_dup(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_varbind(struct bytecode_jit_core* core, Lisp_Object* vectorp, int op)
{
  ((void)0);
  specbind (vectorp[op], (*core->top--));
  ((void)0);






}

__attribute__((fastcall)) static void bytecode_jit_call(struct bytecode_jit_core* core, int op)
{
  ((void)0);
  (core->top -= (op));
  int i;
  fprintf(stderr, "call core: 0x%x\n", core);
  fprintf(stderr, "call core->stack: 0x%x\n", core->pstack);
  for(i = 0; i < op +1 ; i++) {
    fprintf(stderr, "call stack+%d: 0x%x\n", i, core->top[i]);
  }
  (*core->top) = Ffuncall (op + 1, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_unbind(struct bytecode_jit_core* core, int op)
{
  ((void)0);
  unbind_to ((specpdl_ptr - specpdl) - op, Qnil);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_unbind_all(struct bytecode_jit_core* core)
{


  ((void)0);
  unbind_to (core->count, Qnil);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_goto(struct bytecode_jit_core* core)
{
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
}

__attribute__((fastcall)) static int bytecode_jit_gotoifnil(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  v1 = (*core->top--);
  if (((v1) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;
    }
  return 0;
}

__attribute__((fastcall)) static int bytecode_jit_gotoifnonnil(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  v1 = (*core->top--);
  if (!((v1) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;
    }
  return 0;
}

__attribute__((fastcall)) static int bytecode_jit_gotoifnilelsepop(struct bytecode_jit_core* core)
{
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  if ((((*core->top)) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;
    }
  else (core->top -= (1));
  return 0;
}

__attribute__((fastcall)) static int bytecode_jit_gotoifnonnilelsepop(struct bytecode_jit_core* core)
{
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  if (!(((*core->top)) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;
    }
  else (core->top -= (1));
  return 0;
}

__attribute__((fastcall)) static int bytecode_jit_Rgoto(struct bytecode_jit_core* core)
{
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
  return 1;

}

__attribute__((fastcall)) static int bytecode_jit_Rgotoifnil(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  v1 = (*core->top--);
  if (((v1) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;

    }


}

__attribute__((fastcall)) static int bytecode_jit_Rgotoifnonnil(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  v1 = (*core->top--);
  if (!((v1) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;

    }

  return 0;
}

__attribute__((fastcall)) static int bytecode_jit_Rgotoifnilelsepop(struct bytecode_jit_core* core)
{
  do { ((void)0); maybe_gc (); ((void)0); } while (0);

  if ((((*core->top)) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;

    }
  else (core->top -= (1));
  return 0;
}

__attribute__((fastcall)) static int bytecode_jit_Rgotoifnonnilelsepop(struct bytecode_jit_core* core)
{
  do { ((void)0); maybe_gc (); ((void)0); } while (0);
  int op = *core->pstack->pc++;
  if (!(((*core->top)) == (Qnil)))
    {
      do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
      return 1;

    }
  else (core->top -= (1));
  return 0;
}

__attribute__((fastcall)) static void bytecode_jit_discard(struct bytecode_jit_core* core)
{
  (core->top -= (1));
}

__attribute__((fastcall)) static void bytecode_jit_constant2(struct bytecode_jit_core* core, Lisp_Object* vectorp, int op)
{
  (core->top++, *core->top = (vectorp[op]));



}

__attribute__((fastcall)) static void bytecode_jit_save_excursion(struct bytecode_jit_core* core)
{
  record_unwind_protect (save_excursion_restore,
                         save_excursion_save ());
}

__attribute__((fastcall)) static void bytecode_jit_save_current_buffer(struct bytecode_jit_core* core)
{
  record_unwind_current_buffer ();
}

__attribute__((fastcall)) static void bytecode_jit_save_window_excursion(struct bytecode_jit_core* core)
{
  register ptrdiff_t count1 = (specpdl_ptr - specpdl);
  record_unwind_protect (Fset_window_configuration,
                         Fcurrent_window_configuration (Qnil));
  ((void)0);
  (*core->top) = Fprogn ((*core->top));
  unbind_to (count1, (*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_save_restriction(struct bytecode_jit_core* core)
{
  record_unwind_protect (save_restriction_restore,
                         save_restriction_save ());
}

__attribute__((fastcall)) static void bytecode_jit_catch(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = internal_catch ((*core->top), eval_sub, v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_unwind_protect(struct bytecode_jit_core* core)
{
  record_unwind_protect (Fprogn, (*core->top--));
}

__attribute__((fastcall)) static void bytecode_jit_condition_case(struct bytecode_jit_core* core)
{
  Lisp_Object handlers, body;
  handlers = (*core->top--);
  body = (*core->top--);
  ((void)0);
  (*core->top) = internal_lisp_condition_case ((*core->top), body, handlers);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_temp_output_buffer_setup(struct bytecode_jit_core* core)
{
  ((void)0);
  do { if (!((((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_String))) wrong_type_argument (Qstringp, ((*core->top))); } while (0);
  temp_output_buffer_setup (((char *) ((((void) (0 && ((((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) (((*core->top)) - (Lisp_String))))->data + 0)));
  ((void)0);
  (*core->top) = globals.f_Vstandard_output;
}

__attribute__((fastcall)) static void bytecode_jit_temp_output_buffer_show(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  temp_output_buffer_show ((*core->top));
  (*core->top) = v1;

  unbind_to ((specpdl_ptr - specpdl) - 1, Qnil);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_nth(struct bytecode_jit_core* core)
{
  Lisp_Object v1, v2;
  EMACS_INT n;
  ((void)0);
  v1 = (*core->top--);
  v2 = (*core->top);
  do { if (!(((((((enum Lisp_Type) (((v2)) & TYPEMASK))) & ~Lisp_Int1) == 0)))) wrong_type_argument (Qintegerp, (v2)); } while (0);
  n = ((v2) >> INTTYPEBITS);
  immediate_quit = 1;
  while (--n >= 0 && (((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
    v1 = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->u.cdr)));
  immediate_quit = 0;
  (*core->top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->car))) : (((v1)) == (Qnil)) ? Qnil : wrong_type_argument (Qlistp, (v1)));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_symbolp(struct bytecode_jit_core* core)
{
  (*core->top) = (((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_Symbol) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_consp(struct bytecode_jit_core* core)
{
  (*core->top) = (((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_Cons) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_stringp(struct bytecode_jit_core* core)
{
  (*core->top) = (((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_String) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_listp(struct bytecode_jit_core* core)
{
  (*core->top) = (((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_Cons) || (((*core->top)) == (Qnil)) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_not(struct bytecode_jit_core* core)
{
  (*core->top) = (((*core->top)) == (Qnil)) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_cons(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top--);
  (*core->top) = Fcons ((*core->top), v1);
}

__attribute__((fastcall)) static void bytecode_jit_list1(struct bytecode_jit_core* core)
{
  (*core->top) = Fcons ((*core->top), Qnil);
}

__attribute__((fastcall)) static void bytecode_jit_list2(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top--);
  (*core->top) = Fcons ((*core->top), Fcons (v1, Qnil));
}

__attribute__((fastcall)) static void bytecode_jit_list3(struct bytecode_jit_core* core)
{
  (core->top -= (2));
  (*core->top) = Flist (3, &(*core->top));
}

__attribute__((fastcall)) static void bytecode_jit_list4(struct bytecode_jit_core* core)
{
  (core->top -= (3));
  (*core->top) = Flist (4, &(*core->top));
}

__attribute__((fastcall)) static void bytecode_jit_listN(struct bytecode_jit_core* core, int op)
{
  (core->top -= (op - 1));
  (*core->top) = Flist (op, &(*core->top));
}

__attribute__((fastcall)) static void bytecode_jit_length(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Flength ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_aref(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Faref ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_aset(struct bytecode_jit_core* core)
{
  Lisp_Object v1, v2;
  ((void)0);
  v2 = (*core->top--); v1 = (*core->top--);
  (*core->top) = Faset ((*core->top), v1, v2);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_symbol_value(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fsymbol_value ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_symbol_function(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fsymbol_function ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_set(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fset ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_fset(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Ffset ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_get(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fget ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_substring(struct bytecode_jit_core* core)
{
  Lisp_Object v1, v2;
  ((void)0);
  v2 = (*core->top--); v1 = (*core->top--);
  (*core->top) = Fsubstring ((*core->top), v1, v2);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_concat2(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fconcat (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_concat3(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (2));
  (*core->top) = Fconcat (3, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_concat4(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (3));
  (*core->top) = Fconcat (4, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_concatN(struct bytecode_jit_core* core, int op)
{
  ((void)0);
  (core->top -= (op - 1));
  (*core->top) = Fconcat (op, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_sub1(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  if (((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
    {
      ((v1) = ((EMACS_INT) (((v1) >> INTTYPEBITS) - 1) << INTTYPEBITS));
      (*core->top) = v1;
    }
  else
    {
      ((void)0);
      (*core->top) = Fsub1 (v1);
      ((void)0);
    }
}

__attribute__((fastcall)) static void bytecode_jit_add1(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  if (((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
    {
      ((v1) = ((EMACS_INT) (((v1) >> INTTYPEBITS) + 1) << INTTYPEBITS));
      (*core->top) = v1;
    }
  else
    {
      ((void)0);
      (*core->top) = Fadd1 (v1);
      ((void)0);
    }
}

__attribute__((fastcall)) static void bytecode_jit_eqlsign(struct bytecode_jit_core* core)
{
  Lisp_Object v1, v2;
  ((void)0);
  v2 = (*core->top--); v1 = (*core->top);
  do { if (((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Misc) && ((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Misc)))), &(((union Lisp_Misc *) ((intptr_t) ((v1) - (Lisp_Misc))))->u_any))->type) == Lisp_Misc_Marker)) (((v1) = ((EMACS_INT) (marker_position (v1)) << INTTYPEBITS))); else do { if (!(((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)) || (((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float))) wrong_type_argument (Qnumber_or_marker_p, (v1)); } while (0); } while (0);
  do { if (((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Misc) && ((((void) (0 && ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Misc)))), &(((union Lisp_Misc *) ((intptr_t) ((v2) - (Lisp_Misc))))->u_any))->type) == Lisp_Misc_Marker)) (((v2) = ((EMACS_INT) (marker_position (v2)) << INTTYPEBITS))); else do { if (!(((((((enum Lisp_Type) (((v2)) & TYPEMASK))) & ~Lisp_Int1) == 0)) || (((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float))) wrong_type_argument (Qnumber_or_marker_p, (v2)); } while (0); } while (0);
  ((void)0);
  if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float) || (((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float))
    {
      double f1, f2;

      f1 = ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float) ? (0 ? (((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v1) - (Lisp_Float))))->u.data : (((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v1) - (Lisp_Float))))->u.data) : ((v1) >> INTTYPEBITS));
      f2 = ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float) ? (0 ? (((void) (0 && ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v2) - (Lisp_Float))))->u.data : (((void) (0 && ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v2) - (Lisp_Float))))->u.data) : ((v2) >> INTTYPEBITS));
      (*core->top) = (f1 == f2 ? Qt : Qnil);
    }
  else
    (*core->top) = (((v1) >> INTTYPEBITS) == ((v2) >> INTTYPEBITS) ? Qt : Qnil);
}

__attribute__((fastcall)) static void bytecode_jit_gtr(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fgtr ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_lss(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Flss ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_leq(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fleq ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_geq(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fgeq ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_diff(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fminus (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_negate(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  if (((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
    {
      ((v1) = ((EMACS_INT) (- ((v1) >> INTTYPEBITS)) << INTTYPEBITS));
      (*core->top) = v1;
    }
  else
    {
      ((void)0);
      (*core->top) = Fminus (1, &(*core->top));
      ((void)0);
    }
}

__attribute__((fastcall)) static void bytecode_jit_plus(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fplus (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_max(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fmax (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_min(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fmin (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_mult(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Ftimes (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_quo(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fquo (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_rem(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Frem ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_point(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  (((v1) = ((EMACS_INT) ((current_buffer->pt + 0)) << INTTYPEBITS)));
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_goto_char(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fgoto_char ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_insert(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Finsert (1, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_insertN(struct bytecode_jit_core* core, int op)
{
  ((void)0);
  (core->top -= (op - 1));
  (*core->top) = Finsert (op, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_point_max(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  (((v1) = ((EMACS_INT) ((current_buffer->zv)) << INTTYPEBITS)));
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_point_min(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  (((v1) = ((EMACS_INT) ((current_buffer->begv)) << INTTYPEBITS)));
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_char_after(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fchar_after ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_following_char(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = Ffollowing_char ();
  ((void)0);
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_preceding_char(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = Fprevious_char ();
  ((void)0);
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_current_column(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  (((v1) = ((EMACS_INT) (current_column ()) << INTTYPEBITS)));
  ((void)0);
  (core->top++, *core->top = (v1));
}

__attribute__((fastcall)) static void bytecode_jit_indent_to(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Findent_to ((*core->top), Qnil);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_eolp(struct bytecode_jit_core* core)
{
  (core->top++, *core->top = (Feolp ()));
}

__attribute__((fastcall)) static void bytecode_jit_eobp(struct bytecode_jit_core* core)
{
  (core->top++, *core->top = (Feobp ()));
}

__attribute__((fastcall)) static void bytecode_jit_bolp(struct bytecode_jit_core* core)
{
  (core->top++, *core->top = (Fbolp ()));
}

__attribute__((fastcall)) static void bytecode_jit_bobp(struct bytecode_jit_core* core)
{
  (core->top++, *core->top = (Fbobp ()));
}

__attribute__((fastcall)) static void bytecode_jit_current_buffer(struct bytecode_jit_core* core)
{
  (core->top++, *core->top = (Fcurrent_buffer ()));
}

__attribute__((fastcall)) static void bytecode_jit_set_buffer(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fset_buffer ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_interactive_p(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top++, *core->top = (call0 (intern ("interactive-p"))));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_forward_char(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fforward_char ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_forward_word(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fforward_word ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_skip_chars_forward(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fskip_chars_forward ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_skip_chars_backward(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fskip_chars_backward ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_forward_line(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fforward_line ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_char_syntax(struct bytecode_jit_core* core)
{
  int c;

  ((void)0);
  do { if (!(((((((((enum Lisp_Type) ((((*core->top))) & TYPEMASK))) & ~Lisp_Int1) == 0)) && (((*core->top)) >> INTTYPEBITS) >= 0) && ((((*core->top)) >> INTTYPEBITS)) <= 0x3FFFFF))) wrong_type_argument (Qcharacterp, ((*core->top))); } while (0);
  ((void)0);
  c = ((((*core->top)) >> INTTYPEBITS));
  if (((((current_buffer)->enable_multibyte_characters_)) == (Qnil)))
    (((void) (0 && ((c) >= 0 && (c) < 256))), (c) = ((((sizeof ((c) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof ((c) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? ((c) + (unsigned) 0) < ((0x80) + (unsigned) 0) : ((c) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) ? (c) : ((c) + 0x3FFF00)));
  ((((*core->top)) = ((EMACS_INT) (syntax_code_spec[(int) ({ Lisp_Object _syntax_temp; _syntax_temp = ((((sizeof (((c)) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof (((c)) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? (((c)) + (unsigned) 0) < ((0x80) + (unsigned) 0) : (((c)) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) ? ({struct Lisp_Char_Table *_tbl = ((void *)0); Lisp_Object _val; do { _tbl = _tbl ? (((void) (0 && (((((enum Lisp_Type) (((_tbl->parent)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike)))) : (((void) (0 && (((((enum Lisp_Type) ((((((current_buffer)->syntax_table_)))) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) (((((current_buffer)->syntax_table_))) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) (((((current_buffer)->syntax_table_))) - (Lisp_Vectorlike)))); _val = (! ((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS)))) ? _tbl->ascii : (((void) (0 && (((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), ((struct Lisp_Sub_Char_Table *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike)))))->contents[((c))]); if (((_val) == (Qnil))) _val = _tbl->defalt; } while (((_val) == (Qnil)) && ! ((_tbl->parent) == (Qnil))); _val; }) : char_table_ref ((((current_buffer)->syntax_table_)), ((c)))); ((((enum Lisp_Type) (((_syntax_temp)) & TYPEMASK)) == Lisp_Cons) ? (enum syntaxcode) ((((0 + (((((void) (0 && ((((enum Lisp_Type) (((_syntax_temp)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((_syntax_temp) - (Lisp_Cons))))->car)))) >> INTTYPEBITS) & 0xff) : Swhitespace); })]) << INTTYPEBITS)));
}

__attribute__((fastcall)) static void bytecode_jit_buffer_substring(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fbuffer_substring ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_delete_region(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fdelete_region ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_narrow_to_region(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fnarrow_to_region ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_widen(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top++, *core->top = (Fwiden ()));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_end_of_line(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fend_of_line ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_set_marker(struct bytecode_jit_core* core)
{
  Lisp_Object v1, v2;
  ((void)0);
  v1 = (*core->top--);
  v2 = (*core->top--);
  (*core->top) = Fset_marker ((*core->top), v2, v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_match_beginning(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fmatch_beginning ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_match_end(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fmatch_end ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_upcase(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fupcase ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_downcase(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fdowncase ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_stringeqlsign(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fstring_equal ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_stringlss(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fstring_lessp ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_equal(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top--);
  (*core->top) = Fequal ((*core->top), v1);
}

__attribute__((fastcall)) static void bytecode_jit_nthcdr(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fnthcdr ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_elt(struct bytecode_jit_core* core)
{
  Lisp_Object v1, v2;
  if ((((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_Cons))
    {

      EMACS_INT n;
      ((void)0);
      v2 = (*core->top--);
      v1 = (*core->top);
      do { if (!(((((((enum Lisp_Type) (((v2)) & TYPEMASK))) & ~Lisp_Int1) == 0)))) wrong_type_argument (Qintegerp, (v2)); } while (0);
      ((void)0);
      n = ((v2) >> INTTYPEBITS);
      immediate_quit = 1;
      while (--n >= 0 && (((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
        v1 = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->u.cdr)));
      immediate_quit = 0;
      (*core->top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->car))) : (((v1)) == (Qnil)) ? Qnil : wrong_type_argument (Qlistp, (v1)));
    }
  else
    {
      ((void)0);
      v1 = (*core->top--);
      (*core->top) = Felt ((*core->top), v1);
      ((void)0);
    }
}

__attribute__((fastcall)) static void bytecode_jit_member(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fmember ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_assq(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fassq ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_nreverse(struct bytecode_jit_core* core)
{
  ((void)0);
  (*core->top) = Fnreverse ((*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_setcar(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fsetcar ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_setcdr(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  ((void)0);
  v1 = (*core->top--);
  (*core->top) = Fsetcdr ((*core->top), v1);
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_car_safe(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  (*core->top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->car))) : Qnil);
}

__attribute__((fastcall)) static void bytecode_jit_cdr_safe(struct bytecode_jit_core* core)
{
  Lisp_Object v1;
  v1 = (*core->top);
  (*core->top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->u.cdr))) : Qnil);
}

__attribute__((fastcall)) static void bytecode_jit_nconc(struct bytecode_jit_core* core)
{
  ((void)0);
  (core->top -= (1));
  (*core->top) = Fnconc (2, &(*core->top));
  ((void)0);
}

__attribute__((fastcall)) static void bytecode_jit_numberp(struct bytecode_jit_core* core)
{
  (*core->top) = ((((((((enum Lisp_Type) ((((*core->top))) & TYPEMASK))) & ~Lisp_Int1) == 0)) || (((enum Lisp_Type) ((((*core->top))) & TYPEMASK)) == Lisp_Float)) ? Qt : Qnil);
}

__attribute__((fastcall)) static void bytecode_jit_integerp(struct bytecode_jit_core* core)
{
  (*core->top) = ((((((enum Lisp_Type) ((((*core->top))) & TYPEMASK))) & ~Lisp_Int1) == 0)) ? Qt : Qnil;
}

__attribute__((fastcall)) static void bytecode_jit_stack_ref(struct bytecode_jit_core* core, int op)
{
  Lisp_Object *ptr = core->top - op;
  (core->top++, *core->top = (*ptr));
}

__attribute__((fastcall)) static void bytecode_jit_stack_set(struct bytecode_jit_core* core, int op)

{
  Lisp_Object *ptr = core->top - (op);
  *ptr = (*core->top--);
}

__attribute__((fastcall)) static void bytecode_jit_stack_set2(struct bytecode_jit_core* core, int op)
{
  Lisp_Object *ptr = core->top - (op);
  *ptr = (*core->top--);
}

__attribute__((fastcall)) static void bytecode_jit_discardN(struct bytecode_jit_core* core, int op)
{
  if (op & 0x80)
    {
      op &= 0x7F;
      core->top[-op] = (*core->top);
    }
  (core->top -= (op));
}

__attribute__((fastcall)) static void bytecode_jit_constant(struct bytecode_jit_core* core, Lisp_Object* vectorp, int op)
{
  (core->top++, *core->top = (vectorp[op]));



  fprintf(stderr, "constant core: 0x%x\n", core);
  fprintf(stderr, "constant core->stack: 0x%x\n", core->pstack);
  fprintf(stderr, "constant top: 0x%x\n", core->top[0]);
}

__attribute__((fastcall)) static void bytecode_jit_return(struct bytecode_jit_core* core)
{
  core->result = (*core->top--);
}

__attribute__((fastcall)) static void bytecode_jit_jitcall(struct bytecode_jit_core* core)
{

  jit_function_t code = *(jit_function_t*)(core->pstack->pc);


  void* args[1] = { &core };
  jit_function_apply(code, args, ((void *)0));


  core->pstack->pc += sizeof(jit_function_t);
}

Lisp_Object jit_bytecode_compile(Lisp_Object fun) {
  Lisp_Object bytestr = (((void) (0 && ((((enum Lisp_Type) ((((fun))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((fun)) - (Lisp_Vectorlike))))->contents[COMPILED_BYTECODE];
  Lisp_Object vector = (((void) (0 && ((((enum Lisp_Type) ((((fun))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((fun)) - (Lisp_Vectorlike))))->contents[COMPILED_CONSTANTS];
  Lisp_Object maxdepth = (((void) (0 && ((((enum Lisp_Type) ((((fun))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((fun)) - (Lisp_Vectorlike))))->contents[COMPILED_STACK_DEPTH];
  unsigned char* cur_insn;
  int op, bytes_fetched = 0;
  int bytestr_length;

  fprintf(stderr, "jit_bytecode_compile\n");
  do { if (!((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String))) wrong_type_argument (Qstringp, (bytestr)); } while (0);
  do { if (!(((((enum Lisp_Type) (((vector)) & TYPEMASK)) == Lisp_Vectorlike) && !((((void) (0 && ((((enum Lisp_Type) ((((vector))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((vector)) - (Lisp_Vectorlike))))->header.size & ((2147483647) - (2147483647) / 2))))) wrong_type_argument (Qvectorp, (vector)); } while (0);
  do { if (!((((((((enum Lisp_Type) (((maxdepth)) & TYPEMASK))) & ~Lisp_Int1) == 0)) && ((maxdepth) >> INTTYPEBITS) >= 0))) wrong_type_argument (Qwholenump, (maxdepth)); } while (0);

  Lisp_Object args2[2];
  args2[0] = build_string("vector: %s\n");
  args2[1] = vector;
  Fmessage(2, args2);

  unsigned char *bytecode_start = cur_insn = ((((void) (0 && ((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((bytestr) - (Lisp_String))))->data + 0);
  if(*bytecode_start == Bjitcall) {

      return Qt;
  }



  bytestr_length = ((((((void) (0 && ((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((bytestr) - (Lisp_String)))))->size_byte < 0 ? ((((void) (0 && ((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((bytestr) - (Lisp_String)))))->size : ((((void) (0 && ((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((bytestr) - (Lisp_String)))))->size_byte) + 0);




  Lisp_Object *vectorp;
  vectorp = (((void) (0 && ((((enum Lisp_Type) (((vector)) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) ((vector) - (Lisp_Vectorlike))))->contents;

  int i;




  jit_label_t labels[bytestr_length];
  int num_labels = bytestr_length;
  for(i = 0; i < num_labels; i++) {
    labels[i] = ((jit_label_t)~((jit_uint)0));
  }

  jit_context_build_start(bytecode_jit_context);







  jit_function_t function = jit_function_create(bytecode_jit_context,
                                                bytecode_jitcall_signature);

  jit_value_t _core;
  _core = jit_value_get_param(function, 0);
  jit_value_t op_args[3];
  op_args[0] = _core;

  jit_value_t zero_value =
    jit_value_create_nint_constant(function, jit_type_int, 0);
# 1421 "jit-bytecode.c"
  fprintf(stderr, "bytestr_length: %d\n", bytestr_length);
  while(bytes_fetched < bytestr_length) {


    jit_insn_label(function, &labels[bytes_fetched]);
    fprintf(stderr, "%d: ", bytes_fetched);

    (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));

    switch(op) {
    case (Bgoto):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "goto", op); jit_insn_call_native(function, "bytecode_jit_" "goto", bytecode_jit_goto, bytecode_jit_core_signature, op_args, 1, (1 << 0)); jit_insn_branch(function, &labels[op]); break; };

    case (Bgotoifnil):
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "gotoifnil", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "gotoifnil", bytecode_jit_gotoifnil, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (Bgotoifnonnil):
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "gotoifnonnil", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "gotoifnonnil", bytecode_jit_gotoifnonnil, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (Bgotoifnilelsepop):
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "gotoifnilelsepop", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "gotoifnilelsepop", bytecode_jit_gotoifnilelsepop, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (Bgotoifnonnilelsepop):
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "gotoifnonnilelsepop", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "gotoifnonnilelsepop", bytecode_jit_gotoifnonnilelsepop, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };




    case (BRgoto):
      emacs_abort();
      { fprintf(stderr, "%s op: %d\n", "Rgoto", op); jit_insn_call_native(function, "bytecode_jit_" "Rgoto",
 bytecode_jit_Rgoto
# 1452 "jit-bytecode.c"
      , bytecode_jit_core_signature, op_args, 1, (1 << 0)); jit_insn_branch(function, &labels[cur_insn-bytecode_start-127]); break; }
                                                                               ;

    case (BRgotoifnil):
      emacs_abort();
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "Rgotoifnil", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "Rgotoifnil", bytecode_jit_Rgotoifnil, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (BRgotoifnonnil):
      emacs_abort();
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "Rgotoifnonnil", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "Rgotoifnonnil", bytecode_jit_Rgotoifnonnil, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (BRgotoifnilelsepop):
      emacs_abort();
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "Rgotoifnilelsepop", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "Rgotoifnilelsepop", bytecode_jit_Rgotoifnilelsepop, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (BRgotoifnonnilelsepop):
      emacs_abort();
      { (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op)); ; fprintf(stderr, "%s op: %d\n", "Rgotoifnonnilelsepop", op); jit_value_t ret = jit_insn_call_native(function, "bytecode_jit_" "Rgotoifnonnilelsepop", bytecode_jit_Rgotoifnonnilelsepop, bytecode_jit_goto_signature, op_args, 1, (1 << 0)); jit_value_t eq_zero = jit_insn_eq(function, ret, zero_value); jit_insn_branch_if_not(function, eq_zero, &labels[op]); break; };

    case (Bvarref7):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      goto varref;
    case (Bvarref):
    case (Bvarref1):
    case (Bvarref2):
    case (Bvarref3):
    case (Bvarref4):
    case (Bvarref5):
      op = op - Bvarref;
      goto varref;
    case (Bvarref6):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
    varref:
      { fprintf(stderr, "%s op: %d %x\n", "varref", op, vectorp[op]); op_args[1] = jit_value_create_nint_constant(function, jit_type_void_ptr, vectorp); op_args[2] = jit_value_create_nint_constant(function, jit_type_void_ptr, op); jit_insn_call_native(function, "bytecode_jit_" "varref", bytecode_jit_varref, bytecode_jit_vector_ref_signature, op_args, 3, (1 << 0)); ; break; };

    case (Bcar):
      { fprintf(stderr, "%s op: %d\n", "car", op); jit_insn_call_native(function, "bytecode_jit_" "car", bytecode_jit_car, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Beq):
      { fprintf(stderr, "%s op: %d\n", "eq", op); jit_insn_call_native(function, "bytecode_jit_" "eq", bytecode_jit_eq, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmemq):
      { fprintf(stderr, "%s op: %d\n", "memq", op); jit_insn_call_native(function, "bytecode_jit_" "memq", bytecode_jit_memq, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcdr):
      { fprintf(stderr, "%s op: %d\n", "cdr", op); jit_insn_call_native(function, "bytecode_jit_" "cdr", bytecode_jit_cdr, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bvarset):
    case (Bvarset1):
    case (Bvarset2):
    case (Bvarset3):
    case (Bvarset4):
    case (Bvarset5):
      op -= Bvarset;
      goto varset;

    case (Bvarset7):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      goto varset;

    case (Bvarset6):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
    varset:
      { fprintf(stderr, "%s op: %d %x\n", "varset", op, vectorp[op]); op_args[1] = jit_value_create_nint_constant(function, jit_type_void_ptr, vectorp); op_args[2] = jit_value_create_nint_constant(function, jit_type_void_ptr, op); jit_insn_call_native(function, "bytecode_jit_" "varset", bytecode_jit_varset, bytecode_jit_vector_ref_signature, op_args, 3, (1 << 0)); ; break; };

    case (Bdup):
      { fprintf(stderr, "%s op: %d\n", "dup", op); jit_insn_call_native(function, "bytecode_jit_" "dup", bytecode_jit_dup, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };



    case (Bvarbind6):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      goto varbind;

    case (Bvarbind7):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      goto varbind;

    case (Bvarbind):
    case (Bvarbind1):
    case (Bvarbind2):
    case (Bvarbind3):
    case (Bvarbind4):
    case (Bvarbind5):
      op -= Bvarbind;
    varbind:
      { fprintf(stderr, "%s op: %d %x\n", "varbind", op, vectorp[op]); op_args[1] = jit_value_create_nint_constant(function, jit_type_void_ptr, vectorp); op_args[2] = jit_value_create_nint_constant(function, jit_type_void_ptr, op); jit_insn_call_native(function, "bytecode_jit_" "varbind", bytecode_jit_varbind, bytecode_jit_vector_ref_signature, op_args, 3, (1 << 0)); ; break; };

    case (Bcall6):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      goto docall;

    case (Bcall7):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      goto docall;

    case (Bcall):
    case (Bcall1):
    case (Bcall2):
    case (Bcall3):
    case (Bcall4):
    case (Bcall5):
      op -= Bcall;
    docall:
      { fprintf(stderr, "%s op: %d\n", "call", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "call", bytecode_jit_call, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Bunbind6):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      goto dounbind;

    case (Bunbind7):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      goto dounbind;

    case (Bunbind):
    case (Bunbind1):
    case (Bunbind2):
    case (Bunbind3):
    case (Bunbind4):
    case (Bunbind5):
      op -= Bunbind;
    dounbind:
      { fprintf(stderr, "%s op: %d\n", "unbind", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "unbind", bytecode_jit_unbind, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Bunbind_all):
      { fprintf(stderr, "%s op: %d\n", "unbind_all", op); jit_insn_call_native(function, "bytecode_jit_" "unbind_all", bytecode_jit_unbind_all, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Breturn):
      { fprintf(stderr, "%s op: %d\n", "return", op); jit_insn_call_native(function, "bytecode_jit_" "return", bytecode_jit_return, bytecode_jit_core_signature, op_args, 1, (1 << 0)); jit_insn_return(function, ((void *)0)); break; };

    case (Bdiscard):
      { fprintf(stderr, "%s op: %d\n", "discard", op); jit_insn_call_native(function, "bytecode_jit_" "discard", bytecode_jit_discard, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bconstant2):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d %x\n", "constant2", op, vectorp[op]); op_args[1] = jit_value_create_nint_constant(function, jit_type_void_ptr, vectorp); op_args[2] = jit_value_create_nint_constant(function, jit_type_void_ptr, op); jit_insn_call_native(function, "bytecode_jit_" "constant2", bytecode_jit_constant2, bytecode_jit_vector_ref_signature, op_args, 3, (1 << 0)); ; break; };

    case (Bsave_excursion):
        { fprintf(stderr, "%s op: %d\n", "save_excursion", op); jit_insn_call_native(function, "bytecode_jit_" "save_excursion", bytecode_jit_save_excursion, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsave_current_buffer):
    case (Bsave_current_buffer_1):
      { fprintf(stderr, "%s op: %d\n", "save_current_buffer", op); jit_insn_call_native(function, "bytecode_jit_" "save_current_buffer", bytecode_jit_save_current_buffer, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsave_window_excursion):
      { fprintf(stderr, "%s op: %d\n", "save_window_excursion", op); jit_insn_call_native(function, "bytecode_jit_" "save_window_excursion", bytecode_jit_save_window_excursion, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsave_restriction):
      { fprintf(stderr, "%s op: %d\n", "save_restriction", op); jit_insn_call_native(function, "bytecode_jit_" "save_restriction", bytecode_jit_save_restriction, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcatch):
      { fprintf(stderr, "%s op: %d\n", "catch", op); jit_insn_call_native(function, "bytecode_jit_" "catch", bytecode_jit_catch, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bunwind_protect):
      { fprintf(stderr, "%s op: %d\n", "unwind_protect", op); jit_insn_call_native(function, "bytecode_jit_" "unwind_protect", bytecode_jit_unwind_protect, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcondition_case):
      { fprintf(stderr, "%s op: %d\n", "condition_case", op); jit_insn_call_native(function, "bytecode_jit_" "condition_case", bytecode_jit_condition_case, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Btemp_output_buffer_setup):
      { fprintf(stderr, "%s op: %d\n", "temp_output_buffer_setup", op); jit_insn_call_native(function, "bytecode_jit_" "temp_output_buffer_setup", bytecode_jit_temp_output_buffer_setup, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Btemp_output_buffer_show):
      { fprintf(stderr, "%s op: %d\n", "temp_output_buffer_show", op); jit_insn_call_native(function, "bytecode_jit_" "temp_output_buffer_show", bytecode_jit_temp_output_buffer_show, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnth):
      { fprintf(stderr, "%s op: %d\n", "nth", op); jit_insn_call_native(function, "bytecode_jit_" "nth", bytecode_jit_nth, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsymbolp):
      { fprintf(stderr, "%s op: %d\n", "symbolp", op); jit_insn_call_native(function, "bytecode_jit_" "symbolp", bytecode_jit_symbolp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bconsp):
      { fprintf(stderr, "%s op: %d\n", "consp", op); jit_insn_call_native(function, "bytecode_jit_" "consp", bytecode_jit_consp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bstringp):
      { fprintf(stderr, "%s op: %d\n", "stringp", op); jit_insn_call_native(function, "bytecode_jit_" "stringp", bytecode_jit_stringp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Blistp):
      { fprintf(stderr, "%s op: %d\n", "listp", op); jit_insn_call_native(function, "bytecode_jit_" "listp", bytecode_jit_listp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnot):
      { fprintf(stderr, "%s op: %d\n", "not", op); jit_insn_call_native(function, "bytecode_jit_" "not", bytecode_jit_not, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcons):
      { fprintf(stderr, "%s op: %d\n", "cons", op); jit_insn_call_native(function, "bytecode_jit_" "cons", bytecode_jit_cons, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Blist1):
      { fprintf(stderr, "%s op: %d\n", "list1", op); jit_insn_call_native(function, "bytecode_jit_" "list1", bytecode_jit_list1, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Blist2):
      { fprintf(stderr, "%s op: %d\n", "list2", op); jit_insn_call_native(function, "bytecode_jit_" "list2", bytecode_jit_list2, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Blist3):
      { fprintf(stderr, "%s op: %d\n", "list3", op); jit_insn_call_native(function, "bytecode_jit_" "list3", bytecode_jit_list3, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Blist4):
      { fprintf(stderr, "%s op: %d\n", "list4", op); jit_insn_call_native(function, "bytecode_jit_" "list4", bytecode_jit_list4, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (BlistN):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "listN", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "listN", bytecode_jit_listN, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Blength):
      { fprintf(stderr, "%s op: %d\n", "length", op); jit_insn_call_native(function, "bytecode_jit_" "length", bytecode_jit_length, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Baref):
      { fprintf(stderr, "%s op: %d\n", "aref", op); jit_insn_call_native(function, "bytecode_jit_" "aref", bytecode_jit_aref, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Baset):
      { fprintf(stderr, "%s op: %d\n", "aset", op); jit_insn_call_native(function, "bytecode_jit_" "aset", bytecode_jit_aset, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsymbol_value):
      { fprintf(stderr, "%s op: %d\n", "symbol_value", op); jit_insn_call_native(function, "bytecode_jit_" "symbol_value", bytecode_jit_symbol_value, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsymbol_function):
      { fprintf(stderr, "%s op: %d\n", "symbol_function", op); jit_insn_call_native(function, "bytecode_jit_" "symbol_function", bytecode_jit_symbol_function, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bset):
      { fprintf(stderr, "%s op: %d\n", "set", op); jit_insn_call_native(function, "bytecode_jit_" "set", bytecode_jit_set, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bfset):
      { fprintf(stderr, "%s op: %d\n", "fset", op); jit_insn_call_native(function, "bytecode_jit_" "fset", bytecode_jit_fset, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bget):
      { fprintf(stderr, "%s op: %d\n", "get", op); jit_insn_call_native(function, "bytecode_jit_" "get", bytecode_jit_get, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsubstring):
      { fprintf(stderr, "%s op: %d\n", "substring", op); jit_insn_call_native(function, "bytecode_jit_" "substring", bytecode_jit_substring, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bconcat2):
      { fprintf(stderr, "%s op: %d\n", "concat2", op); jit_insn_call_native(function, "bytecode_jit_" "concat2", bytecode_jit_concat2, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bconcat3):
      { fprintf(stderr, "%s op: %d\n", "concat3", op); jit_insn_call_native(function, "bytecode_jit_" "concat3", bytecode_jit_concat3, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bconcat4):
      { fprintf(stderr, "%s op: %d\n", "concat4", op); jit_insn_call_native(function, "bytecode_jit_" "concat4", bytecode_jit_concat4, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (BconcatN):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "concatN", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "concatN", bytecode_jit_concatN, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Bsub1):
      { fprintf(stderr, "%s op: %d\n", "sub1", op); jit_insn_call_native(function, "bytecode_jit_" "sub1", bytecode_jit_sub1, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Badd1):
      { fprintf(stderr, "%s op: %d\n", "add1", op); jit_insn_call_native(function, "bytecode_jit_" "add1", bytecode_jit_add1, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Beqlsign):
      { fprintf(stderr, "%s op: %d\n", "eqlsign", op); jit_insn_call_native(function, "bytecode_jit_" "eqlsign", bytecode_jit_eqlsign, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bgtr):
      { fprintf(stderr, "%s op: %d\n", "gtr", op); jit_insn_call_native(function, "bytecode_jit_" "gtr", bytecode_jit_gtr, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Blss):
      { fprintf(stderr, "%s op: %d\n", "lss", op); jit_insn_call_native(function, "bytecode_jit_" "lss", bytecode_jit_lss, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bleq):
      { fprintf(stderr, "%s op: %d\n", "leq", op); jit_insn_call_native(function, "bytecode_jit_" "leq", bytecode_jit_leq, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bgeq):
      { fprintf(stderr, "%s op: %d\n", "geq", op); jit_insn_call_native(function, "bytecode_jit_" "geq", bytecode_jit_geq, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bdiff):
      { fprintf(stderr, "%s op: %d\n", "diff", op); jit_insn_call_native(function, "bytecode_jit_" "diff", bytecode_jit_diff, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnegate):
      { fprintf(stderr, "%s op: %d\n", "negate", op); jit_insn_call_native(function, "bytecode_jit_" "negate", bytecode_jit_negate, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bplus):
      { fprintf(stderr, "%s op: %d\n", "plus", op); jit_insn_call_native(function, "bytecode_jit_" "plus", bytecode_jit_plus, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmax):
      { fprintf(stderr, "%s op: %d\n", "max", op); jit_insn_call_native(function, "bytecode_jit_" "max", bytecode_jit_max, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmin):
      { fprintf(stderr, "%s op: %d\n", "min", op); jit_insn_call_native(function, "bytecode_jit_" "min", bytecode_jit_min, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmult):
      { fprintf(stderr, "%s op: %d\n", "mult", op); jit_insn_call_native(function, "bytecode_jit_" "mult", bytecode_jit_mult, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bquo):
      { fprintf(stderr, "%s op: %d\n", "quo", op); jit_insn_call_native(function, "bytecode_jit_" "quo", bytecode_jit_quo, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Brem):
      { fprintf(stderr, "%s op: %d\n", "rem", op); jit_insn_call_native(function, "bytecode_jit_" "rem", bytecode_jit_rem, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bpoint):
      { fprintf(stderr, "%s op: %d\n", "point", op); jit_insn_call_native(function, "bytecode_jit_" "point", bytecode_jit_point, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bgoto_char):
      { fprintf(stderr, "%s op: %d\n", "goto_char", op); jit_insn_call_native(function, "bytecode_jit_" "goto_char", bytecode_jit_goto_char, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Binsert):
      { fprintf(stderr, "%s op: %d\n", "insert", op); jit_insn_call_native(function, "bytecode_jit_" "insert", bytecode_jit_insert, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (BinsertN):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "insertN", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "insertN", bytecode_jit_insertN, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Bpoint_max):
      { fprintf(stderr, "%s op: %d\n", "point_max", op); jit_insn_call_native(function, "bytecode_jit_" "point_max", bytecode_jit_point_max, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bpoint_min):
      { fprintf(stderr, "%s op: %d\n", "point_min", op); jit_insn_call_native(function, "bytecode_jit_" "point_min", bytecode_jit_point_min, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bchar_after):
      { fprintf(stderr, "%s op: %d\n", "char_after", op); jit_insn_call_native(function, "bytecode_jit_" "char_after", bytecode_jit_char_after, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bfollowing_char):
      { fprintf(stderr, "%s op: %d\n", "following_char", op); jit_insn_call_native(function, "bytecode_jit_" "following_char", bytecode_jit_following_char, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bpreceding_char):
      { fprintf(stderr, "%s op: %d\n", "preceding_char", op); jit_insn_call_native(function, "bytecode_jit_" "preceding_char", bytecode_jit_preceding_char, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcurrent_column):
      { fprintf(stderr, "%s op: %d\n", "current_column", op); jit_insn_call_native(function, "bytecode_jit_" "current_column", bytecode_jit_current_column, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bindent_to):
      { fprintf(stderr, "%s op: %d\n", "indent_to", op); jit_insn_call_native(function, "bytecode_jit_" "indent_to", bytecode_jit_indent_to, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Beolp):
      { fprintf(stderr, "%s op: %d\n", "eolp", op); jit_insn_call_native(function, "bytecode_jit_" "eolp", bytecode_jit_eolp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Beobp):
      { fprintf(stderr, "%s op: %d\n", "eobp", op); jit_insn_call_native(function, "bytecode_jit_" "eobp", bytecode_jit_eobp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bbolp):
      { fprintf(stderr, "%s op: %d\n", "bolp", op); jit_insn_call_native(function, "bytecode_jit_" "bolp", bytecode_jit_bolp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bbobp):
      { fprintf(stderr, "%s op: %d\n", "bobp", op); jit_insn_call_native(function, "bytecode_jit_" "bobp", bytecode_jit_bobp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcurrent_buffer):
      { fprintf(stderr, "%s op: %d\n", "current_buffer", op); jit_insn_call_native(function, "bytecode_jit_" "current_buffer", bytecode_jit_current_buffer, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bset_buffer):
      { fprintf(stderr, "%s op: %d\n", "set_buffer", op); jit_insn_call_native(function, "bytecode_jit_" "set_buffer", bytecode_jit_set_buffer, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Binteractive_p):
      { fprintf(stderr, "%s op: %d\n", "interactive_p", op); jit_insn_call_native(function, "bytecode_jit_" "interactive_p", bytecode_jit_interactive_p, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bforward_char):
      { fprintf(stderr, "%s op: %d\n", "forward_char", op); jit_insn_call_native(function, "bytecode_jit_" "forward_char", bytecode_jit_forward_char, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bforward_word):
      { fprintf(stderr, "%s op: %d\n", "forward_word", op); jit_insn_call_native(function, "bytecode_jit_" "forward_word", bytecode_jit_forward_word, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bskip_chars_forward):
      { fprintf(stderr, "%s op: %d\n", "skip_chars_forward", op); jit_insn_call_native(function, "bytecode_jit_" "skip_chars_forward", bytecode_jit_skip_chars_forward, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bskip_chars_backward):
      { fprintf(stderr, "%s op: %d\n", "skip_chars_backward", op); jit_insn_call_native(function, "bytecode_jit_" "skip_chars_backward", bytecode_jit_skip_chars_backward, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bforward_line):
      { fprintf(stderr, "%s op: %d\n", "forward_line", op); jit_insn_call_native(function, "bytecode_jit_" "forward_line", bytecode_jit_forward_line, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bchar_syntax):
      { fprintf(stderr, "%s op: %d\n", "char_syntax", op); jit_insn_call_native(function, "bytecode_jit_" "char_syntax", bytecode_jit_char_syntax, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bbuffer_substring):
      { fprintf(stderr, "%s op: %d\n", "buffer_substring", op); jit_insn_call_native(function, "bytecode_jit_" "buffer_substring", bytecode_jit_buffer_substring, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bdelete_region):
      { fprintf(stderr, "%s op: %d\n", "delete_region", op); jit_insn_call_native(function, "bytecode_jit_" "delete_region", bytecode_jit_delete_region, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnarrow_to_region):
      { fprintf(stderr, "%s op: %d\n", "narrow_to_region", op); jit_insn_call_native(function, "bytecode_jit_" "narrow_to_region", bytecode_jit_narrow_to_region, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bwiden):
      { fprintf(stderr, "%s op: %d\n", "widen", op); jit_insn_call_native(function, "bytecode_jit_" "widen", bytecode_jit_widen, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bend_of_line):
      { fprintf(stderr, "%s op: %d\n", "end_of_line", op); jit_insn_call_native(function, "bytecode_jit_" "end_of_line", bytecode_jit_end_of_line, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bset_marker):
      { fprintf(stderr, "%s op: %d\n", "set_marker", op); jit_insn_call_native(function, "bytecode_jit_" "set_marker", bytecode_jit_set_marker, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmatch_beginning):
      { fprintf(stderr, "%s op: %d\n", "match_beginning", op); jit_insn_call_native(function, "bytecode_jit_" "match_beginning", bytecode_jit_match_beginning, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmatch_end):
      { fprintf(stderr, "%s op: %d\n", "match_end", op); jit_insn_call_native(function, "bytecode_jit_" "match_end", bytecode_jit_match_end, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bupcase):
      { fprintf(stderr, "%s op: %d\n", "upcase", op); jit_insn_call_native(function, "bytecode_jit_" "upcase", bytecode_jit_upcase, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bdowncase):
      { fprintf(stderr, "%s op: %d\n", "downcase", op); jit_insn_call_native(function, "bytecode_jit_" "downcase", bytecode_jit_downcase, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bstringeqlsign):
      { fprintf(stderr, "%s op: %d\n", "stringeqlsign", op); jit_insn_call_native(function, "bytecode_jit_" "stringeqlsign", bytecode_jit_stringeqlsign, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bstringlss):
      { fprintf(stderr, "%s op: %d\n", "stringlss", op); jit_insn_call_native(function, "bytecode_jit_" "stringlss", bytecode_jit_stringlss, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bequal):
      { fprintf(stderr, "%s op: %d\n", "equal", op); jit_insn_call_native(function, "bytecode_jit_" "equal", bytecode_jit_equal, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnthcdr):
      { fprintf(stderr, "%s op: %d\n", "nthcdr", op); jit_insn_call_native(function, "bytecode_jit_" "nthcdr", bytecode_jit_nthcdr, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Belt):
      { fprintf(stderr, "%s op: %d\n", "elt", op); jit_insn_call_native(function, "bytecode_jit_" "elt", bytecode_jit_elt, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bmember):
      { fprintf(stderr, "%s op: %d\n", "member", op); jit_insn_call_native(function, "bytecode_jit_" "member", bytecode_jit_member, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bassq):
      { fprintf(stderr, "%s op: %d\n", "assq", op); jit_insn_call_native(function, "bytecode_jit_" "assq", bytecode_jit_assq, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnreverse):
      { fprintf(stderr, "%s op: %d\n", "nreverse", op); jit_insn_call_native(function, "bytecode_jit_" "nreverse", bytecode_jit_nreverse, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsetcar):
      { fprintf(stderr, "%s op: %d\n", "setcar", op); jit_insn_call_native(function, "bytecode_jit_" "setcar", bytecode_jit_setcar, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bsetcdr):
      { fprintf(stderr, "%s op: %d\n", "setcdr", op); jit_insn_call_native(function, "bytecode_jit_" "setcdr", bytecode_jit_setcdr, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcar_safe):
      { fprintf(stderr, "%s op: %d\n", "car_safe", op); jit_insn_call_native(function, "bytecode_jit_" "car_safe", bytecode_jit_car_safe, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bcdr_safe):
      { fprintf(stderr, "%s op: %d\n", "cdr_safe", op); jit_insn_call_native(function, "bytecode_jit_" "cdr_safe", bytecode_jit_cdr_safe, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnconc):
      { fprintf(stderr, "%s op: %d\n", "nconc", op); jit_insn_call_native(function, "bytecode_jit_" "nconc", bytecode_jit_nconc, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bnumberp):
      { fprintf(stderr, "%s op: %d\n", "numberp", op); jit_insn_call_native(function, "bytecode_jit_" "numberp", bytecode_jit_numberp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };

    case (Bintegerp):
      { fprintf(stderr, "%s op: %d\n", "integerp", op); jit_insn_call_native(function, "bytecode_jit_" "integerp", bytecode_jit_integerp, bytecode_jit_core_signature, op_args, 1, (1 << 0)); ; break; };
# 1904 "jit-bytecode.c"
    case_ABORT:



      error ("Invalid byte opcode");



    case (Bstack_ref):
    case (Bstack_ref1):
    case (Bstack_ref2):
    case (Bstack_ref3):
    case (Bstack_ref4):
    case (Bstack_ref5):
      op = op - Bstack_ref;
      goto stack_ref;
    case (Bstack_ref7):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      goto stack_ref;
    case (Bstack_ref6):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
    stack_ref:
      { fprintf(stderr, "%s op: %d\n", "stack_ref", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "stack_ref", bytecode_jit_stack_ref, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Bstack_set):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "stack_set", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "stack_set", bytecode_jit_stack_set, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (Bstack_set2):
      (op = *cur_insn++, fprintf(stderr, "%d ", op), op + ((*cur_insn++) << 8), bytes_fetched += 2, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "stack_set2", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "stack_set2", bytecode_jit_stack_set2, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case (BdiscardN):
      (bytes_fetched++, op=*cur_insn++, fprintf(stderr, "%d ", op));
      { fprintf(stderr, "%s op: %d\n", "discardN", op); op_args[1] = jit_value_create_nint_constant(function, jit_type_nint, op); jit_insn_call_native(function, "bytecode_jit_" "discardN", bytecode_jit_discardN, bytecode_jit_op_signature, op_args, 2, (1 << 0)); ; break; };

    case(Bjitcall):

      return Qt;

    default:
    case (Bconstant):
# 1956 "jit-bytecode.c"
      op -= Bconstant;

      { fprintf(stderr, "%s op: %d %x\n", "constant", op, vectorp[op]); op_args[1] = jit_value_create_nint_constant(function, jit_type_void_ptr, vectorp); op_args[2] = jit_value_create_nint_constant(function, jit_type_void_ptr, op); jit_insn_call_native(function, "bytecode_jit_" "constant", bytecode_jit_constant, bytecode_jit_vector_ref_signature, op_args, 3, (1 << 0)); ; break; };
    }
  }

  jit_function_compile(function);

  jit_context_build_end(bytecode_jit_context);

  Lisp_Object args[1];
  args[0] = build_string("jit-compile: Function has been JIT compiled!");
  Fmessage (1, args);




  ptrdiff_t new_bytestr_len = 1 + sizeof(function);
  unsigned char tmp_bytestr[new_bytestr_len];
  tmp_bytestr[0] = Bjitcall;
  memcpy(tmp_bytestr+1, &function, sizeof(function));
  fprintf(stderr, "function: 0x%x\n", function);
  Lisp_Object new_bytestr = make_string(tmp_bytestr, new_bytestr_len);
  (((void) (0 && (0 <= (COMPILED_BYTECODE) && (COMPILED_BYTECODE) < (((void) (0 && ((((enum Lisp_Type) ((((fun))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((fun)) - (Lisp_Vectorlike))))->header.size))), (((void) (0 && ((((enum Lisp_Type) (((fun)) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) ((fun) - (Lisp_Vectorlike))))->contents[COMPILED_BYTECODE] = (new_bytestr));

  return Qt;
}

Lisp_Object Qjit_compile;

void
bytecode_jit_init(void)
{
  fprintf(stderr, "bytecode_jit_init()\n");
  bytecode_jit_context = jit_context_create();

  jit_type_t params[3];

  params[0] = jit_type_void_ptr;
  bytecode_jitcall_signature = jit_type_create_signature
    (jit_abi_cdecl, jit_type_void, params, 1, 1);

  bytecode_jit_core_signature = jit_type_create_signature
    (jit_abi_fastcall, jit_type_void, params, 1, 1);

  bytecode_jit_goto_signature = jit_type_create_signature
    (jit_abi_fastcall, jit_type_int, params, 1, 1);

  params[1] = jit_type_int;
  bytecode_jit_op_signature = jit_type_create_signature
    (jit_abi_fastcall, jit_type_void, params, 2, 1);

  params[1] = jit_type_void_ptr;
  bytecode_jit_vector_ref_signature = jit_type_create_signature
    (jit_abi_fastcall, jit_type_void, params, 2, 1);
}

Lisp_Object Fjit_compile
 (Lisp_Object) ; static struct Lisp_Subr __attribute__ ((__aligned__ (8))) Sjit_compile = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a1 = Fjit_compile }, 1, 1, "jit-compile", 0, 0}; Lisp_Object Fjit_compile
     (Lisp_Object fun)
{

  if(!bytecode_jit_context) {
    bytecode_jit_init();
  }


  if(!((((enum Lisp_Type) (((fun)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((fun) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_COMPILED) << PSEUDOVECTOR_AREA_BITS))))) {
    call1(intern("byte-compile"), fun);
  }

                                                            ;
  if((((enum Lisp_Type) (((fun)) & TYPEMASK)) == Lisp_Symbol)) {
    Lisp_Object args[2];
    args[0] = build_string("jit-compile: JIT compiling %s.");
    args[1] = fun;
    Fmessage (2, args);
    fun = Fsymbol_function(fun);
  }

  return jit_bytecode_compile(fun);
}

void jit_hotspot_bytecode(Lisp_Object fun) {

  if(!bytecode_jit_context) {
    bytecode_jit_init();
  }


}

void
syms_of_jit_compiler (void)
{
  do { (Qjit_compile) = intern_c_string (("jit-compile")); staticpro (&(Qjit_compile)); } while (0);

  defsubr (&Sjit_compile);
}
# 482 "bytecode.c" 2



Lisp_Object Fbyte_code




 (Lisp_Object, Lisp_Object, Lisp_Object) ; static struct Lisp_Subr __attribute__ ((__aligned__ (8))) Sbyte_code = { { PVEC_SUBR << PSEUDOVECTOR_AREA_BITS }, { .a3 = Fbyte_code }, 3, 3, "byte-code", 0, 0}; Lisp_Object Fbyte_code
  (Lisp_Object bytestr, Lisp_Object vector, Lisp_Object maxdepth)
{
  return exec_byte_code (bytestr, vector, maxdepth, Qnil, 0, ((void *)0));
}
# 504 "bytecode.c"
Lisp_Object
exec_byte_code (Lisp_Object bytestr, Lisp_Object vector, Lisp_Object maxdepth,
  Lisp_Object args_template, ptrdiff_t nargs, Lisp_Object *args)
{
  ptrdiff_t count = (specpdl_ptr - specpdl);




  int op;

  Lisp_Object *vectorp;





  struct byte_stack stack;
  Lisp_Object *top;
  Lisp_Object result;
# 535 "bytecode.c"
  do { if (!((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String))) wrong_type_argument (Qstringp, (bytestr)); } while (0);
  do { if (!(((((enum Lisp_Type) (((vector)) & TYPEMASK)) == Lisp_Vectorlike) && !((((void) (0 && ((((enum Lisp_Type) ((((vector))) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) (((vector)) - (Lisp_Vectorlike))))->header.size & ((2147483647) - (2147483647) / 2))))) wrong_type_argument (Qvectorp, (vector)); } while (0);
  do { if (!((((((((enum Lisp_Type) (((maxdepth)) & TYPEMASK))) & ~Lisp_Int1) == 0)) && ((maxdepth) >> INTTYPEBITS) >= 0))) wrong_type_argument (Qwholenump, (maxdepth)); } while (0);





  if (((((void) (0 && ((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((bytestr) - (Lisp_String))))->size_byte >= 0))





    bytestr = Fstring_as_unibyte (bytestr);




  vectorp = (((void) (0 && ((((enum Lisp_Type) (((vector)) & TYPEMASK)) == Lisp_Vectorlike)))), (struct Lisp_Vector *) ((intptr_t) ((vector) - (Lisp_Vectorlike))))->contents;

  stack.byte_string = bytestr;
  stack.pc = stack.byte_string_start = ((((void) (0 && ((((enum Lisp_Type) (((bytestr)) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) ((bytestr) - (Lisp_String))))->data + 0);
  stack.constants = vector;
  if (MAX_ALLOCA / word_size <= (((maxdepth) >> INTTYPEBITS)))
    memory_full ((4294967295U));
  top = __builtin_alloca (((((maxdepth) >> INTTYPEBITS)) + 1) * sizeof *top);




  stack.next = byte_stack_list;
  byte_stack_list = &stack;





  if (((((((enum Lisp_Type) (((args_template)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
    {
      ptrdiff_t at = ((args_template) >> INTTYPEBITS);
      _Bool rest = (at & 128) != 0;
      int mandatory = at & 127;
      ptrdiff_t nonrest = at >> 8;
      ((void) (0 && (mandatory <= nonrest)));
      if (nargs <= nonrest)
 {
   ptrdiff_t i;
   for (i = 0 ; i < nargs; i++, args++)
     (top++, *top = (*args));
   if (nargs < mandatory)

     Fsignal (Qwrong_number_of_arguments,
       Fcons (Fcons (((EMACS_INT) (mandatory) << INTTYPEBITS),
       rest ? Qand_rest : ((EMACS_INT) (nonrest) << INTTYPEBITS)),
       Fcons (((EMACS_INT) (nargs) << INTTYPEBITS), Qnil)));
   else
     {
       for (; i < nonrest; i++)
  (top++, *top = (Qnil));
       if (rest)
  (top++, *top = (Qnil));
     }
 }
      else if (rest)
 {
   ptrdiff_t i;
   for (i = 0 ; i < nonrest; i++, args++)
     (top++, *top = (*args));
   (top++, *top = (Flist (nargs - nonrest, args)));
 }
      else

 Fsignal (Qwrong_number_of_arguments,
   Fcons (Fcons (((EMACS_INT) (mandatory) << INTTYPEBITS),
          ((EMACS_INT) (nonrest) << INTTYPEBITS)),
   Fcons (((EMACS_INT) (nargs) << INTTYPEBITS), Qnil)));
    }
  else if (! ((args_template) == (Qnil)))

    {
      error ("Unknown args template!");
    }

  while (1)
    {
# 680 "bytecode.c"
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Woverride-init"



      static const void *const targets[256] =
 {
   [0 ... (Bconstant - 1)] = &&insn_default,
   [Bconstant ... 255] = &&insn_Bconstant,


   [Bstack_ref] = &&insn_Bstack_ref , [Bstack_ref1] = &&insn_Bstack_ref1 , [Bstack_ref2] = &&insn_Bstack_ref2 , [Bstack_ref3] = &&insn_Bstack_ref3 , [Bstack_ref4] = &&insn_Bstack_ref4 , [Bstack_ref5] = &&insn_Bstack_ref5 , [Bstack_ref6] = &&insn_Bstack_ref6 , [Bstack_ref7] = &&insn_Bstack_ref7 , [Bvarref] = &&insn_Bvarref , [Bvarref1] = &&insn_Bvarref1 , [Bvarref2] = &&insn_Bvarref2 , [Bvarref3] = &&insn_Bvarref3 , [Bvarref4] = &&insn_Bvarref4 , [Bvarref5] = &&insn_Bvarref5 , [Bvarref6] = &&insn_Bvarref6 , [Bvarref7] = &&insn_Bvarref7 , [Bvarset] = &&insn_Bvarset , [Bvarset1] = &&insn_Bvarset1 , [Bvarset2] = &&insn_Bvarset2 , [Bvarset3] = &&insn_Bvarset3 , [Bvarset4] = &&insn_Bvarset4 , [Bvarset5] = &&insn_Bvarset5 , [Bvarset6] = &&insn_Bvarset6 , [Bvarset7] = &&insn_Bvarset7 , [Bvarbind] = &&insn_Bvarbind , [Bvarbind1] = &&insn_Bvarbind1 , [Bvarbind2] = &&insn_Bvarbind2 , [Bvarbind3] = &&insn_Bvarbind3 , [Bvarbind4] = &&insn_Bvarbind4 , [Bvarbind5] = &&insn_Bvarbind5 , [Bvarbind6] = &&insn_Bvarbind6 , [Bvarbind7] = &&insn_Bvarbind7 , [Bcall] = &&insn_Bcall , [Bcall1] = &&insn_Bcall1 , [Bcall2] = &&insn_Bcall2 , [Bcall3] = &&insn_Bcall3 , [Bcall4] = &&insn_Bcall4 , [Bcall5] = &&insn_Bcall5 , [Bcall6] = &&insn_Bcall6 , [Bcall7] = &&insn_Bcall7 , [Bunbind] = &&insn_Bunbind , [Bunbind1] = &&insn_Bunbind1 , [Bunbind2] = &&insn_Bunbind2 , [Bunbind3] = &&insn_Bunbind3 , [Bunbind4] = &&insn_Bunbind4 , [Bunbind5] = &&insn_Bunbind5 , [Bunbind6] = &&insn_Bunbind6 , [Bunbind7] = &&insn_Bunbind7 , [Bnth] = &&insn_Bnth , [Bsymbolp] = &&insn_Bsymbolp , [Bconsp] = &&insn_Bconsp , [Bstringp] = &&insn_Bstringp , [Blistp] = &&insn_Blistp , [Beq] = &&insn_Beq , [Bmemq] = &&insn_Bmemq , [Bnot] = &&insn_Bnot , [Bcar] = &&insn_Bcar , [Bcdr] = &&insn_Bcdr , [Bcons] = &&insn_Bcons , [Blist1] = &&insn_Blist1 , [Blist2] = &&insn_Blist2 , [Blist3] = &&insn_Blist3 , [Blist4] = &&insn_Blist4 , [Blength] = &&insn_Blength , [Baref] = &&insn_Baref , [Baset] = &&insn_Baset , [Bsymbol_value] = &&insn_Bsymbol_value , [Bsymbol_function] = &&insn_Bsymbol_function , [Bset] = &&insn_Bset , [Bfset] = &&insn_Bfset , [Bget] = &&insn_Bget , [Bsubstring] = &&insn_Bsubstring , [Bconcat2] = &&insn_Bconcat2 , [Bconcat3] = &&insn_Bconcat3 , [Bconcat4] = &&insn_Bconcat4 , [Bsub1] = &&insn_Bsub1 , [Badd1] = &&insn_Badd1 , [Beqlsign] = &&insn_Beqlsign , [Bgtr] = &&insn_Bgtr , [Blss] = &&insn_Blss , [Bleq] = &&insn_Bleq , [Bgeq] = &&insn_Bgeq , [Bdiff] = &&insn_Bdiff , [Bnegate] = &&insn_Bnegate , [Bplus] = &&insn_Bplus , [Bmax] = &&insn_Bmax , [Bmin] = &&insn_Bmin , [Bmult] = &&insn_Bmult , [Bpoint] = &&insn_Bpoint , [Bsave_current_buffer] = &&insn_Bsave_current_buffer , [Bgoto_char] = &&insn_Bgoto_char , [Binsert] = &&insn_Binsert , [Bpoint_max] = &&insn_Bpoint_max , [Bpoint_min] = &&insn_Bpoint_min , [Bchar_after] = &&insn_Bchar_after , [Bfollowing_char] = &&insn_Bfollowing_char , [Bpreceding_char] = &&insn_Bpreceding_char , [Bcurrent_column] = &&insn_Bcurrent_column , [Bindent_to] = &&insn_Bindent_to , [Beolp] = &&insn_Beolp , [Beobp] = &&insn_Beobp , [Bbolp] = &&insn_Bbolp , [Bbobp] = &&insn_Bbobp , [Bcurrent_buffer] = &&insn_Bcurrent_buffer , [Bset_buffer] = &&insn_Bset_buffer , [Bsave_current_buffer_1] = &&insn_Bsave_current_buffer_1 , [Binteractive_p] = &&insn_Binteractive_p , [Bforward_char] = &&insn_Bforward_char , [Bforward_word] = &&insn_Bforward_word , [Bskip_chars_forward] = &&insn_Bskip_chars_forward , [Bskip_chars_backward] = &&insn_Bskip_chars_backward , [Bforward_line] = &&insn_Bforward_line , [Bchar_syntax] = &&insn_Bchar_syntax , [Bbuffer_substring] = &&insn_Bbuffer_substring , [Bdelete_region] = &&insn_Bdelete_region , [Bnarrow_to_region] = &&insn_Bnarrow_to_region , [Bwiden] = &&insn_Bwiden , [Bend_of_line] = &&insn_Bend_of_line , [Bconstant2] = &&insn_Bconstant2 , [Bgoto] = &&insn_Bgoto , [Bgotoifnil] = &&insn_Bgotoifnil , [Bgotoifnonnil] = &&insn_Bgotoifnonnil , [Bgotoifnilelsepop] = &&insn_Bgotoifnilelsepop , [Bgotoifnonnilelsepop] = &&insn_Bgotoifnonnilelsepop , [Breturn] = &&insn_Breturn , [Bdiscard] = &&insn_Bdiscard , [Bdup] = &&insn_Bdup , [Bsave_excursion] = &&insn_Bsave_excursion , [Bsave_window_excursion] = &&insn_Bsave_window_excursion , [Bsave_restriction] = &&insn_Bsave_restriction , [Bcatch] = &&insn_Bcatch , [Bunwind_protect] = &&insn_Bunwind_protect , [Bcondition_case] = &&insn_Bcondition_case , [Btemp_output_buffer_setup] = &&insn_Btemp_output_buffer_setup , [Btemp_output_buffer_show] = &&insn_Btemp_output_buffer_show , [Bunbind_all] = &&insn_Bunbind_all , [Bset_marker] = &&insn_Bset_marker , [Bmatch_beginning] = &&insn_Bmatch_beginning , [Bmatch_end] = &&insn_Bmatch_end , [Bupcase] = &&insn_Bupcase , [Bdowncase] = &&insn_Bdowncase , [Bstringeqlsign] = &&insn_Bstringeqlsign , [Bstringlss] = &&insn_Bstringlss , [Bequal] = &&insn_Bequal , [Bnthcdr] = &&insn_Bnthcdr , [Belt] = &&insn_Belt , [Bmember] = &&insn_Bmember , [Bassq] = &&insn_Bassq , [Bnreverse] = &&insn_Bnreverse , [Bsetcar] = &&insn_Bsetcar , [Bsetcdr] = &&insn_Bsetcdr , [Bcar_safe] = &&insn_Bcar_safe , [Bcdr_safe] = &&insn_Bcdr_safe , [Bnconc] = &&insn_Bnconc , [Bquo] = &&insn_Bquo , [Brem] = &&insn_Brem , [Bnumberp] = &&insn_Bnumberp , [Bintegerp] = &&insn_Bintegerp , [BRgoto] = &&insn_BRgoto , [BRgotoifnil] = &&insn_BRgotoifnil , [BRgotoifnonnil] = &&insn_BRgotoifnonnil , [BRgotoifnilelsepop] = &&insn_BRgotoifnilelsepop , [BRgotoifnonnilelsepop] = &&insn_BRgotoifnonnilelsepop , [BlistN] = &&insn_BlistN , [BconcatN] = &&insn_BconcatN , [BinsertN] = &&insn_BinsertN , [Bstack_set] = &&insn_Bstack_set , [Bstack_set2] = &&insn_Bstack_set2 , [BdiscardN] = &&insn_BdiscardN , [Bjitcall] = &&insn_Bjitcall , [Bconstant] = &&insn_Bconstant ,

 };


#pragma GCC diagnostic pop





      goto *(targets[op = *stack.pc++]);
 {
 insn_Bvarref7:
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   goto varref;

 insn_Bvarref:
 insn_Bvarref1:
 insn_Bvarref2:
 insn_Bvarref3:
 insn_Bvarref4:
 insn_Bvarref5:
   op = op - Bvarref;
   goto varref;



 insn_Bvarref6:
   op = *stack.pc++;
 varref:
   {
     Lisp_Object v1, v2;

     v1 = vectorp[op];
     if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol))
       {
  if ((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((v1) - (Lisp_Symbol))))->redirect != SYMBOL_PLAINVAL
      || (v2 = (((void) (0 && (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((v1) - (Lisp_Symbol)))))->redirect == SYMBOL_PLAINVAL))), (((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((v1) - (Lisp_Symbol))))->val.value),
   ((v2) == (Qunbound))))
    {
      ((void)0);
      v2 = Fsymbol_value (v1);
      ((void)0);
    }
       }
     else
       {
  ((void)0);
  v2 = Fsymbol_value (v1);
  ((void)0);
       }
     (top++, *top = (v2));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bgotoifnil:
   {
     Lisp_Object v1;
     do { ((void)0); maybe_gc (); ((void)0); } while (0);
     op = (op = *stack.pc++, op + (*stack.pc++ << 8));
     v1 = (*top--);
     if (((v1) == (Qnil)))
       {
  do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
  ;
  stack.pc = stack.byte_string_start + op;
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bcar:
   {
     Lisp_Object v1;
     v1 = (*top);
     if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
       (*top) = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->car)));
     else if (((v1) == (Qnil)))
       (*top) = Qnil;
     else
       {
  ((void)0);
  wrong_type_argument (Qlistp, v1);
  ((void)0);
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Beq:
   {
     Lisp_Object v1;
     v1 = (*top--);
     (*top) = ((v1) == ((*top))) ? Qt : Qnil;
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bmemq:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fmemq ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bcdr:
   {
     Lisp_Object v1;
     v1 = (*top);
     if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
       (*top) = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->u.cdr)));
     else if (((v1) == (Qnil)))
       (*top) = Qnil;
     else
       {
  ((void)0);
  wrong_type_argument (Qlistp, v1);
  ((void)0);
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bvarset:
 insn_Bvarset1:
 insn_Bvarset2:
 insn_Bvarset3:
 insn_Bvarset4:
 insn_Bvarset5:
   op -= Bvarset;
   goto varset;

 insn_Bvarset7:
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   goto varset;

 insn_Bvarset6:
   op = *stack.pc++;
 varset:
   {
     Lisp_Object sym, val;

     sym = vectorp[op];
     val = (*top);


     if ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)
  && !((val) == (Qunbound))
  && !(((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->redirect
  && !(((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol))))->constant)
       (((void) (0 && (((((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol)))))->redirect == SYMBOL_PLAINVAL))), ((((void) (0 && ((((enum Lisp_Type) (((sym)) & TYPEMASK)) == Lisp_Symbol)))), (struct Lisp_Symbol *) ((intptr_t) ((sym) - (Lisp_Symbol)))))->val.value = (val));
     else
       {
  ((void)0);
  set_internal (sym, val, Qnil, 0);
  ((void)0);
       }
   }
   (void) (*top--);
   goto *(targets[op = *stack.pc++]);

 insn_Bdup:
   {
     Lisp_Object v1;
     v1 = (*top);
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }



 insn_Bvarbind6:
   op = *stack.pc++;
   goto varbind;

 insn_Bvarbind7:
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   goto varbind;

 insn_Bvarbind:
 insn_Bvarbind1:
 insn_Bvarbind2:
 insn_Bvarbind3:
 insn_Bvarbind4:
 insn_Bvarbind5:
   op -= Bvarbind;
 varbind:

   ((void)0);
   specbind (vectorp[op], (*top--));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bcall6:
   op = *stack.pc++;
   goto docall;

 insn_Bcall7:
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   goto docall;

 insn_Bcall:
 insn_Bcall1:
 insn_Bcall2:
 insn_Bcall3:
 insn_Bcall4:
 insn_Bcall5:
   op -= Bcall;
 docall:
   {
     ((void)0);
     (top -= (op));
# 918 "bytecode.c"
     (*top) = Ffuncall (op + 1, &(*top));
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bunbind6:
   op = *stack.pc++;
   goto dounbind;

 insn_Bunbind7:
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   goto dounbind;

 insn_Bunbind:
 insn_Bunbind1:
 insn_Bunbind2:
 insn_Bunbind3:
 insn_Bunbind4:
 insn_Bunbind5:
   op -= Bunbind;
 dounbind:
   ((void)0);
   unbind_to ((specpdl_ptr - specpdl) - op, Qnil);
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bunbind_all:


   ((void)0);
   unbind_to (count, Qnil);
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bgoto:
   do { ((void)0); maybe_gc (); ((void)0); } while (0);
   do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   ;
   stack.pc = stack.byte_string_start + op;
   goto *(targets[op = *stack.pc++]);

 insn_Bgotoifnonnil:
   {
     Lisp_Object v1;
     do { ((void)0); maybe_gc (); ((void)0); } while (0);
     op = (op = *stack.pc++, op + (*stack.pc++ << 8));
     v1 = (*top--);
     if (!((v1) == (Qnil)))
       {
  do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
  ;
  stack.pc = stack.byte_string_start + op;
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bgotoifnilelsepop:
   do { ((void)0); maybe_gc (); ((void)0); } while (0);
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   if ((((*top)) == (Qnil)))
     {
       do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
       ;
       stack.pc = stack.byte_string_start + op;
     }
   else (top -= (1));
   goto *(targets[op = *stack.pc++]);

 insn_Bgotoifnonnilelsepop:
   do { ((void)0); maybe_gc (); ((void)0); } while (0);
   op = (op = *stack.pc++, op + (*stack.pc++ << 8));
   if (!(((*top)) == (Qnil)))
     {
       do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
       ;
       stack.pc = stack.byte_string_start + op;
     }
   else (top -= (1));
   goto *(targets[op = *stack.pc++]);

 insn_BRgoto:
   do { ((void)0); maybe_gc (); ((void)0); } while (0);
   do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
   stack.pc += (int) *stack.pc - 127;
   goto *(targets[op = *stack.pc++]);

 insn_BRgotoifnil:
   {
     Lisp_Object v1;
     do { ((void)0); maybe_gc (); ((void)0); } while (0);
     v1 = (*top--);
     if (((v1) == (Qnil)))
       {
  do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
  stack.pc += (int) *stack.pc - 128;
       }
     stack.pc++;
     goto *(targets[op = *stack.pc++]);
   }

 insn_BRgotoifnonnil:
   {
     Lisp_Object v1;
     do { ((void)0); maybe_gc (); ((void)0); } while (0);
     v1 = (*top--);
     if (!((v1) == (Qnil)))
       {
  do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
  stack.pc += (int) *stack.pc - 128;
       }
     stack.pc++;
     goto *(targets[op = *stack.pc++]);
   }

 insn_BRgotoifnilelsepop:
   do { ((void)0); maybe_gc (); ((void)0); } while (0);
   op = *stack.pc++;
   if ((((*top)) == (Qnil)))
     {
       do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
       stack.pc += op - 128;
     }
   else (top -= (1));
   goto *(targets[op = *stack.pc++]);

 insn_BRgotoifnonnilelsepop:
   do { ((void)0); maybe_gc (); ((void)0); } while (0);
   op = *stack.pc++;
   if (!(((*top)) == (Qnil)))
     {
       do { if (!((globals.f_Vquit_flag) == (Qnil)) && ((globals.f_Vinhibit_quit) == (Qnil))) { Lisp_Object flag = globals.f_Vquit_flag; globals.f_Vquit_flag = Qnil; ((void)0); if (((globals.f_Vthrow_on_input) == (flag))) Fthrow (globals.f_Vthrow_on_input, Qt); Fsignal (Qquit, Qnil); ((void)0); } else if (pending_signals) process_pending_signals (); } while (0);
       stack.pc += op - 128;
     }
   else (top -= (1));
   goto *(targets[op = *stack.pc++]);

 insn_Breturn:
   result = (*top--);
   goto exit;

 insn_Bdiscard:
   (top -= (1));
   goto *(targets[op = *stack.pc++]);

 insn_Bconstant2:
   (top++, *top = (vectorp[(op = *stack.pc++, op + (*stack.pc++ << 8))]));
   goto *(targets[op = *stack.pc++]);

 insn_Bsave_excursion:
   record_unwind_protect (save_excursion_restore,
     save_excursion_save ());
   goto *(targets[op = *stack.pc++]);

 insn_Bsave_current_buffer:
 insn_Bsave_current_buffer_1:
   record_unwind_current_buffer ();
   goto *(targets[op = *stack.pc++]);

 insn_Bsave_window_excursion:
   {
     register ptrdiff_t count1 = (specpdl_ptr - specpdl);
     record_unwind_protect (Fset_window_configuration,
       Fcurrent_window_configuration (Qnil));
     ((void)0);
     (*top) = Fprogn ((*top));
     unbind_to (count1, (*top));
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bsave_restriction:
   record_unwind_protect (save_restriction_restore,
     save_restriction_save ());
   goto *(targets[op = *stack.pc++]);

 insn_Bcatch:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = internal_catch ((*top), eval_sub, v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bunwind_protect:
   record_unwind_protect (Fprogn, (*top--));
   goto *(targets[op = *stack.pc++]);

 insn_Bcondition_case:
   {
     Lisp_Object handlers, body;
     handlers = (*top--);
     body = (*top--);
     ((void)0);
     (*top) = internal_lisp_condition_case ((*top), body, handlers);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Btemp_output_buffer_setup:
   ((void)0);
   do { if (!((((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_String))) wrong_type_argument (Qstringp, ((*top))); } while (0);
   temp_output_buffer_setup (((char *) ((((void) (0 && ((((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_String)))), (struct Lisp_String *) ((intptr_t) (((*top)) - (Lisp_String))))->data + 0)));
   ((void)0);
   (*top) = globals.f_Vstandard_output;
   goto *(targets[op = *stack.pc++]);

 insn_Btemp_output_buffer_show:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     temp_output_buffer_show ((*top));
     (*top) = v1;

     unbind_to ((specpdl_ptr - specpdl) - 1, Qnil);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bnth:
   {
     Lisp_Object v1, v2;
     EMACS_INT n;
     ((void)0);
     v1 = (*top--);
     v2 = (*top);
     do { if (!(((((((enum Lisp_Type) (((v2)) & TYPEMASK))) & ~Lisp_Int1) == 0)))) wrong_type_argument (Qintegerp, (v2)); } while (0);
     n = ((v2) >> INTTYPEBITS);
     immediate_quit = 1;
     while (--n >= 0 && (((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
       v1 = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->u.cdr)));
     immediate_quit = 0;
     (*top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->car))) : (((v1)) == (Qnil)) ? Qnil : wrong_type_argument (Qlistp, (v1)));
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bsymbolp:
   (*top) = (((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_Symbol) ? Qt : Qnil;
   goto *(targets[op = *stack.pc++]);

 insn_Bconsp:
   (*top) = (((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_Cons) ? Qt : Qnil;
   goto *(targets[op = *stack.pc++]);

 insn_Bstringp:
   (*top) = (((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_String) ? Qt : Qnil;
   goto *(targets[op = *stack.pc++]);

 insn_Blistp:
   (*top) = (((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_Cons) || (((*top)) == (Qnil)) ? Qt : Qnil;
   goto *(targets[op = *stack.pc++]);

 insn_Bnot:
   (*top) = (((*top)) == (Qnil)) ? Qt : Qnil;
   goto *(targets[op = *stack.pc++]);

 insn_Bcons:
   {
     Lisp_Object v1;
     v1 = (*top--);
     (*top) = Fcons ((*top), v1);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Blist1:
   (*top) = Fcons ((*top), Qnil);
   goto *(targets[op = *stack.pc++]);

 insn_Blist2:
   {
     Lisp_Object v1;
     v1 = (*top--);
     (*top) = Fcons ((*top), Fcons (v1, Qnil));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Blist3:
   (top -= (2));
   (*top) = Flist (3, &(*top));
   goto *(targets[op = *stack.pc++]);

 insn_Blist4:
   (top -= (3));
   (*top) = Flist (4, &(*top));
   goto *(targets[op = *stack.pc++]);

 insn_BlistN:
   op = *stack.pc++;
   (top -= (op - 1));
   (*top) = Flist (op, &(*top));
   goto *(targets[op = *stack.pc++]);

 insn_Blength:
   ((void)0);
   (*top) = Flength ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Baref:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Faref ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Baset:
   {
     Lisp_Object v1, v2;
     ((void)0);
     v2 = (*top--); v1 = (*top--);
     (*top) = Faset ((*top), v1, v2);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bsymbol_value:
   ((void)0);
   (*top) = Fsymbol_value ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bsymbol_function:
   ((void)0);
   (*top) = Fsymbol_function ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bset:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fset ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bfset:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Ffset ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bget:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fget ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bsubstring:
   {
     Lisp_Object v1, v2;
     ((void)0);
     v2 = (*top--); v1 = (*top--);
     (*top) = Fsubstring ((*top), v1, v2);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bconcat2:
   ((void)0);
   (top -= (1));
   (*top) = Fconcat (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bconcat3:
   ((void)0);
   (top -= (2));
   (*top) = Fconcat (3, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bconcat4:
   ((void)0);
   (top -= (3));
   (*top) = Fconcat (4, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_BconcatN:
   op = *stack.pc++;
   ((void)0);
   (top -= (op - 1));
   (*top) = Fconcat (op, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bsub1:
   {
     Lisp_Object v1;
     v1 = (*top);
     if (((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
       {
  ((v1) = ((EMACS_INT) (((v1) >> INTTYPEBITS) - 1) << INTTYPEBITS));
  (*top) = v1;
       }
     else
       {
  ((void)0);
  (*top) = Fsub1 (v1);
  ((void)0);
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Badd1:
   {
     Lisp_Object v1;
     v1 = (*top);
     if (((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
       {
  ((v1) = ((EMACS_INT) (((v1) >> INTTYPEBITS) + 1) << INTTYPEBITS));
  (*top) = v1;
       }
     else
       {
  ((void)0);
  (*top) = Fadd1 (v1);
  ((void)0);
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Beqlsign:
   {
     Lisp_Object v1, v2;
     ((void)0);
     v2 = (*top--); v1 = (*top);
     do { if (((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Misc) && ((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Misc)))), &(((union Lisp_Misc *) ((intptr_t) ((v1) - (Lisp_Misc))))->u_any))->type) == Lisp_Misc_Marker)) (((v1) = ((EMACS_INT) (marker_position (v1)) << INTTYPEBITS))); else do { if (!(((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)) || (((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float))) wrong_type_argument (Qnumber_or_marker_p, (v1)); } while (0); } while (0);
     do { if (((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Misc) && ((((void) (0 && ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Misc)))), &(((union Lisp_Misc *) ((intptr_t) ((v2) - (Lisp_Misc))))->u_any))->type) == Lisp_Misc_Marker)) (((v2) = ((EMACS_INT) (marker_position (v2)) << INTTYPEBITS))); else do { if (!(((((((enum Lisp_Type) (((v2)) & TYPEMASK))) & ~Lisp_Int1) == 0)) || (((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float))) wrong_type_argument (Qnumber_or_marker_p, (v2)); } while (0); } while (0);
     ((void)0);
     if ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float) || (((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float))
       {
  double f1, f2;

  f1 = ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float) ? (0 ? (((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v1) - (Lisp_Float))))->u.data : (((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v1) - (Lisp_Float))))->u.data) : ((v1) >> INTTYPEBITS));
  f2 = ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float) ? (0 ? (((void) (0 && ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v2) - (Lisp_Float))))->u.data : (((void) (0 && ((((enum Lisp_Type) (((v2)) & TYPEMASK)) == Lisp_Float)))), (struct Lisp_Float *) ((intptr_t) ((v2) - (Lisp_Float))))->u.data) : ((v2) >> INTTYPEBITS));
  (*top) = (f1 == f2 ? Qt : Qnil);
       }
     else
       (*top) = (((v1) >> INTTYPEBITS) == ((v2) >> INTTYPEBITS) ? Qt : Qnil);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bgtr:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fgtr ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Blss:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Flss ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bleq:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fleq ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bgeq:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fgeq ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bdiff:
   ((void)0);
   (top -= (1));
   (*top) = Fminus (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bnegate:
   {
     Lisp_Object v1;
     v1 = (*top);
     if (((((((enum Lisp_Type) (((v1)) & TYPEMASK))) & ~Lisp_Int1) == 0)))
       {
  ((v1) = ((EMACS_INT) (- ((v1) >> INTTYPEBITS)) << INTTYPEBITS));
  (*top) = v1;
       }
     else
       {
  ((void)0);
  (*top) = Fminus (1, &(*top));
  ((void)0);
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bplus:
   ((void)0);
   (top -= (1));
   (*top) = Fplus (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bmax:
   ((void)0);
   (top -= (1));
   (*top) = Fmax (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bmin:
   ((void)0);
   (top -= (1));
   (*top) = Fmin (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bmult:
   ((void)0);
   (top -= (1));
   (*top) = Ftimes (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bquo:
   ((void)0);
   (top -= (1));
   (*top) = Fquo (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Brem:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Frem ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bpoint:
   {
     Lisp_Object v1;
     (((v1) = ((EMACS_INT) ((current_buffer->pt + 0)) << INTTYPEBITS)));
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bgoto_char:
   ((void)0);
   (*top) = Fgoto_char ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Binsert:
   ((void)0);
   (*top) = Finsert (1, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_BinsertN:
   op = *stack.pc++;
   ((void)0);
   (top -= (op - 1));
   (*top) = Finsert (op, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bpoint_max:
   {
     Lisp_Object v1;
     (((v1) = ((EMACS_INT) ((current_buffer->zv)) << INTTYPEBITS)));
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bpoint_min:
   {
     Lisp_Object v1;
     (((v1) = ((EMACS_INT) ((current_buffer->begv)) << INTTYPEBITS)));
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bchar_after:
   ((void)0);
   (*top) = Fchar_after ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bfollowing_char:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = Ffollowing_char ();
     ((void)0);
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bpreceding_char:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = Fprevious_char ();
     ((void)0);
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bcurrent_column:
   {
     Lisp_Object v1;
     ((void)0);
     (((v1) = ((EMACS_INT) (current_column ()) << INTTYPEBITS)));
     ((void)0);
     (top++, *top = (v1));
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bindent_to:
   ((void)0);
   (*top) = Findent_to ((*top), Qnil);
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Beolp:
   (top++, *top = (Feolp ()));
   goto *(targets[op = *stack.pc++]);

 insn_Beobp:
   (top++, *top = (Feobp ()));
   goto *(targets[op = *stack.pc++]);

 insn_Bbolp:
   (top++, *top = (Fbolp ()));
   goto *(targets[op = *stack.pc++]);

 insn_Bbobp:
   (top++, *top = (Fbobp ()));
   goto *(targets[op = *stack.pc++]);

 insn_Bcurrent_buffer:
   (top++, *top = (Fcurrent_buffer ()));
   goto *(targets[op = *stack.pc++]);

 insn_Bset_buffer:
   ((void)0);
   (*top) = Fset_buffer ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Binteractive_p:
   ((void)0);
   (top++, *top = (call0 (intern ("interactive-p"))));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bforward_char:
   ((void)0);
   (*top) = Fforward_char ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bforward_word:
   ((void)0);
   (*top) = Fforward_word ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bskip_chars_forward:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fskip_chars_forward ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bskip_chars_backward:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fskip_chars_backward ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bforward_line:
   ((void)0);
   (*top) = Fforward_line ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bchar_syntax:
   {
     int c;

     ((void)0);
     do { if (!(((((((((enum Lisp_Type) ((((*top))) & TYPEMASK))) & ~Lisp_Int1) == 0)) && (((*top)) >> INTTYPEBITS) >= 0) && ((((*top)) >> INTTYPEBITS)) <= 0x3FFFFF))) wrong_type_argument (Qcharacterp, ((*top))); } while (0);
     ((void)0);
     c = ((((*top)) >> INTTYPEBITS));
     if (((((current_buffer)->enable_multibyte_characters_)) == (Qnil)))
       (((void) (0 && ((c) >= 0 && (c) < 256))), (c) = ((((sizeof ((c) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof ((c) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? ((c) + (unsigned) 0) < ((0x80) + (unsigned) 0) : ((c) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) ? (c) : ((c) + 0x3FFF00)));
     ((((*top)) = ((EMACS_INT) (syntax_code_spec[(int) ({ Lisp_Object _syntax_temp; _syntax_temp = ((((sizeof (((c)) + 0)) > (sizeof ((0x80) + 0)) ? (sizeof (((c)) + 0)) : (sizeof ((0x80) + 0))) <= sizeof (unsigned) ? (((c)) + (unsigned) 0) < ((0x80) + (unsigned) 0) : (((c)) + (uintmax_t) 0) < ((0x80) + (uintmax_t) 0)) ? ({struct Lisp_Char_Table *_tbl = ((void *)0); Lisp_Object _val; do { _tbl = _tbl ? (((void) (0 && (((((enum Lisp_Type) (((_tbl->parent)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) ((_tbl->parent) - (Lisp_Vectorlike)))) : (((void) (0 && (((((enum Lisp_Type) ((((((current_buffer)->syntax_table_)))) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) (((((current_buffer)->syntax_table_))) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), (struct Lisp_Char_Table *) ((intptr_t) (((((current_buffer)->syntax_table_))) - (Lisp_Vectorlike)))); _val = (! ((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS)))) ? _tbl->ascii : (((void) (0 && (((((enum Lisp_Type) (((_tbl->ascii)) & TYPEMASK)) == Lisp_Vectorlike) && ((((struct vectorlike_header *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike))))->size & (((2147483647) - (2147483647) / 2) | PVEC_TYPE_MASK)) == (((2147483647) - (2147483647) / 2) | ((PVEC_SUB_CHAR_TABLE) << PSEUDOVECTOR_AREA_BITS))))))), ((struct Lisp_Sub_Char_Table *) ((intptr_t) ((_tbl->ascii) - (Lisp_Vectorlike)))))->contents[((c))]); if (((_val) == (Qnil))) _val = _tbl->defalt; } while (((_val) == (Qnil)) && ! ((_tbl->parent) == (Qnil))); _val; }) : char_table_ref ((((current_buffer)->syntax_table_)), ((c)))); ((((enum Lisp_Type) (((_syntax_temp)) & TYPEMASK)) == Lisp_Cons) ? (enum syntaxcode) ((((0 + (((((void) (0 && ((((enum Lisp_Type) (((_syntax_temp)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((_syntax_temp) - (Lisp_Cons))))->car)))) >> INTTYPEBITS) & 0xff) : Swhitespace); })]) << INTTYPEBITS)));
   }
   goto *(targets[op = *stack.pc++]);

 insn_Bbuffer_substring:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fbuffer_substring ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bdelete_region:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fdelete_region ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bnarrow_to_region:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fnarrow_to_region ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bwiden:
   ((void)0);
   (top++, *top = (Fwiden ()));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bend_of_line:
   ((void)0);
   (*top) = Fend_of_line ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bset_marker:
   {
     Lisp_Object v1, v2;
     ((void)0);
     v1 = (*top--);
     v2 = (*top--);
     (*top) = Fset_marker ((*top), v2, v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bmatch_beginning:
   ((void)0);
   (*top) = Fmatch_beginning ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bmatch_end:
   ((void)0);
   (*top) = Fmatch_end ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bupcase:
   ((void)0);
   (*top) = Fupcase ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bdowncase:
   ((void)0);
   (*top) = Fdowncase ((*top));
   ((void)0);
 goto *(targets[op = *stack.pc++]);

      insn_Bstringeqlsign:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fstring_equal ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bstringlss:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fstring_lessp ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bequal:
   {
     Lisp_Object v1;
     v1 = (*top--);
     (*top) = Fequal ((*top), v1);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bnthcdr:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fnthcdr ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Belt:
   {
     Lisp_Object v1, v2;
     if ((((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_Cons))
       {

  EMACS_INT n;
  ((void)0);
  v2 = (*top--);
  v1 = (*top);
  do { if (!(((((((enum Lisp_Type) (((v2)) & TYPEMASK))) & ~Lisp_Int1) == 0)))) wrong_type_argument (Qintegerp, (v2)); } while (0);
  ((void)0);
  n = ((v2) >> INTTYPEBITS);
  immediate_quit = 1;
  while (--n >= 0 && (((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons))
    v1 = (0 + (((((void) (0 && ((((enum Lisp_Type) (((v1)) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) ((v1) - (Lisp_Cons))))->u.cdr)));
  immediate_quit = 0;
  (*top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->car))) : (((v1)) == (Qnil)) ? Qnil : wrong_type_argument (Qlistp, (v1)));
       }
     else
       {
  ((void)0);
  v1 = (*top--);
  (*top) = Felt ((*top), v1);
  ((void)0);
       }
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bmember:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fmember ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bassq:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fassq ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bnreverse:
   ((void)0);
   (*top) = Fnreverse ((*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bsetcar:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fsetcar ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bsetcdr:
   {
     Lisp_Object v1;
     ((void)0);
     v1 = (*top--);
     (*top) = Fsetcdr ((*top), v1);
     ((void)0);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bcar_safe:
   {
     Lisp_Object v1;
     v1 = (*top);
     (*top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->car))) : Qnil);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bcdr_safe:
   {
     Lisp_Object v1;
     v1 = (*top);
     (*top) = ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons) ? (0 + (((((void) (0 && ((((enum Lisp_Type) ((((v1))) & TYPEMASK)) == Lisp_Cons)))), (struct Lisp_Cons *) ((intptr_t) (((v1)) - (Lisp_Cons))))->u.cdr))) : Qnil);
     goto *(targets[op = *stack.pc++]);
   }

 insn_Bnconc:
   ((void)0);
   (top -= (1));
   (*top) = Fnconc (2, &(*top));
   ((void)0);
   goto *(targets[op = *stack.pc++]);

 insn_Bnumberp:
   (*top) = ((((((((enum Lisp_Type) ((((*top))) & TYPEMASK))) & ~Lisp_Int1) == 0)) || (((enum Lisp_Type) ((((*top))) & TYPEMASK)) == Lisp_Float)) ? Qt : Qnil);
   goto *(targets[op = *stack.pc++]);

 insn_Bintegerp:
   (*top) = ((((((enum Lisp_Type) ((((*top))) & TYPEMASK))) & ~Lisp_Int1) == 0)) ? Qt : Qnil;
   goto *(targets[op = *stack.pc++]);
# 1896 "bytecode.c"
 insn_Bstack_ref: insn_default:



   error ("Invalid byte opcode");


 insn_Bstack_ref1:
 insn_Bstack_ref2:
 insn_Bstack_ref3:
 insn_Bstack_ref4:
 insn_Bstack_ref5:
   {
     Lisp_Object *ptr = top - (op - Bstack_ref);
     (top++, *top = (*ptr));
     goto *(targets[op = *stack.pc++]);
   }
 insn_Bstack_ref6:
   {
     Lisp_Object *ptr = top - (*stack.pc++);
     (top++, *top = (*ptr));
     goto *(targets[op = *stack.pc++]);
   }
 insn_Bstack_ref7:
   {
     Lisp_Object *ptr = top - ((op = *stack.pc++, op + (*stack.pc++ << 8)));
     (top++, *top = (*ptr));
     goto *(targets[op = *stack.pc++]);
   }
 insn_Bstack_set:

   {
     Lisp_Object *ptr = top - (*stack.pc++);
     *ptr = (*top--);
     goto *(targets[op = *stack.pc++]);
   }
 insn_Bstack_set2:
   {
     Lisp_Object *ptr = top - ((op = *stack.pc++, op + (*stack.pc++ << 8)));
     *ptr = (*top--);
     goto *(targets[op = *stack.pc++]);
   }
 insn_BdiscardN:
   op = *stack.pc++;
   if (op & 0x80)
     {
       op &= 0x7F;
       top[-op] = (*top);
     }
   (top -= (op));
   goto *(targets[op = *stack.pc++]);

        insn_Bjitcall:

          {
            struct bytecode_jit_core core;
            core.pstack = &stack;
            core.top = top;
            core.count = count;


            jit_function_t code = *(jit_function_t*)(core.pstack->pc);


            struct bytecode_jit_core* pcore = &core;
            void* args[1] = { &pcore };
            jit_function_apply(code, args, ((void *)0));


            core.pstack->pc += sizeof(jit_function_t);


            result = core.result;
            count = core.count;
          }
          goto exit;





 insn_Bconstant:
# 1989 "bytecode.c"
   (top++, *top = (vectorp[op - Bconstant]));

   goto *(targets[op = *stack.pc++]);
 }
    }

 exit:

  byte_stack_list = byte_stack_list->next;


  if ((specpdl_ptr - specpdl) != count)



    emacs_abort ();


  return result;
}

void
syms_of_bytecode (void)
{
  do { (Qbytecode) = intern_c_string (("byte-code")); staticpro (&(Qbytecode)); } while (0);

  defsubr (&Sbyte_code);
# 2043 "bytecode.c"
}
